
test1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041ec  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080042f8  080042f8  000142f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004340  08004340  00020584  2**0
                  CONTENTS
  4 .ARM          00000000  08004340  08004340  00020584  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004340  08004340  00020584  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004340  08004340  00014340  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004344  08004344  00014344  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000584  20000000  08004348  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002374  20000584  080048cc  00020584  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200028f8  080048cc  000228f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020584  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cd3d  00000000  00000000  000205ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004241  00000000  00000000  0003d2ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000cc88  00000000  00000000  0004152b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c78  00000000  00000000  0004e1b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000012b0  00000000  00000000  0004ee30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001bf19  00000000  00000000  000500e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015f2c  00000000  00000000  0006bff9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008f98a  00000000  00000000  00081f25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001118af  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001e68  00000000  00000000  00111904  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000584 	.word	0x20000584
 8000128:	00000000 	.word	0x00000000
 800012c:	080042e0 	.word	0x080042e0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000588 	.word	0x20000588
 8000148:	080042e0 	.word	0x080042e0

0800014c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800014c:	b508      	push	{r3, lr}
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800014e:	4a27      	ldr	r2, [pc, #156]	; (80001ec <SystemClock_Config+0xa0>)
 8000150:	6813      	ldr	r3, [r2, #0]
 8000152:	f023 0307 	bic.w	r3, r3, #7
 8000156:	f043 0302 	orr.w	r3, r3, #2
 800015a:	6013      	str	r3, [r2, #0]
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800015c:	6813      	ldr	r3, [r2, #0]
 800015e:	f003 0307 	and.w	r3, r3, #7
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 8000162:	2b02      	cmp	r3, #2
 8000164:	d1fa      	bne.n	800015c <SystemClock_Config+0x10>
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000166:	4a22      	ldr	r2, [pc, #136]	; (80001f0 <SystemClock_Config+0xa4>)
 8000168:	6813      	ldr	r3, [r2, #0]
 800016a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800016e:	6013      	str	r3, [r2, #0]
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8000170:	6813      	ldr	r3, [r2, #0]
  {
  }
  LL_RCC_HSE_Enable();

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8000172:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000176:	d0fb      	beq.n	8000170 <SystemClock_Config+0x24>
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 8000178:	4a1d      	ldr	r2, [pc, #116]	; (80001f0 <SystemClock_Config+0xa4>)
 800017a:	6853      	ldr	r3, [r2, #4]
 800017c:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8000180:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 8000184:	6053      	str	r3, [r2, #4]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000186:	6813      	ldr	r3, [r2, #0]
 8000188:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800018c:	6013      	str	r3, [r2, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 800018e:	6813      	ldr	r3, [r2, #0]
  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE_DIV_1, LL_RCC_PLL_MUL_9);
  LL_RCC_PLL_Enable();

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8000190:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000194:	d0fb      	beq.n	800018e <SystemClock_Config+0x42>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000196:	4b16      	ldr	r3, [pc, #88]	; (80001f0 <SystemClock_Config+0xa4>)
 8000198:	685a      	ldr	r2, [r3, #4]
 800019a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800019e:	605a      	str	r2, [r3, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80001a0:	685a      	ldr	r2, [r3, #4]
 80001a2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80001a6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80001aa:	605a      	str	r2, [r3, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80001ac:	685a      	ldr	r2, [r3, #4]
 80001ae:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
 80001b2:	605a      	str	r2, [r3, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80001b4:	685a      	ldr	r2, [r3, #4]
 80001b6:	f022 0203 	bic.w	r2, r2, #3
 80001ba:	f042 0202 	orr.w	r2, r2, #2
 80001be:	605a      	str	r2, [r3, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80001c0:	461a      	mov	r2, r3
 80001c2:	6853      	ldr	r3, [r2, #4]
 80001c4:	f003 030c 	and.w	r3, r3, #12
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80001c8:	2b08      	cmp	r3, #8
 80001ca:	d1fa      	bne.n	80001c2 <SystemClock_Config+0x76>
  {

  }
  LL_SetSystemCoreClock(72000000);
 80001cc:	4809      	ldr	r0, [pc, #36]	; (80001f4 <SystemClock_Config+0xa8>)
 80001ce:	f002 fffd 	bl	80031cc <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 80001d2:	2000      	movs	r0, #0
 80001d4:	f000 fbc0 	bl	8000958 <HAL_InitTick>
 80001d8:	b928      	cbnz	r0, 80001e6 <SystemClock_Config+0x9a>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_USBPRE, USBxSource);
 80001da:	4a05      	ldr	r2, [pc, #20]	; (80001f0 <SystemClock_Config+0xa4>)
 80001dc:	6853      	ldr	r3, [r2, #4]
 80001de:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80001e2:	6053      	str	r3, [r2, #4]
  {
    Error_Handler();
  }
  LL_RCC_SetUSBClockSource(LL_RCC_USB_CLKSOURCE_PLL_DIV_1_5);
}
 80001e4:	bd08      	pop	{r3, pc}
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80001e6:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80001e8:	e7fe      	b.n	80001e8 <SystemClock_Config+0x9c>
 80001ea:	bf00      	nop
 80001ec:	40022000 	.word	0x40022000
 80001f0:	40021000 	.word	0x40021000
 80001f4:	044aa200 	.word	0x044aa200

080001f8 <main>:
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b0a0      	sub	sp, #128	; 0x80
  HAL_Init();
 80001fc:	f000 fbd2 	bl	80009a4 <HAL_Init>
  SystemClock_Config();
 8000200:	f7ff ffa4 	bl	800014c <SystemClock_Config>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000204:	2500      	movs	r5, #0
 8000206:	951c      	str	r5, [sp, #112]	; 0x70
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000208:	4c93      	ldr	r4, [pc, #588]	; (8000458 <main+0x260>)
 800020a:	69a3      	ldr	r3, [r4, #24]
 800020c:	f043 0310 	orr.w	r3, r3, #16
 8000210:	61a3      	str	r3, [r4, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000212:	69a3      	ldr	r3, [r4, #24]
 8000214:	f003 0310 	and.w	r3, r3, #16
 8000218:	9304      	str	r3, [sp, #16]
  (void)tmpreg;
 800021a:	9b04      	ldr	r3, [sp, #16]
  SET_BIT(RCC->APB2ENR, Periphs);
 800021c:	69a3      	ldr	r3, [r4, #24]
 800021e:	f043 0320 	orr.w	r3, r3, #32
 8000222:	61a3      	str	r3, [r4, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000224:	69a3      	ldr	r3, [r4, #24]
 8000226:	f003 0320 	and.w	r3, r3, #32
 800022a:	9305      	str	r3, [sp, #20]
  (void)tmpreg;
 800022c:	9b05      	ldr	r3, [sp, #20]
  SET_BIT(RCC->APB2ENR, Periphs);
 800022e:	69a3      	ldr	r3, [r4, #24]
 8000230:	f043 0304 	orr.w	r3, r3, #4
 8000234:	61a3      	str	r3, [r4, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000236:	69a3      	ldr	r3, [r4, #24]
 8000238:	f003 0304 	and.w	r3, r3, #4
 800023c:	9306      	str	r3, [sp, #24]
  (void)tmpreg;
 800023e:	9b06      	ldr	r3, [sp, #24]
  SET_BIT(RCC->APB2ENR, Periphs);
 8000240:	69a3      	ldr	r3, [r4, #24]
 8000242:	f043 0308 	orr.w	r3, r3, #8
 8000246:	61a3      	str	r3, [r4, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000248:	69a3      	ldr	r3, [r4, #24]
 800024a:	f003 0308 	and.w	r3, r3, #8
 800024e:	9307      	str	r3, [sp, #28]
  (void)tmpreg;
 8000250:	9b07      	ldr	r3, [sp, #28]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8000252:	4882      	ldr	r0, [pc, #520]	; (800045c <main+0x264>)
 8000254:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000258:	6143      	str	r3, [r0, #20]
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13;
 800025a:	4b81      	ldr	r3, [pc, #516]	; (8000460 <main+0x268>)
 800025c:	9318      	str	r3, [sp, #96]	; 0x60
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800025e:	2601      	movs	r6, #1
 8000260:	9619      	str	r6, [sp, #100]	; 0x64
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000262:	2702      	movs	r7, #2
 8000264:	971a      	str	r7, [sp, #104]	; 0x68
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000266:	951b      	str	r5, [sp, #108]	; 0x6c
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000268:	a918      	add	r1, sp, #96	; 0x60
 800026a:	f001 ff5c 	bl	8002126 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 800026e:	f242 0320 	movw	r3, #8224	; 0x2020
 8000272:	9318      	str	r3, [sp, #96]	; 0x60
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8000274:	2304      	movs	r3, #4
 8000276:	9319      	str	r3, [sp, #100]	; 0x64
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000278:	a918      	add	r1, sp, #96	; 0x60
 800027a:	487a      	ldr	r0, [pc, #488]	; (8000464 <main+0x26c>)
 800027c:	f001 ff53 	bl	8002126 <LL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000280:	6963      	ldr	r3, [r4, #20]
 8000282:	4333      	orrs	r3, r6
 8000284:	6163      	str	r3, [r4, #20]
 8000286:	6963      	ldr	r3, [r4, #20]
 8000288:	4033      	ands	r3, r6
 800028a:	9303      	str	r3, [sp, #12]
 800028c:	9b03      	ldr	r3, [sp, #12]
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800028e:	462a      	mov	r2, r5
 8000290:	4629      	mov	r1, r5
 8000292:	200d      	movs	r0, #13
 8000294:	f000 fbbc 	bl	8000a10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000298:	200d      	movs	r0, #13
 800029a:	f000 fbeb 	bl	8000a74 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800029e:	462a      	mov	r2, r5
 80002a0:	4629      	mov	r1, r5
 80002a2:	200f      	movs	r0, #15
 80002a4:	f000 fbb4 	bl	8000a10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80002a8:	200f      	movs	r0, #15
 80002aa:	f000 fbe3 	bl	8000a74 <HAL_NVIC_EnableIRQ>
  hspi1.Instance = SPI1;
 80002ae:	486e      	ldr	r0, [pc, #440]	; (8000468 <main+0x270>)
 80002b0:	4b6e      	ldr	r3, [pc, #440]	; (800046c <main+0x274>)
 80002b2:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80002b4:	f44f 7382 	mov.w	r3, #260	; 0x104
 80002b8:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80002ba:	6085      	str	r5, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80002bc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80002c0:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80002c2:	6107      	str	r7, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80002c4:	6146      	str	r6, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80002c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80002ca:	6183      	str	r3, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80002cc:	2318      	movs	r3, #24
 80002ce:	61c3      	str	r3, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80002d0:	6205      	str	r5, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80002d2:	6245      	str	r5, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80002d4:	6285      	str	r5, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80002d6:	230a      	movs	r3, #10
 80002d8:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80002da:	f001 fe07 	bl	8001eec <HAL_SPI_Init>
 80002de:	2800      	cmp	r0, #0
 80002e0:	f040 80b5 	bne.w	800044e <main+0x256>
  hspi2.Instance = SPI2;
 80002e4:	4862      	ldr	r0, [pc, #392]	; (8000470 <main+0x278>)
 80002e6:	4b63      	ldr	r3, [pc, #396]	; (8000474 <main+0x27c>)
 80002e8:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80002ea:	f44f 7382 	mov.w	r3, #260	; 0x104
 80002ee:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80002f0:	2300      	movs	r3, #0
 80002f2:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 80002f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80002f8:	60c2      	str	r2, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80002fa:	2202      	movs	r2, #2
 80002fc:	6102      	str	r2, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80002fe:	2201      	movs	r2, #1
 8000300:	6142      	str	r2, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000302:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000306:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000308:	2210      	movs	r2, #16
 800030a:	61c2      	str	r2, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800030c:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800030e:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000310:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000312:	230a      	movs	r3, #10
 8000314:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000316:	f001 fde9 	bl	8001eec <HAL_SPI_Init>
 800031a:	2800      	cmp	r0, #0
 800031c:	f040 8099 	bne.w	8000452 <main+0x25a>
  MX_USB_DEVICE_Init();
 8000320:	f003 fd8e 	bl	8003e40 <MX_USB_DEVICE_Init>
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000324:	2400      	movs	r4, #0
 8000326:	9408      	str	r4, [sp, #32]
 8000328:	9409      	str	r4, [sp, #36]	; 0x24
 800032a:	940a      	str	r4, [sp, #40]	; 0x28
 800032c:	940b      	str	r4, [sp, #44]	; 0x2c
 800032e:	940c      	str	r4, [sp, #48]	; 0x30
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8000330:	2220      	movs	r2, #32
 8000332:	4621      	mov	r1, r4
 8000334:	a818      	add	r0, sp, #96	; 0x60
 8000336:	f003 ffcb 	bl	80042d0 <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 800033a:	9412      	str	r4, [sp, #72]	; 0x48
 800033c:	9413      	str	r4, [sp, #76]	; 0x4c
 800033e:	9414      	str	r4, [sp, #80]	; 0x50
 8000340:	9415      	str	r4, [sp, #84]	; 0x54
 8000342:	9416      	str	r4, [sp, #88]	; 0x58
 8000344:	9417      	str	r4, [sp, #92]	; 0x5c
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000346:	940d      	str	r4, [sp, #52]	; 0x34
 8000348:	940e      	str	r4, [sp, #56]	; 0x38
 800034a:	940f      	str	r4, [sp, #60]	; 0x3c
 800034c:	9410      	str	r4, [sp, #64]	; 0x40
 800034e:	9411      	str	r4, [sp, #68]	; 0x44
  SET_BIT(RCC->APB2ENR, Periphs);
 8000350:	4e41      	ldr	r6, [pc, #260]	; (8000458 <main+0x260>)
 8000352:	69b3      	ldr	r3, [r6, #24]
 8000354:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000358:	61b3      	str	r3, [r6, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800035a:	69b3      	ldr	r3, [r6, #24]
 800035c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000360:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8000362:	9b01      	ldr	r3, [sp, #4]
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000364:	4b44      	ldr	r3, [pc, #272]	; (8000478 <main+0x280>)
 8000366:	68db      	ldr	r3, [r3, #12]
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000368:	4b44      	ldr	r3, [pc, #272]	; (800047c <main+0x284>)
 800036a:	f883 431b 	strb.w	r4, [r3, #795]	; 0x31b
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800036e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000372:	601a      	str	r2, [r3, #0]
  TIM_InitStruct.Prescaler = 0;
 8000374:	f8ad 4020 	strh.w	r4, [sp, #32]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000378:	9409      	str	r4, [sp, #36]	; 0x24
  TIM_InitStruct.Autoreload = 13636;
 800037a:	f243 5344 	movw	r3, #13636	; 0x3544
 800037e:	930a      	str	r3, [sp, #40]	; 0x28
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8000380:	940b      	str	r4, [sp, #44]	; 0x2c
  TIM_InitStruct.RepetitionCounter = 0;
 8000382:	940c      	str	r4, [sp, #48]	; 0x30
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8000384:	4d3e      	ldr	r5, [pc, #248]	; (8000480 <main+0x288>)
 8000386:	a908      	add	r1, sp, #32
 8000388:	4628      	mov	r0, r5
 800038a:	f001 ff4f 	bl	800222c <LL_TIM_Init>
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 800038e:	682b      	ldr	r3, [r5, #0]
 8000390:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000394:	602b      	str	r3, [r5, #0]
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8000396:	68ab      	ldr	r3, [r5, #8]
 8000398:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800039c:	f023 0307 	bic.w	r3, r3, #7
 80003a0:	60ab      	str	r3, [r5, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80003a2:	69ab      	ldr	r3, [r5, #24]
 80003a4:	f043 0308 	orr.w	r3, r3, #8
 80003a8:	61ab      	str	r3, [r5, #24]
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 80003aa:	2360      	movs	r3, #96	; 0x60
 80003ac:	9318      	str	r3, [sp, #96]	; 0x60
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80003ae:	9419      	str	r4, [sp, #100]	; 0x64
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80003b0:	941a      	str	r4, [sp, #104]	; 0x68
  TIM_OC_InitStruct.CompareValue = 400;
 80003b2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80003b6:	931b      	str	r3, [sp, #108]	; 0x6c
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 80003b8:	941c      	str	r4, [sp, #112]	; 0x70
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 80003ba:	941d      	str	r4, [sp, #116]	; 0x74
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 80003bc:	941e      	str	r4, [sp, #120]	; 0x78
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 80003be:	941f      	str	r4, [sp, #124]	; 0x7c
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 80003c0:	aa18      	add	r2, sp, #96	; 0x60
 80003c2:	2101      	movs	r1, #1
 80003c4:	4628      	mov	r0, r5
 80003c6:	f001 ff77 	bl	80022b8 <LL_TIM_OC_Init>
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 80003ca:	69ab      	ldr	r3, [r5, #24]
 80003cc:	f023 0304 	bic.w	r3, r3, #4
 80003d0:	61ab      	str	r3, [r5, #24]
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_FROZEN;
 80003d2:	9418      	str	r4, [sp, #96]	; 0x60
  TIM_OC_InitStruct.CompareValue = 50;
 80003d4:	2332      	movs	r3, #50	; 0x32
 80003d6:	931b      	str	r3, [sp, #108]	; 0x6c
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 80003d8:	aa18      	add	r2, sp, #96	; 0x60
 80003da:	2110      	movs	r1, #16
 80003dc:	4628      	mov	r0, r5
 80003de:	f001 ff6b 	bl	80022b8 <LL_TIM_OC_Init>
 80003e2:	69ab      	ldr	r3, [r5, #24]
 80003e4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80003e8:	61ab      	str	r3, [r5, #24]
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80003ea:	686b      	ldr	r3, [r5, #4]
 80003ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80003f0:	606b      	str	r3, [r5, #4]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 80003f2:	68ab      	ldr	r3, [r5, #8]
 80003f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80003f8:	60ab      	str	r3, [r5, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80003fa:	69ab      	ldr	r3, [r5, #24]
 80003fc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000400:	61ab      	str	r3, [r5, #24]
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_DISABLE;
 8000402:	9412      	str	r4, [sp, #72]	; 0x48
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_DISABLE;
 8000404:	9413      	str	r4, [sp, #76]	; 0x4c
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
 8000406:	9414      	str	r4, [sp, #80]	; 0x50
  TIM_BDTRInitStruct.DeadTime = 0;
 8000408:	f88d 4054 	strb.w	r4, [sp, #84]	; 0x54
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 800040c:	f8ad 4056 	strh.w	r4, [sp, #86]	; 0x56
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 8000410:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000414:	9316      	str	r3, [sp, #88]	; 0x58
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 8000416:	9417      	str	r4, [sp, #92]	; 0x5c
  LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 8000418:	a912      	add	r1, sp, #72	; 0x48
 800041a:	4628      	mov	r0, r5
 800041c:	f002 f822 	bl	8002464 <LL_TIM_BDTR_Init>
  SET_BIT(RCC->APB2ENR, Periphs);
 8000420:	69b3      	ldr	r3, [r6, #24]
 8000422:	f043 0304 	orr.w	r3, r3, #4
 8000426:	61b3      	str	r3, [r6, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000428:	69b3      	ldr	r3, [r6, #24]
 800042a:	f003 0304 	and.w	r3, r3, #4
 800042e:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 8000430:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 8000432:	4b14      	ldr	r3, [pc, #80]	; (8000484 <main+0x28c>)
 8000434:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000436:	2309      	movs	r3, #9
 8000438:	930e      	str	r3, [sp, #56]	; 0x38
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800043a:	2302      	movs	r3, #2
 800043c:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800043e:	9410      	str	r4, [sp, #64]	; 0x40
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000440:	a90d      	add	r1, sp, #52	; 0x34
 8000442:	4811      	ldr	r0, [pc, #68]	; (8000488 <main+0x290>)
 8000444:	f001 fe6f 	bl	8002126 <LL_GPIO_Init>
  init();
 8000448:	f000 f9c8 	bl	80007dc <init>
  while (1)
 800044c:	e7fe      	b.n	800044c <main+0x254>
 800044e:	b672      	cpsid	i
  while (1)
 8000450:	e7fe      	b.n	8000450 <main+0x258>
 8000452:	b672      	cpsid	i
 8000454:	e7fe      	b.n	8000454 <main+0x25c>
 8000456:	bf00      	nop
 8000458:	40021000 	.word	0x40021000
 800045c:	40011000 	.word	0x40011000
 8000460:	04200020 	.word	0x04200020
 8000464:	40010c00 	.word	0x40010c00
 8000468:	20001094 	.word	0x20001094
 800046c:	40013000 	.word	0x40013000
 8000470:	2000103c 	.word	0x2000103c
 8000474:	40003800 	.word	0x40003800
 8000478:	e000ed00 	.word	0xe000ed00
 800047c:	e000e100 	.word	0xe000e100
 8000480:	40012c00 	.word	0x40012c00
 8000484:	04010001 	.word	0x04010001
 8000488:	40010800 	.word	0x40010800

0800048c <Error_Handler>:
 800048c:	b672      	cpsid	i
 800048e:	e7fe      	b.n	800048e <Error_Handler+0x2>

08000490 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000490:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000492:	4b0e      	ldr	r3, [pc, #56]	; (80004cc <HAL_MspInit+0x3c>)
 8000494:	699a      	ldr	r2, [r3, #24]
 8000496:	f042 0201 	orr.w	r2, r2, #1
 800049a:	619a      	str	r2, [r3, #24]
 800049c:	699a      	ldr	r2, [r3, #24]
 800049e:	f002 0201 	and.w	r2, r2, #1
 80004a2:	9200      	str	r2, [sp, #0]
 80004a4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004a6:	69da      	ldr	r2, [r3, #28]
 80004a8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80004ac:	61da      	str	r2, [r3, #28]
 80004ae:	69db      	ldr	r3, [r3, #28]
 80004b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004b4:	9301      	str	r3, [sp, #4]
 80004b6:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004b8:	4a05      	ldr	r2, [pc, #20]	; (80004d0 <HAL_MspInit+0x40>)
 80004ba:	6853      	ldr	r3, [r2, #4]
 80004bc:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80004c0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004c4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004c6:	b002      	add	sp, #8
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop
 80004cc:	40021000 	.word	0x40021000
 80004d0:	40010000 	.word	0x40010000

080004d4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80004d4:	b510      	push	{r4, lr}
 80004d6:	b088      	sub	sp, #32
 80004d8:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004da:	2300      	movs	r3, #0
 80004dc:	9304      	str	r3, [sp, #16]
 80004de:	9305      	str	r3, [sp, #20]
 80004e0:	9306      	str	r3, [sp, #24]
 80004e2:	9307      	str	r3, [sp, #28]
  if(hspi->Instance==SPI1)
 80004e4:	6803      	ldr	r3, [r0, #0]
 80004e6:	4a3e      	ldr	r2, [pc, #248]	; (80005e0 <HAL_SPI_MspInit+0x10c>)
 80004e8:	4293      	cmp	r3, r2
 80004ea:	d004      	beq.n	80004f6 <HAL_SPI_MspInit+0x22>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(hspi->Instance==SPI2)
 80004ec:	4a3d      	ldr	r2, [pc, #244]	; (80005e4 <HAL_SPI_MspInit+0x110>)
 80004ee:	4293      	cmp	r3, r2
 80004f0:	d03b      	beq.n	800056a <HAL_SPI_MspInit+0x96>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80004f2:	b008      	add	sp, #32
 80004f4:	bd10      	pop	{r4, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 80004f6:	4b3c      	ldr	r3, [pc, #240]	; (80005e8 <HAL_SPI_MspInit+0x114>)
 80004f8:	699a      	ldr	r2, [r3, #24]
 80004fa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80004fe:	619a      	str	r2, [r3, #24]
 8000500:	699a      	ldr	r2, [r3, #24]
 8000502:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8000506:	9200      	str	r2, [sp, #0]
 8000508:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800050a:	699a      	ldr	r2, [r3, #24]
 800050c:	f042 0204 	orr.w	r2, r2, #4
 8000510:	619a      	str	r2, [r3, #24]
 8000512:	699b      	ldr	r3, [r3, #24]
 8000514:	f003 0304 	and.w	r3, r3, #4
 8000518:	9301      	str	r3, [sp, #4]
 800051a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800051c:	23a0      	movs	r3, #160	; 0xa0
 800051e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000520:	2302      	movs	r3, #2
 8000522:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000524:	2303      	movs	r3, #3
 8000526:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000528:	a904      	add	r1, sp, #16
 800052a:	4830      	ldr	r0, [pc, #192]	; (80005ec <HAL_SPI_MspInit+0x118>)
 800052c:	f000 fbe6 	bl	8000cfc <HAL_GPIO_Init>
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8000530:	482f      	ldr	r0, [pc, #188]	; (80005f0 <HAL_SPI_MspInit+0x11c>)
 8000532:	4b30      	ldr	r3, [pc, #192]	; (80005f4 <HAL_SPI_MspInit+0x120>)
 8000534:	6003      	str	r3, [r0, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000536:	2310      	movs	r3, #16
 8000538:	6043      	str	r3, [r0, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800053a:	2300      	movs	r3, #0
 800053c:	6083      	str	r3, [r0, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800053e:	2280      	movs	r2, #128	; 0x80
 8000540:	60c2      	str	r2, [r0, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000542:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000546:	6102      	str	r2, [r0, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000548:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800054c:	6142      	str	r2, [r0, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800054e:	6183      	str	r3, [r0, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8000550:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000554:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000556:	f000 fab1 	bl	8000abc <HAL_DMA_Init>
 800055a:	b918      	cbnz	r0, 8000564 <HAL_SPI_MspInit+0x90>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 800055c:	4b24      	ldr	r3, [pc, #144]	; (80005f0 <HAL_SPI_MspInit+0x11c>)
 800055e:	64a3      	str	r3, [r4, #72]	; 0x48
 8000560:	625c      	str	r4, [r3, #36]	; 0x24
 8000562:	e7c6      	b.n	80004f2 <HAL_SPI_MspInit+0x1e>
      Error_Handler();
 8000564:	f7ff ff92 	bl	800048c <Error_Handler>
 8000568:	e7f8      	b.n	800055c <HAL_SPI_MspInit+0x88>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800056a:	4b1f      	ldr	r3, [pc, #124]	; (80005e8 <HAL_SPI_MspInit+0x114>)
 800056c:	69da      	ldr	r2, [r3, #28]
 800056e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000572:	61da      	str	r2, [r3, #28]
 8000574:	69da      	ldr	r2, [r3, #28]
 8000576:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800057a:	9202      	str	r2, [sp, #8]
 800057c:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800057e:	699a      	ldr	r2, [r3, #24]
 8000580:	f042 0208 	orr.w	r2, r2, #8
 8000584:	619a      	str	r2, [r3, #24]
 8000586:	699b      	ldr	r3, [r3, #24]
 8000588:	f003 0308 	and.w	r3, r3, #8
 800058c:	9303      	str	r3, [sp, #12]
 800058e:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000590:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000594:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000596:	2302      	movs	r3, #2
 8000598:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800059a:	2303      	movs	r3, #3
 800059c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800059e:	a904      	add	r1, sp, #16
 80005a0:	4815      	ldr	r0, [pc, #84]	; (80005f8 <HAL_SPI_MspInit+0x124>)
 80005a2:	f000 fbab 	bl	8000cfc <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Channel5;
 80005a6:	4815      	ldr	r0, [pc, #84]	; (80005fc <HAL_SPI_MspInit+0x128>)
 80005a8:	4b15      	ldr	r3, [pc, #84]	; (8000600 <HAL_SPI_MspInit+0x12c>)
 80005aa:	6003      	str	r3, [r0, #0]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80005ac:	2310      	movs	r3, #16
 80005ae:	6043      	str	r3, [r0, #4]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80005b0:	2300      	movs	r3, #0
 80005b2:	6083      	str	r3, [r0, #8]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80005b4:	2280      	movs	r2, #128	; 0x80
 80005b6:	60c2      	str	r2, [r0, #12]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80005b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005bc:	6102      	str	r2, [r0, #16]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80005be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80005c2:	6142      	str	r2, [r0, #20]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80005c4:	6183      	str	r3, [r0, #24]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80005c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005ca:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80005cc:	f000 fa76 	bl	8000abc <HAL_DMA_Init>
 80005d0:	b918      	cbnz	r0, 80005da <HAL_SPI_MspInit+0x106>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 80005d2:	4b0a      	ldr	r3, [pc, #40]	; (80005fc <HAL_SPI_MspInit+0x128>)
 80005d4:	64a3      	str	r3, [r4, #72]	; 0x48
 80005d6:	625c      	str	r4, [r3, #36]	; 0x24
}
 80005d8:	e78b      	b.n	80004f2 <HAL_SPI_MspInit+0x1e>
      Error_Handler();
 80005da:	f7ff ff57 	bl	800048c <Error_Handler>
 80005de:	e7f8      	b.n	80005d2 <HAL_SPI_MspInit+0xfe>
 80005e0:	40013000 	.word	0x40013000
 80005e4:	40003800 	.word	0x40003800
 80005e8:	40021000 	.word	0x40021000
 80005ec:	40010800 	.word	0x40010800
 80005f0:	20001130 	.word	0x20001130
 80005f4:	40020030 	.word	0x40020030
 80005f8:	40010c00 	.word	0x40010c00
 80005fc:	200010ec 	.word	0x200010ec
 8000600:	40020058 	.word	0x40020058

08000604 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000604:	e7fe      	b.n	8000604 <NMI_Handler>

08000606 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000606:	e7fe      	b.n	8000606 <HardFault_Handler>

08000608 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000608:	e7fe      	b.n	8000608 <MemManage_Handler>

0800060a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800060a:	e7fe      	b.n	800060a <BusFault_Handler>

0800060c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800060c:	e7fe      	b.n	800060c <UsageFault_Handler>

0800060e <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800060e:	4770      	bx	lr

08000610 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000610:	4770      	bx	lr

08000612 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000612:	4770      	bx	lr

08000614 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000614:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000616:	f000 f9d7 	bl	80009c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800061a:	bd08      	pop	{r3, pc}

0800061c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800061c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800061e:	4802      	ldr	r0, [pc, #8]	; (8000628 <DMA1_Channel3_IRQHandler+0xc>)
 8000620:	f000 facc 	bl	8000bbc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000624:	bd08      	pop	{r3, pc}
 8000626:	bf00      	nop
 8000628:	20001130 	.word	0x20001130

0800062c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800062c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 800062e:	4802      	ldr	r0, [pc, #8]	; (8000638 <DMA1_Channel5_IRQHandler+0xc>)
 8000630:	f000 fac4 	bl	8000bbc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000634:	bd08      	pop	{r3, pc}
 8000636:	bf00      	nop
 8000638:	200010ec 	.word	0x200010ec

0800063c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800063c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800063e:	4802      	ldr	r0, [pc, #8]	; (8000648 <USB_LP_CAN1_RX0_IRQHandler+0xc>)
 8000640:	f000 fd1a 	bl	8001078 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000644:	bd08      	pop	{r3, pc}
 8000646:	bf00      	nop
 8000648:	2000260c 	.word	0x2000260c

0800064c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800064c:	b508      	push	{r3, lr}
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC2(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->SR, TIM_SR_CC2IF) == (TIM_SR_CC2IF)) ? 1UL : 0UL);
 800064e:	4b06      	ldr	r3, [pc, #24]	; (8000668 <TIM1_CC_IRQHandler+0x1c>)
 8000650:	691b      	ldr	r3, [r3, #16]
 8000652:	f013 0f04 	tst.w	r3, #4
 8000656:	d005      	beq.n	8000664 <TIM1_CC_IRQHandler+0x18>
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC2IF));
 8000658:	4b03      	ldr	r3, [pc, #12]	; (8000668 <TIM1_CC_IRQHandler+0x1c>)
 800065a:	f06f 0204 	mvn.w	r2, #4
 800065e:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */
	if(LL_TIM_IsActiveFlag_CC2(TIM1)){
		LL_TIM_ClearFlag_CC2(TIM1);
		scan_start();
 8000660:	f000 f8d8 	bl	8000814 <scan_start>
	}
  /* USER CODE END TIM1_CC_IRQn 0 */
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000664:	bd08      	pop	{r3, pc}
 8000666:	bf00      	nop
 8000668:	40012c00 	.word	0x40012c00

0800066c <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800066c:	4770      	bx	lr
	...

08000670 <decode_data>:
	LL_TIM_EnableCounter(TIM1);

	loop();
}

void decode_data() {
 8000670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000674:	b085      	sub	sp, #20
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  uint32_t odr = READ_REG(GPIOx->ODR);
 8000676:	4953      	ldr	r1, [pc, #332]	; (80007c4 <decode_data+0x154>)
 8000678:	68cb      	ldr	r3, [r1, #12]
  uint32_t pinmask = ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
  WRITE_REG(GPIOx->BSRR, ((odr & pinmask) << 16u) | (~odr & pinmask));
 800067a:	041a      	lsls	r2, r3, #16
 800067c:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 8000680:	43db      	mvns	r3, r3
 8000682:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000686:	4313      	orrs	r3, r2
 8000688:	610b      	str	r3, [r1, #16]
  return (READ_BIT(GPIOx->IDR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU) == ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 800068a:	4b4f      	ldr	r3, [pc, #316]	; (80007c8 <decode_data+0x158>)
 800068c:	689b      	ldr	r3, [r3, #8]
	LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_13);
	if (LL_GPIO_IsInputPinSet(GPIOB, LL_GPIO_PIN_5)) {
 800068e:	f013 0f20 	tst.w	r3, #32
 8000692:	f000 8081 	beq.w	8000798 <decode_data+0x128>
 8000696:	4b4d      	ldr	r3, [pc, #308]	; (80007cc <decode_data+0x15c>)
 8000698:	9300      	str	r3, [sp, #0]
		for (int x = 0; x < 128; x++) {
 800069a:	f04f 0b00 	mov.w	fp, #0
 800069e:	f10d 090f 	add.w	r9, sp, #15
 80006a2:	f8df c134 	ldr.w	ip, [pc, #308]	; 80007d8 <decode_data+0x168>
 80006a6:	f10c 032e 	add.w	r3, ip, #46	; 0x2e
 80006aa:	9301      	str	r3, [sp, #4]
			else
				shift = (5 - grid) * 2 + 1;

			if (grid == 0) {
				for (int i = 0; i < 24; i++) {
					anode_buf[t][i] = 0;
 80006ac:	46da      	mov	sl, fp
				}
			}

			for (int i = 0; i < 64; i++) {
				uint16_t bit = (vline[i / 8] & (0x80 >> (i % 8)))>> (7 - i % 8);
 80006ae:	f04f 0880 	mov.w	r8, #128	; 0x80
 80006b2:	e04b      	b.n	800074c <decode_data+0xdc>
				shift = grid * 2;
 80006b4:	461c      	mov	r4, r3
 80006b6:	e005      	b.n	80006c4 <decode_data+0x54>
				shift = (5 - grid) * 2 + 1;
 80006b8:	b2dc      	uxtb	r4, r3
 80006ba:	f1c4 0405 	rsb	r4, r4, #5
 80006be:	0064      	lsls	r4, r4, #1
 80006c0:	3401      	adds	r4, #1
 80006c2:	b2e4      	uxtb	r4, r4
				shift = grid * 2;
 80006c4:	2200      	movs	r2, #0
 80006c6:	b2c9      	uxtb	r1, r1
				anode_buf[t][(i * 6 + shift) / 16] |= bit<< (15 - (i * 6 + shift) % 16);
 80006c8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80006cc:	00cf      	lsls	r7, r1, #3
				uint16_t bit = (vline[i / 8] & (0x80 >> (i % 8)))>> (7 - i % 8);
 80006ce:	4253      	negs	r3, r2
 80006d0:	f002 0107 	and.w	r1, r2, #7
 80006d4:	f003 0307 	and.w	r3, r3, #7
 80006d8:	bf58      	it	pl
 80006da:	4259      	negpl	r1, r3
				anode_buf[t][(i * 6 + shift) / 16] |= bit<< (15 - (i * 6 + shift) % 16);
 80006dc:	4620      	mov	r0, r4
 80006de:	2c00      	cmp	r4, #0
 80006e0:	bfb8      	it	lt
 80006e2:	f104 000f 	addlt.w	r0, r4, #15
 80006e6:	1105      	asrs	r5, r0, #4
 80006e8:	eb07 1020 	add.w	r0, r7, r0, asr #4
				uint16_t bit = (vline[i / 8] & (0x80 >> (i % 8)))>> (7 - i % 8);
 80006ec:	4613      	mov	r3, r2
 80006ee:	2a00      	cmp	r2, #0
 80006f0:	bfb8      	it	lt
 80006f2:	1dd3      	addlt	r3, r2, #7
 80006f4:	f10d 0e10 	add.w	lr, sp, #16
 80006f8:	eb0e 03e3 	add.w	r3, lr, r3, asr #3
 80006fc:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8000700:	fa48 fe01 	asr.w	lr, r8, r1
 8000704:	ea03 030e 	and.w	r3, r3, lr
 8000708:	f1c1 0107 	rsb	r1, r1, #7
 800070c:	fa43 f101 	asr.w	r1, r3, r1
				anode_buf[t][(i * 6 + shift) / 16] |= bit<< (15 - (i * 6 + shift) % 16);
 8000710:	f1d4 0e00 	rsbs	lr, r4, #0
 8000714:	f004 030f 	and.w	r3, r4, #15
 8000718:	f00e 060f 	and.w	r6, lr, #15
 800071c:	bf58      	it	pl
 800071e:	4273      	negpl	r3, r6
 8000720:	f1c3 030f 	rsb	r3, r3, #15
 8000724:	fa01 f303 	lsl.w	r3, r1, r3
 8000728:	443d      	add	r5, r7
 800072a:	f83c 1015 	ldrh.w	r1, [ip, r5, lsl #1]
 800072e:	430b      	orrs	r3, r1
 8000730:	f82c 3010 	strh.w	r3, [ip, r0, lsl #1]
			for (int i = 0; i < 64; i++) {
 8000734:	3201      	adds	r2, #1
 8000736:	3406      	adds	r4, #6
 8000738:	2a40      	cmp	r2, #64	; 0x40
 800073a:	d1c8      	bne.n	80006ce <decode_data+0x5e>
		for (int x = 0; x < 128; x++) {
 800073c:	f10b 0b01 	add.w	fp, fp, #1
 8000740:	9b00      	ldr	r3, [sp, #0]
 8000742:	3301      	adds	r3, #1
 8000744:	9300      	str	r3, [sp, #0]
 8000746:	f1bb 0f80 	cmp.w	fp, #128	; 0x80
 800074a:	d025      	beq.n	8000798 <decode_data+0x128>
			for (int i = 0; i < 8; i++) {
 800074c:	f10d 0307 	add.w	r3, sp, #7
void decode_data() {
 8000750:	9a00      	ldr	r2, [sp, #0]
				vline[i] = rx_data[i * 128 + x];
 8000752:	f812 1b80 	ldrb.w	r1, [r2], #128
 8000756:	f803 1f01 	strb.w	r1, [r3, #1]!
			for (int i = 0; i < 8; i++) {
 800075a:	454b      	cmp	r3, r9
 800075c:	d1f9      	bne.n	8000752 <decode_data+0xe2>
			uint8_t t = x / 6;
 800075e:	4b1c      	ldr	r3, [pc, #112]	; (80007d0 <decode_data+0x160>)
 8000760:	fb83 310b 	smull	r3, r1, r3, fp
 8000764:	eba1 71eb 	sub.w	r1, r1, fp, asr #31
			uint8_t grid = x % 6;
 8000768:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 800076c:	ebab 0343 	sub.w	r3, fp, r3, lsl #1
 8000770:	b2dc      	uxtb	r4, r3
			if (grid <= 2)
 8000772:	2c02      	cmp	r4, #2
 8000774:	d8a0      	bhi.n	80006b8 <decode_data+0x48>
				shift = grid * 2;
 8000776:	0063      	lsls	r3, r4, #1
 8000778:	b2db      	uxtb	r3, r3
			if (grid == 0) {
 800077a:	2c00      	cmp	r4, #0
 800077c:	d19a      	bne.n	80006b4 <decode_data+0x44>
 800077e:	b2ca      	uxtb	r2, r1
 8000780:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000784:	0112      	lsls	r2, r2, #4
 8000786:	1e93      	subs	r3, r2, #2
 8000788:	4463      	add	r3, ip
 800078a:	9801      	ldr	r0, [sp, #4]
 800078c:	4402      	add	r2, r0
					anode_buf[t][i] = 0;
 800078e:	f823 af02 	strh.w	sl, [r3, #2]!
				for (int i = 0; i < 24; i++) {
 8000792:	4293      	cmp	r3, r2
 8000794:	d1fb      	bne.n	800078e <decode_data+0x11e>
 8000796:	e795      	b.n	80006c4 <decode_data+0x54>
			}
		}
	}
	for(int g=0; g<22; g++){
 8000798:	4c0e      	ldr	r4, [pc, #56]	; (80007d4 <decode_data+0x164>)
 800079a:	4d0f      	ldr	r5, [pc, #60]	; (80007d8 <decode_data+0x168>)
 800079c:	f105 0030 	add.w	r0, r5, #48	; 0x30
 80007a0:	f505 658a 	add.w	r5, r5, #1104	; 0x450
		for(int a=0; a<24; a++){
 80007a4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
		for (int x = 0; x < 128; x++) {
 80007a8:	4622      	mov	r2, r4
			anode_data[g][a] = anode_buf[g][a];
 80007aa:	f833 1b02 	ldrh.w	r1, [r3], #2
 80007ae:	f822 1b02 	strh.w	r1, [r2], #2
		for(int a=0; a<24; a++){
 80007b2:	4283      	cmp	r3, r0
 80007b4:	d1f9      	bne.n	80007aa <decode_data+0x13a>
	for(int g=0; g<22; g++){
 80007b6:	3430      	adds	r4, #48	; 0x30
 80007b8:	3030      	adds	r0, #48	; 0x30
 80007ba:	42a8      	cmp	r0, r5
 80007bc:	d1f2      	bne.n	80007a4 <decode_data+0x134>
		}
	}
	//LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_13);
}
 80007be:	b005      	add	sp, #20
 80007c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80007c4:	40011000 	.word	0x40011000
 80007c8:	40010c00 	.word	0x40010c00
 80007cc:	2000000c 	.word	0x2000000c
 80007d0:	2aaaaaab 	.word	0x2aaaaaab
 80007d4:	200009c0 	.word	0x200009c0
 80007d8:	200005a0 	.word	0x200005a0

080007dc <init>:
void init() {
 80007dc:	b508      	push	{r3, lr}
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80007de:	4b0c      	ldr	r3, [pc, #48]	; (8000810 <init+0x34>)
 80007e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80007e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80007e6:	645a      	str	r2, [r3, #68]	; 0x44
  SET_BIT(TIMx->CCER, Channels);
 80007e8:	6a1a      	ldr	r2, [r3, #32]
 80007ea:	f042 0201 	orr.w	r2, r2, #1
 80007ee:	621a      	str	r2, [r3, #32]
 80007f0:	6a1a      	ldr	r2, [r3, #32]
 80007f2:	f042 0210 	orr.w	r2, r2, #16
 80007f6:	621a      	str	r2, [r3, #32]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_CC2(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->DIER, TIM_DIER_CC2IE);
 80007f8:	68da      	ldr	r2, [r3, #12]
 80007fa:	f042 0204 	orr.w	r2, r2, #4
 80007fe:	60da      	str	r2, [r3, #12]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000800:	681a      	ldr	r2, [r3, #0]
 8000802:	f042 0201 	orr.w	r2, r2, #1
 8000806:	601a      	str	r2, [r3, #0]

	HAL_SPI_Transmit_DMA(&hspi2, grid_buf, 3);
}

void loop() {
	decode_data();
 8000808:	f7ff ff32 	bl	8000670 <decode_data>
	while (1) {
 800080c:	e7fe      	b.n	800080c <init+0x30>
 800080e:	bf00      	nop
 8000810:	40012c00 	.word	0x40012c00

08000814 <scan_start>:
void scan_start(){
 8000814:	b538      	push	{r3, r4, r5, lr}
	if((grid_now+1) % 2) mask = mask1;
 8000816:	4b26      	ldr	r3, [pc, #152]	; (80008b0 <scan_start+0x9c>)
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	f013 0f01 	tst.w	r3, #1
 800081e:	bf0c      	ite	eq
 8000820:	4a24      	ldreq	r2, [pc, #144]	; (80008b4 <scan_start+0xa0>)
	else mask = mask2;
 8000822:	4a25      	ldrne	r2, [pc, #148]	; (80008b8 <scan_start+0xa4>)
 8000824:	8814      	ldrh	r4, [r2, #0]
	for(int i=0; i<24; i++){
 8000826:	f003 01fe 	and.w	r1, r3, #254	; 0xfe
 800082a:	eb01 0353 	add.w	r3, r1, r3, lsr #1
 800082e:	4923      	ldr	r1, [pc, #140]	; (80008bc <scan_start+0xa8>)
 8000830:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 8000834:	4822      	ldr	r0, [pc, #136]	; (80008c0 <scan_start+0xac>)
 8000836:	1e82      	subs	r2, r0, #2
 8000838:	302e      	adds	r0, #46	; 0x2e
		tx_data[i] = anode_data[grid_now>>1][i] & mask;
 800083a:	f831 3b02 	ldrh.w	r3, [r1], #2
 800083e:	4023      	ands	r3, r4
 8000840:	f822 3f02 	strh.w	r3, [r2, #2]!
	for(int i=0; i<24; i++){
 8000844:	4282      	cmp	r2, r0
 8000846:	d1f8      	bne.n	800083a <scan_start+0x26>
	HAL_SPI_Transmit_DMA(&hspi1, tx_data, 24);
 8000848:	2218      	movs	r2, #24
 800084a:	491d      	ldr	r1, [pc, #116]	; (80008c0 <scan_start+0xac>)
 800084c:	481d      	ldr	r0, [pc, #116]	; (80008c4 <scan_start+0xb0>)
 800084e:	f001 fba9 	bl	8001fa4 <HAL_SPI_Transmit_DMA>
		grid_buf[i] = 0x0000;
 8000852:	4a1d      	ldr	r2, [pc, #116]	; (80008c8 <scan_start+0xb4>)
 8000854:	2300      	movs	r3, #0
 8000856:	8013      	strh	r3, [r2, #0]
 8000858:	8053      	strh	r3, [r2, #2]
 800085a:	8093      	strh	r3, [r2, #4]
	grid_buf[grid_now / 16] = 0x8000 >> grid_now % 16;
 800085c:	4814      	ldr	r0, [pc, #80]	; (80008b0 <scan_start+0x9c>)
 800085e:	7803      	ldrb	r3, [r0, #0]
 8000860:	091c      	lsrs	r4, r3, #4
 8000862:	f003 030f 	and.w	r3, r3, #15
 8000866:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800086a:	fa41 f303 	asr.w	r3, r1, r3
 800086e:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
	grid_buf[grid_next / 16] |= (0x8000 >> grid_next % 16);
 8000872:	4b16      	ldr	r3, [pc, #88]	; (80008cc <scan_start+0xb8>)
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	091c      	lsrs	r4, r3, #4
 8000878:	f003 050f 	and.w	r5, r3, #15
 800087c:	4129      	asrs	r1, r5
 800087e:	f832 5014 	ldrh.w	r5, [r2, r4, lsl #1]
 8000882:	4329      	orrs	r1, r5
 8000884:	f822 1014 	strh.w	r1, [r2, r4, lsl #1]
	grid_now = grid_next;
 8000888:	7003      	strb	r3, [r0, #0]
	grid_next++;
 800088a:	3301      	adds	r3, #1
 800088c:	b2db      	uxtb	r3, r3
	if(grid_next > 43){
 800088e:	2b2b      	cmp	r3, #43	; 0x2b
 8000890:	d807      	bhi.n	80008a2 <scan_start+0x8e>
	grid_next++;
 8000892:	4a0e      	ldr	r2, [pc, #56]	; (80008cc <scan_start+0xb8>)
 8000894:	7013      	strb	r3, [r2, #0]
	HAL_SPI_Transmit_DMA(&hspi2, grid_buf, 3);
 8000896:	2203      	movs	r2, #3
 8000898:	490b      	ldr	r1, [pc, #44]	; (80008c8 <scan_start+0xb4>)
 800089a:	480d      	ldr	r0, [pc, #52]	; (80008d0 <scan_start+0xbc>)
 800089c:	f001 fb82 	bl	8001fa4 <HAL_SPI_Transmit_DMA>
}
 80008a0:	bd38      	pop	{r3, r4, r5, pc}
		grid_next = 1;
 80008a2:	4b0a      	ldr	r3, [pc, #40]	; (80008cc <scan_start+0xb8>)
 80008a4:	2201      	movs	r2, #1
 80008a6:	701a      	strb	r2, [r3, #0]
		grid_now = 0;
 80008a8:	4b01      	ldr	r3, [pc, #4]	; (80008b0 <scan_start+0x9c>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	701a      	strb	r2, [r3, #0]
 80008ae:	e7f2      	b.n	8000896 <scan_start+0x82>
 80008b0:	20000de6 	.word	0x20000de6
 80008b4:	20000006 	.word	0x20000006
 80008b8:	20000008 	.word	0x20000008
 80008bc:	200009c0 	.word	0x200009c0
 80008c0:	20000de8 	.word	0x20000de8
 80008c4:	20001094 	.word	0x20001094
 80008c8:	20000de0 	.word	0x20000de0
 80008cc:	20000004 	.word	0x20000004
 80008d0:	2000103c 	.word	0x2000103c

080008d4 <usb_rx_callback>:
	}
}

void usb_rx_callback(uint8_t * rx_buf, uint16_t * len){

	if(*len >= 1024){
 80008d4:	880b      	ldrh	r3, [r1, #0]
 80008d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80008da:	d30f      	bcc.n	80008fc <usb_rx_callback+0x28>
void usb_rx_callback(uint8_t * rx_buf, uint16_t * len){
 80008dc:	b510      	push	{r4, lr}
 80008de:	1e42      	subs	r2, r0, #1
 80008e0:	4b09      	ldr	r3, [pc, #36]	; (8000908 <usb_rx_callback+0x34>)
 80008e2:	f503 6480 	add.w	r4, r3, #1024	; 0x400
		for(int i=0; i<1024; i++){
			rx_data[i] = rx_buf[i];
 80008e6:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80008ea:	f803 0b01 	strb.w	r0, [r3], #1
		for(int i=0; i<1024; i++){
 80008ee:	42a3      	cmp	r3, r4
 80008f0:	d1f9      	bne.n	80008e6 <usb_rx_callback+0x12>
		}
		*len = 0;
 80008f2:	2300      	movs	r3, #0
 80008f4:	800b      	strh	r3, [r1, #0]
		decode_data();
 80008f6:	f7ff febb 	bl	8000670 <decode_data>
	}else if(*len == 4){
		*len = 0;
	}
}
 80008fa:	bd10      	pop	{r4, pc}
	}else if(*len == 4){
 80008fc:	2b04      	cmp	r3, #4
		*len = 0;
 80008fe:	bf04      	itt	eq
 8000900:	2300      	moveq	r3, #0
 8000902:	800b      	strheq	r3, [r1, #0]
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop
 8000908:	2000000c 	.word	0x2000000c

0800090c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800090c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800090e:	e003      	b.n	8000918 <LoopCopyDataInit>

08000910 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000910:	4b0b      	ldr	r3, [pc, #44]	; (8000940 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000912:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000914:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000916:	3104      	adds	r1, #4

08000918 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000918:	480a      	ldr	r0, [pc, #40]	; (8000944 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800091a:	4b0b      	ldr	r3, [pc, #44]	; (8000948 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800091c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800091e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000920:	d3f6      	bcc.n	8000910 <CopyDataInit>
  ldr r2, =_sbss
 8000922:	4a0a      	ldr	r2, [pc, #40]	; (800094c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000924:	e002      	b.n	800092c <LoopFillZerobss>

08000926 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000926:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000928:	f842 3b04 	str.w	r3, [r2], #4

0800092c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800092c:	4b08      	ldr	r3, [pc, #32]	; (8000950 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800092e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000930:	d3f9      	bcc.n	8000926 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000932:	f7ff fe9b 	bl	800066c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000936:	f003 fc99 	bl	800426c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800093a:	f7ff fc5d 	bl	80001f8 <main>
  bx lr
 800093e:	4770      	bx	lr
  ldr r3, =_sidata
 8000940:	08004348 	.word	0x08004348
  ldr r0, =_sdata
 8000944:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000948:	20000584 	.word	0x20000584
  ldr r2, =_sbss
 800094c:	20000584 	.word	0x20000584
  ldr r3, = _ebss
 8000950:	200028f8 	.word	0x200028f8

08000954 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000954:	e7fe      	b.n	8000954 <ADC1_2_IRQHandler>
	...

08000958 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000958:	b510      	push	{r4, lr}
 800095a:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800095c:	4b0e      	ldr	r3, [pc, #56]	; (8000998 <HAL_InitTick+0x40>)
 800095e:	7818      	ldrb	r0, [r3, #0]
 8000960:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000964:	fbb3 f3f0 	udiv	r3, r3, r0
 8000968:	4a0c      	ldr	r2, [pc, #48]	; (800099c <HAL_InitTick+0x44>)
 800096a:	6810      	ldr	r0, [r2, #0]
 800096c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000970:	f000 f88e 	bl	8000a90 <HAL_SYSTICK_Config>
 8000974:	b968      	cbnz	r0, 8000992 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000976:	2c0f      	cmp	r4, #15
 8000978:	d901      	bls.n	800097e <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 800097a:	2001      	movs	r0, #1
 800097c:	e00a      	b.n	8000994 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800097e:	2200      	movs	r2, #0
 8000980:	4621      	mov	r1, r4
 8000982:	f04f 30ff 	mov.w	r0, #4294967295
 8000986:	f000 f843 	bl	8000a10 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800098a:	4b05      	ldr	r3, [pc, #20]	; (80009a0 <HAL_InitTick+0x48>)
 800098c:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800098e:	2000      	movs	r0, #0
 8000990:	e000      	b.n	8000994 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000992:	2001      	movs	r0, #1
}
 8000994:	bd10      	pop	{r4, pc}
 8000996:	bf00      	nop
 8000998:	2000040c 	.word	0x2000040c
 800099c:	20000000 	.word	0x20000000
 80009a0:	20000410 	.word	0x20000410

080009a4 <HAL_Init>:
{
 80009a4:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009a6:	4a07      	ldr	r2, [pc, #28]	; (80009c4 <HAL_Init+0x20>)
 80009a8:	6813      	ldr	r3, [r2, #0]
 80009aa:	f043 0310 	orr.w	r3, r3, #16
 80009ae:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009b0:	2003      	movs	r0, #3
 80009b2:	f000 f81b 	bl	80009ec <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80009b6:	2000      	movs	r0, #0
 80009b8:	f7ff ffce 	bl	8000958 <HAL_InitTick>
  HAL_MspInit();
 80009bc:	f7ff fd68 	bl	8000490 <HAL_MspInit>
}
 80009c0:	2000      	movs	r0, #0
 80009c2:	bd08      	pop	{r3, pc}
 80009c4:	40022000 	.word	0x40022000

080009c8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80009c8:	4a03      	ldr	r2, [pc, #12]	; (80009d8 <HAL_IncTick+0x10>)
 80009ca:	6811      	ldr	r1, [r2, #0]
 80009cc:	4b03      	ldr	r3, [pc, #12]	; (80009dc <HAL_IncTick+0x14>)
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	440b      	add	r3, r1
 80009d2:	6013      	str	r3, [r2, #0]
}
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	20001174 	.word	0x20001174
 80009dc:	2000040c 	.word	0x2000040c

080009e0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80009e0:	4b01      	ldr	r3, [pc, #4]	; (80009e8 <HAL_GetTick+0x8>)
 80009e2:	6818      	ldr	r0, [r3, #0]
}
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	20001174 	.word	0x20001174

080009ec <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009ec:	4907      	ldr	r1, [pc, #28]	; (8000a0c <HAL_NVIC_SetPriorityGrouping+0x20>)
 80009ee:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80009f0:	0203      	lsls	r3, r0, #8
 80009f2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009f6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80009fa:	0412      	lsls	r2, r2, #16
 80009fc:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000a08:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000a0a:	4770      	bx	lr
 8000a0c:	e000ed00 	.word	0xe000ed00

08000a10 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a10:	b430      	push	{r4, r5}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a12:	4b16      	ldr	r3, [pc, #88]	; (8000a6c <HAL_NVIC_SetPriority+0x5c>)
 8000a14:	68db      	ldr	r3, [r3, #12]
 8000a16:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a1a:	f1c3 0407 	rsb	r4, r3, #7
 8000a1e:	2c04      	cmp	r4, #4
 8000a20:	bf28      	it	cs
 8000a22:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a24:	1d1d      	adds	r5, r3, #4
 8000a26:	2d06      	cmp	r5, #6
 8000a28:	bf8c      	ite	hi
 8000a2a:	3b03      	subhi	r3, #3
 8000a2c:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a2e:	f04f 35ff 	mov.w	r5, #4294967295
 8000a32:	fa05 f404 	lsl.w	r4, r5, r4
 8000a36:	ea21 0104 	bic.w	r1, r1, r4
 8000a3a:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a3c:	fa05 f303 	lsl.w	r3, r5, r3
 8000a40:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a44:	4311      	orrs	r1, r2
  if ((int32_t)(IRQn) >= 0)
 8000a46:	2800      	cmp	r0, #0
 8000a48:	db09      	blt.n	8000a5e <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a4a:	0109      	lsls	r1, r1, #4
 8000a4c:	b2c9      	uxtb	r1, r1
 8000a4e:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000a52:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000a56:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000a5a:	bc30      	pop	{r4, r5}
 8000a5c:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a5e:	f000 000f 	and.w	r0, r0, #15
 8000a62:	0109      	lsls	r1, r1, #4
 8000a64:	b2c9      	uxtb	r1, r1
 8000a66:	4b02      	ldr	r3, [pc, #8]	; (8000a70 <HAL_NVIC_SetPriority+0x60>)
 8000a68:	5419      	strb	r1, [r3, r0]
 8000a6a:	e7f6      	b.n	8000a5a <HAL_NVIC_SetPriority+0x4a>
 8000a6c:	e000ed00 	.word	0xe000ed00
 8000a70:	e000ed14 	.word	0xe000ed14

08000a74 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000a74:	2800      	cmp	r0, #0
 8000a76:	db08      	blt.n	8000a8a <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a78:	0942      	lsrs	r2, r0, #5
 8000a7a:	f000 001f 	and.w	r0, r0, #31
 8000a7e:	2301      	movs	r3, #1
 8000a80:	fa03 f000 	lsl.w	r0, r3, r0
 8000a84:	4b01      	ldr	r3, [pc, #4]	; (8000a8c <HAL_NVIC_EnableIRQ+0x18>)
 8000a86:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000a8a:	4770      	bx	lr
 8000a8c:	e000e100 	.word	0xe000e100

08000a90 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a90:	3801      	subs	r0, #1
 8000a92:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a96:	d20a      	bcs.n	8000aae <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a98:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <HAL_SYSTICK_Config+0x24>)
 8000a9a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a9c:	4a06      	ldr	r2, [pc, #24]	; (8000ab8 <HAL_SYSTICK_Config+0x28>)
 8000a9e:	21f0      	movs	r1, #240	; 0xf0
 8000aa0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000aa4:	2000      	movs	r0, #0
 8000aa6:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000aa8:	2207      	movs	r2, #7
 8000aaa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000aac:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000aae:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	e000e010 	.word	0xe000e010
 8000ab8:	e000ed00 	.word	0xe000ed00

08000abc <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000abc:	b360      	cbz	r0, 8000b18 <HAL_DMA_Init+0x5c>
{
 8000abe:	b410      	push	{r4}
 8000ac0:	4602      	mov	r2, r0
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000ac2:	6801      	ldr	r1, [r0, #0]
 8000ac4:	4b15      	ldr	r3, [pc, #84]	; (8000b1c <HAL_DMA_Init+0x60>)
 8000ac6:	440b      	add	r3, r1
 8000ac8:	4815      	ldr	r0, [pc, #84]	; (8000b20 <HAL_DMA_Init+0x64>)
 8000aca:	fba0 0303 	umull	r0, r3, r0, r3
 8000ace:	091b      	lsrs	r3, r3, #4
 8000ad0:	009b      	lsls	r3, r3, #2
 8000ad2:	6413      	str	r3, [r2, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000ad4:	4b13      	ldr	r3, [pc, #76]	; (8000b24 <HAL_DMA_Init+0x68>)
 8000ad6:	63d3      	str	r3, [r2, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000ad8:	2302      	movs	r3, #2
 8000ada:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000ade:	6808      	ldr	r0, [r1, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000ae0:	f420 507f 	bic.w	r0, r0, #16320	; 0x3fc0
 8000ae4:	f020 0030 	bic.w	r0, r0, #48	; 0x30
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000ae8:	6853      	ldr	r3, [r2, #4]
 8000aea:	6894      	ldr	r4, [r2, #8]
 8000aec:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000aee:	68d4      	ldr	r4, [r2, #12]
 8000af0:	4323      	orrs	r3, r4
 8000af2:	6914      	ldr	r4, [r2, #16]
 8000af4:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000af6:	6954      	ldr	r4, [r2, #20]
 8000af8:	4323      	orrs	r3, r4
 8000afa:	6994      	ldr	r4, [r2, #24]
 8000afc:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8000afe:	69d4      	ldr	r4, [r2, #28]
 8000b00:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 8000b02:	4303      	orrs	r3, r0

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000b04:	600b      	str	r3, [r1, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000b06:	2000      	movs	r0, #0
 8000b08:	6390      	str	r0, [r2, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000b10:	f882 0020 	strb.w	r0, [r2, #32]

  return HAL_OK;
}
 8000b14:	bc10      	pop	{r4}
 8000b16:	4770      	bx	lr
    return HAL_ERROR;
 8000b18:	2001      	movs	r0, #1
}
 8000b1a:	4770      	bx	lr
 8000b1c:	bffdfff8 	.word	0xbffdfff8
 8000b20:	cccccccd 	.word	0xcccccccd
 8000b24:	40020000 	.word	0x40020000

08000b28 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000b28:	b470      	push	{r4, r5, r6}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000b2a:	f890 4020 	ldrb.w	r4, [r0, #32]
 8000b2e:	2c01      	cmp	r4, #1
 8000b30:	d042      	beq.n	8000bb8 <HAL_DMA_Start_IT+0x90>
 8000b32:	2401      	movs	r4, #1
 8000b34:	f880 4020 	strb.w	r4, [r0, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000b38:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
 8000b3c:	2c01      	cmp	r4, #1
 8000b3e:	d005      	beq.n	8000b4c <HAL_DMA_Start_IT+0x24>
    __HAL_DMA_ENABLE(hdma);
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000b40:	2300      	movs	r3, #0
 8000b42:	f880 3020 	strb.w	r3, [r0, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000b46:	2002      	movs	r0, #2
  }    
  return status;
}
 8000b48:	bc70      	pop	{r4, r5, r6}
 8000b4a:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 8000b4c:	2402      	movs	r4, #2
 8000b4e:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000b52:	2400      	movs	r4, #0
 8000b54:	6384      	str	r4, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 8000b56:	6805      	ldr	r5, [r0, #0]
 8000b58:	682c      	ldr	r4, [r5, #0]
 8000b5a:	f024 0401 	bic.w	r4, r4, #1
 8000b5e:	602c      	str	r4, [r5, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000b60:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 8000b62:	6c06      	ldr	r6, [r0, #64]	; 0x40
 8000b64:	2401      	movs	r4, #1
 8000b66:	40b4      	lsls	r4, r6
 8000b68:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000b6a:	6804      	ldr	r4, [r0, #0]
 8000b6c:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000b6e:	6843      	ldr	r3, [r0, #4]
 8000b70:	2b10      	cmp	r3, #16
 8000b72:	d011      	beq.n	8000b98 <HAL_DMA_Start_IT+0x70>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8000b74:	6803      	ldr	r3, [r0, #0]
 8000b76:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8000b78:	6803      	ldr	r3, [r0, #0]
 8000b7a:	60da      	str	r2, [r3, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 8000b7c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000b7e:	b183      	cbz	r3, 8000ba2 <HAL_DMA_Start_IT+0x7a>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b80:	6802      	ldr	r2, [r0, #0]
 8000b82:	6813      	ldr	r3, [r2, #0]
 8000b84:	f043 030e 	orr.w	r3, r3, #14
 8000b88:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8000b8a:	6802      	ldr	r2, [r0, #0]
 8000b8c:	6813      	ldr	r3, [r2, #0]
 8000b8e:	f043 0301 	orr.w	r3, r3, #1
 8000b92:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000b94:	2000      	movs	r0, #0
 8000b96:	e7d7      	b.n	8000b48 <HAL_DMA_Start_IT+0x20>
    hdma->Instance->CPAR = DstAddress;
 8000b98:	6803      	ldr	r3, [r0, #0]
 8000b9a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8000b9c:	6803      	ldr	r3, [r0, #0]
 8000b9e:	60d9      	str	r1, [r3, #12]
 8000ba0:	e7ec      	b.n	8000b7c <HAL_DMA_Start_IT+0x54>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000ba2:	6802      	ldr	r2, [r0, #0]
 8000ba4:	6813      	ldr	r3, [r2, #0]
 8000ba6:	f023 0304 	bic.w	r3, r3, #4
 8000baa:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000bac:	6802      	ldr	r2, [r0, #0]
 8000bae:	6813      	ldr	r3, [r2, #0]
 8000bb0:	f043 030a 	orr.w	r3, r3, #10
 8000bb4:	6013      	str	r3, [r2, #0]
 8000bb6:	e7e8      	b.n	8000b8a <HAL_DMA_Start_IT+0x62>
  __HAL_LOCK(hdma);
 8000bb8:	2002      	movs	r0, #2
 8000bba:	e7c5      	b.n	8000b48 <HAL_DMA_Start_IT+0x20>

08000bbc <HAL_DMA_IRQHandler>:
{
 8000bbc:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000bbe:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8000bc0:	681a      	ldr	r2, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8000bc2:	6804      	ldr	r4, [r0, #0]
 8000bc4:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000bc6:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8000bc8:	2304      	movs	r3, #4
 8000bca:	408b      	lsls	r3, r1
 8000bcc:	4213      	tst	r3, r2
 8000bce:	d034      	beq.n	8000c3a <HAL_DMA_IRQHandler+0x7e>
 8000bd0:	f015 0f04 	tst.w	r5, #4
 8000bd4:	d031      	beq.n	8000c3a <HAL_DMA_IRQHandler+0x7e>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000bd6:	6823      	ldr	r3, [r4, #0]
 8000bd8:	f013 0f20 	tst.w	r3, #32
 8000bdc:	d103      	bne.n	8000be6 <HAL_DMA_IRQHandler+0x2a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000bde:	6823      	ldr	r3, [r4, #0]
 8000be0:	f023 0304 	bic.w	r3, r3, #4
 8000be4:	6023      	str	r3, [r4, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000be6:	6803      	ldr	r3, [r0, #0]
 8000be8:	4a42      	ldr	r2, [pc, #264]	; (8000cf4 <HAL_DMA_IRQHandler+0x138>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d013      	beq.n	8000c16 <HAL_DMA_IRQHandler+0x5a>
 8000bee:	3214      	adds	r2, #20
 8000bf0:	4293      	cmp	r3, r2
 8000bf2:	d017      	beq.n	8000c24 <HAL_DMA_IRQHandler+0x68>
 8000bf4:	3214      	adds	r2, #20
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d016      	beq.n	8000c28 <HAL_DMA_IRQHandler+0x6c>
 8000bfa:	3214      	adds	r2, #20
 8000bfc:	4293      	cmp	r3, r2
 8000bfe:	d016      	beq.n	8000c2e <HAL_DMA_IRQHandler+0x72>
 8000c00:	3214      	adds	r2, #20
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d016      	beq.n	8000c34 <HAL_DMA_IRQHandler+0x78>
 8000c06:	3214      	adds	r2, #20
 8000c08:	4293      	cmp	r3, r2
 8000c0a:	bf0c      	ite	eq
 8000c0c:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 8000c10:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 8000c14:	e000      	b.n	8000c18 <HAL_DMA_IRQHandler+0x5c>
 8000c16:	2304      	movs	r3, #4
 8000c18:	4a37      	ldr	r2, [pc, #220]	; (8000cf8 <HAL_DMA_IRQHandler+0x13c>)
 8000c1a:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8000c1c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000c1e:	b103      	cbz	r3, 8000c22 <HAL_DMA_IRQHandler+0x66>
      hdma->XferHalfCpltCallback(hdma);
 8000c20:	4798      	blx	r3
}
 8000c22:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000c24:	2340      	movs	r3, #64	; 0x40
 8000c26:	e7f7      	b.n	8000c18 <HAL_DMA_IRQHandler+0x5c>
 8000c28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c2c:	e7f4      	b.n	8000c18 <HAL_DMA_IRQHandler+0x5c>
 8000c2e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000c32:	e7f1      	b.n	8000c18 <HAL_DMA_IRQHandler+0x5c>
 8000c34:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000c38:	e7ee      	b.n	8000c18 <HAL_DMA_IRQHandler+0x5c>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	408b      	lsls	r3, r1
 8000c3e:	4213      	tst	r3, r2
 8000c40:	d03b      	beq.n	8000cba <HAL_DMA_IRQHandler+0xfe>
 8000c42:	f015 0f02 	tst.w	r5, #2
 8000c46:	d038      	beq.n	8000cba <HAL_DMA_IRQHandler+0xfe>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000c48:	6823      	ldr	r3, [r4, #0]
 8000c4a:	f013 0f20 	tst.w	r3, #32
 8000c4e:	d106      	bne.n	8000c5e <HAL_DMA_IRQHandler+0xa2>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000c50:	6823      	ldr	r3, [r4, #0]
 8000c52:	f023 030a 	bic.w	r3, r3, #10
 8000c56:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8000c58:	2301      	movs	r3, #1
 8000c5a:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000c5e:	6803      	ldr	r3, [r0, #0]
 8000c60:	4a24      	ldr	r2, [pc, #144]	; (8000cf4 <HAL_DMA_IRQHandler+0x138>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d013      	beq.n	8000c8e <HAL_DMA_IRQHandler+0xd2>
 8000c66:	3214      	adds	r2, #20
 8000c68:	4293      	cmp	r3, r2
 8000c6a:	d01b      	beq.n	8000ca4 <HAL_DMA_IRQHandler+0xe8>
 8000c6c:	3214      	adds	r2, #20
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d01a      	beq.n	8000ca8 <HAL_DMA_IRQHandler+0xec>
 8000c72:	3214      	adds	r2, #20
 8000c74:	4293      	cmp	r3, r2
 8000c76:	d01a      	beq.n	8000cae <HAL_DMA_IRQHandler+0xf2>
 8000c78:	3214      	adds	r2, #20
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d01a      	beq.n	8000cb4 <HAL_DMA_IRQHandler+0xf8>
 8000c7e:	3214      	adds	r2, #20
 8000c80:	4293      	cmp	r3, r2
 8000c82:	bf0c      	ite	eq
 8000c84:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8000c88:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 8000c8c:	e000      	b.n	8000c90 <HAL_DMA_IRQHandler+0xd4>
 8000c8e:	2302      	movs	r3, #2
 8000c90:	4a19      	ldr	r2, [pc, #100]	; (8000cf8 <HAL_DMA_IRQHandler+0x13c>)
 8000c92:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 8000c94:	2300      	movs	r3, #0
 8000c96:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8000c9a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d0c0      	beq.n	8000c22 <HAL_DMA_IRQHandler+0x66>
      hdma->XferCpltCallback(hdma);
 8000ca0:	4798      	blx	r3
 8000ca2:	e7be      	b.n	8000c22 <HAL_DMA_IRQHandler+0x66>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000ca4:	2320      	movs	r3, #32
 8000ca6:	e7f3      	b.n	8000c90 <HAL_DMA_IRQHandler+0xd4>
 8000ca8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cac:	e7f0      	b.n	8000c90 <HAL_DMA_IRQHandler+0xd4>
 8000cae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cb2:	e7ed      	b.n	8000c90 <HAL_DMA_IRQHandler+0xd4>
 8000cb4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000cb8:	e7ea      	b.n	8000c90 <HAL_DMA_IRQHandler+0xd4>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000cba:	2308      	movs	r3, #8
 8000cbc:	fa03 f101 	lsl.w	r1, r3, r1
 8000cc0:	4211      	tst	r1, r2
 8000cc2:	d0ae      	beq.n	8000c22 <HAL_DMA_IRQHandler+0x66>
 8000cc4:	f015 0f08 	tst.w	r5, #8
 8000cc8:	d0ab      	beq.n	8000c22 <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000cca:	6823      	ldr	r3, [r4, #0]
 8000ccc:	f023 030e 	bic.w	r3, r3, #14
 8000cd0:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000cd2:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8000cd8:	fa03 f202 	lsl.w	r2, r3, r2
 8000cdc:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000cde:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8000ce0:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8000cea:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d098      	beq.n	8000c22 <HAL_DMA_IRQHandler+0x66>
      hdma->XferErrorCallback(hdma);
 8000cf0:	4798      	blx	r3
  return;
 8000cf2:	e796      	b.n	8000c22 <HAL_DMA_IRQHandler+0x66>
 8000cf4:	40020008 	.word	0x40020008
 8000cf8:	40020000 	.word	0x40020000

08000cfc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d00:	b083      	sub	sp, #12
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d02:	680f      	ldr	r7, [r1, #0]
 8000d04:	2f00      	cmp	r7, #0
 8000d06:	f000 80f8 	beq.w	8000efa <HAL_GPIO_Init+0x1fe>
  uint32_t config = 0x00u;
 8000d0a:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 8000d0c:	4613      	mov	r3, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d0e:	f8df c200 	ldr.w	ip, [pc, #512]	; 8000f10 <HAL_GPIO_Init+0x214>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d12:	4d7b      	ldr	r5, [pc, #492]	; (8000f00 <HAL_GPIO_Init+0x204>)
      switch (GPIO_Init->Mode)
 8000d14:	4e7b      	ldr	r6, [pc, #492]	; (8000f04 <HAL_GPIO_Init+0x208>)
 8000d16:	f8df e1fc 	ldr.w	lr, [pc, #508]	; 8000f14 <HAL_GPIO_Init+0x218>
 8000d1a:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 8000f18 <HAL_GPIO_Init+0x21c>
 8000d1e:	e09a      	b.n	8000e56 <HAL_GPIO_Init+0x15a>
 8000d20:	2200      	movs	r2, #0
 8000d22:	e01e      	b.n	8000d62 <HAL_GPIO_Init+0x66>
 8000d24:	42b4      	cmp	r4, r6
 8000d26:	d00c      	beq.n	8000d42 <HAL_GPIO_Init+0x46>
 8000d28:	d904      	bls.n	8000d34 <HAL_GPIO_Init+0x38>
 8000d2a:	4574      	cmp	r4, lr
 8000d2c:	d009      	beq.n	8000d42 <HAL_GPIO_Init+0x46>
 8000d2e:	4544      	cmp	r4, r8
 8000d30:	d007      	beq.n	8000d42 <HAL_GPIO_Init+0x46>
 8000d32:	e016      	b.n	8000d62 <HAL_GPIO_Init+0x66>
 8000d34:	4f74      	ldr	r7, [pc, #464]	; (8000f08 <HAL_GPIO_Init+0x20c>)
 8000d36:	42bc      	cmp	r4, r7
 8000d38:	d003      	beq.n	8000d42 <HAL_GPIO_Init+0x46>
 8000d3a:	f507 2770 	add.w	r7, r7, #983040	; 0xf0000
 8000d3e:	42bc      	cmp	r4, r7
 8000d40:	d10b      	bne.n	8000d5a <HAL_GPIO_Init+0x5e>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000d42:	688a      	ldr	r2, [r1, #8]
 8000d44:	2a00      	cmp	r2, #0
 8000d46:	f000 80ca 	beq.w	8000ede <HAL_GPIO_Init+0x1e2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000d4a:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8000d4c:	bf0c      	ite	eq
 8000d4e:	f8c0 9010 	streq.w	r9, [r0, #16]
            GPIOx->BRR = ioposition;
 8000d52:	f8c0 9014 	strne.w	r9, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d56:	2208      	movs	r2, #8
 8000d58:	e003      	b.n	8000d62 <HAL_GPIO_Init+0x66>
      switch (GPIO_Init->Mode)
 8000d5a:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 8000d5e:	42bc      	cmp	r4, r7
 8000d60:	d0ef      	beq.n	8000d42 <HAL_GPIO_Init+0x46>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d62:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8000d66:	f200 80bc 	bhi.w	8000ee2 <HAL_GPIO_Init+0x1e6>
 8000d6a:	4607      	mov	r7, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d6c:	ea4f 0983 	mov.w	r9, r3, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d70:	683c      	ldr	r4, [r7, #0]
 8000d72:	f04f 0b0f 	mov.w	fp, #15
 8000d76:	fa0b fb09 	lsl.w	fp, fp, r9
 8000d7a:	ea24 040b 	bic.w	r4, r4, fp
 8000d7e:	fa02 f909 	lsl.w	r9, r2, r9
 8000d82:	ea44 0409 	orr.w	r4, r4, r9
 8000d86:	603c      	str	r4, [r7, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d88:	684c      	ldr	r4, [r1, #4]
 8000d8a:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 8000d8e:	d05d      	beq.n	8000e4c <HAL_GPIO_Init+0x150>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d90:	f8dc 4018 	ldr.w	r4, [ip, #24]
 8000d94:	f044 0401 	orr.w	r4, r4, #1
 8000d98:	f8cc 4018 	str.w	r4, [ip, #24]
 8000d9c:	f8dc 4018 	ldr.w	r4, [ip, #24]
 8000da0:	f004 0401 	and.w	r4, r4, #1
 8000da4:	9401      	str	r4, [sp, #4]
 8000da6:	9c01      	ldr	r4, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 8000da8:	f023 0403 	bic.w	r4, r3, #3
 8000dac:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8000db0:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
 8000db4:	f8d4 9008 	ldr.w	r9, [r4, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000db8:	f003 0703 	and.w	r7, r3, #3
 8000dbc:	ea4f 0b87 	mov.w	fp, r7, lsl #2
 8000dc0:	270f      	movs	r7, #15
 8000dc2:	fa07 f70b 	lsl.w	r7, r7, fp
 8000dc6:	ea29 0907 	bic.w	r9, r9, r7
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000dca:	4f50      	ldr	r7, [pc, #320]	; (8000f0c <HAL_GPIO_Init+0x210>)
 8000dcc:	42b8      	cmp	r0, r7
 8000dce:	f000 808e 	beq.w	8000eee <HAL_GPIO_Init+0x1f2>
 8000dd2:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8000dd6:	42b8      	cmp	r0, r7
 8000dd8:	f000 808b 	beq.w	8000ef2 <HAL_GPIO_Init+0x1f6>
 8000ddc:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8000de0:	42b8      	cmp	r0, r7
 8000de2:	f000 8088 	beq.w	8000ef6 <HAL_GPIO_Init+0x1fa>
 8000de6:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8000dea:	42b8      	cmp	r0, r7
 8000dec:	bf0c      	ite	eq
 8000dee:	2703      	moveq	r7, #3
 8000df0:	2704      	movne	r7, #4
 8000df2:	fa07 f70b 	lsl.w	r7, r7, fp
 8000df6:	ea47 0709 	orr.w	r7, r7, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8000dfa:	60a7      	str	r7, [r4, #8]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000dfc:	684c      	ldr	r4, [r1, #4]
 8000dfe:	f414 3f80 	tst.w	r4, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8000e02:	682c      	ldr	r4, [r5, #0]
 8000e04:	bf14      	ite	ne
 8000e06:	ea44 040a 	orrne.w	r4, r4, sl
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e0a:	ea24 040a 	biceq.w	r4, r4, sl
 8000e0e:	602c      	str	r4, [r5, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e10:	684c      	ldr	r4, [r1, #4]
 8000e12:	f414 3f00 	tst.w	r4, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8000e16:	686c      	ldr	r4, [r5, #4]
 8000e18:	bf14      	ite	ne
 8000e1a:	ea44 040a 	orrne.w	r4, r4, sl
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e1e:	ea24 040a 	biceq.w	r4, r4, sl
 8000e22:	606c      	str	r4, [r5, #4]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e24:	684c      	ldr	r4, [r1, #4]
 8000e26:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e2a:	68ac      	ldr	r4, [r5, #8]
 8000e2c:	bf14      	ite	ne
 8000e2e:	ea44 040a 	orrne.w	r4, r4, sl
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e32:	ea24 040a 	biceq.w	r4, r4, sl
 8000e36:	60ac      	str	r4, [r5, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e38:	684c      	ldr	r4, [r1, #4]
 8000e3a:	f414 1f00 	tst.w	r4, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e3e:	68ec      	ldr	r4, [r5, #12]
 8000e40:	bf14      	ite	ne
 8000e42:	ea44 040a 	orrne.w	r4, r4, sl
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e46:	ea24 040a 	biceq.w	r4, r4, sl
 8000e4a:	60ec      	str	r4, [r5, #12]
        }
      }
    }

	position++;
 8000e4c:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e4e:	680f      	ldr	r7, [r1, #0]
 8000e50:	fa37 f403 	lsrs.w	r4, r7, r3
 8000e54:	d051      	beq.n	8000efa <HAL_GPIO_Init+0x1fe>
    ioposition = (0x01uL << position);
 8000e56:	f04f 0901 	mov.w	r9, #1
 8000e5a:	fa09 f903 	lsl.w	r9, r9, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e5e:	ea09 0a07 	and.w	sl, r9, r7
    if (iocurrent == ioposition)
 8000e62:	ea39 0407 	bics.w	r4, r9, r7
 8000e66:	d1f1      	bne.n	8000e4c <HAL_GPIO_Init+0x150>
      switch (GPIO_Init->Mode)
 8000e68:	684c      	ldr	r4, [r1, #4]
 8000e6a:	2c12      	cmp	r4, #18
 8000e6c:	f63f af5a 	bhi.w	8000d24 <HAL_GPIO_Init+0x28>
 8000e70:	2c12      	cmp	r4, #18
 8000e72:	f63f af76 	bhi.w	8000d62 <HAL_GPIO_Init+0x66>
 8000e76:	a701      	add	r7, pc, #4	; (adr r7, 8000e7c <HAL_GPIO_Init+0x180>)
 8000e78:	f857 f024 	ldr.w	pc, [r7, r4, lsl #2]
 8000e7c:	08000d43 	.word	0x08000d43
 8000e80:	08000ec9 	.word	0x08000ec9
 8000e84:	08000ed3 	.word	0x08000ed3
 8000e88:	08000d21 	.word	0x08000d21
 8000e8c:	08000d63 	.word	0x08000d63
 8000e90:	08000d63 	.word	0x08000d63
 8000e94:	08000d63 	.word	0x08000d63
 8000e98:	08000d63 	.word	0x08000d63
 8000e9c:	08000d63 	.word	0x08000d63
 8000ea0:	08000d63 	.word	0x08000d63
 8000ea4:	08000d63 	.word	0x08000d63
 8000ea8:	08000d63 	.word	0x08000d63
 8000eac:	08000d63 	.word	0x08000d63
 8000eb0:	08000d63 	.word	0x08000d63
 8000eb4:	08000d63 	.word	0x08000d63
 8000eb8:	08000d63 	.word	0x08000d63
 8000ebc:	08000d63 	.word	0x08000d63
 8000ec0:	08000ecd 	.word	0x08000ecd
 8000ec4:	08000ed9 	.word	0x08000ed9
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ec8:	68ca      	ldr	r2, [r1, #12]
          break;
 8000eca:	e74a      	b.n	8000d62 <HAL_GPIO_Init+0x66>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ecc:	68ca      	ldr	r2, [r1, #12]
 8000ece:	3204      	adds	r2, #4
          break;
 8000ed0:	e747      	b.n	8000d62 <HAL_GPIO_Init+0x66>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000ed2:	68ca      	ldr	r2, [r1, #12]
 8000ed4:	3208      	adds	r2, #8
          break;
 8000ed6:	e744      	b.n	8000d62 <HAL_GPIO_Init+0x66>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ed8:	68ca      	ldr	r2, [r1, #12]
 8000eda:	320c      	adds	r2, #12
          break;
 8000edc:	e741      	b.n	8000d62 <HAL_GPIO_Init+0x66>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000ede:	2204      	movs	r2, #4
 8000ee0:	e73f      	b.n	8000d62 <HAL_GPIO_Init+0x66>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000ee2:	1d07      	adds	r7, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000ee4:	ea4f 0983 	mov.w	r9, r3, lsl #2
 8000ee8:	f1a9 0920 	sub.w	r9, r9, #32
 8000eec:	e740      	b.n	8000d70 <HAL_GPIO_Init+0x74>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000eee:	2700      	movs	r7, #0
 8000ef0:	e77f      	b.n	8000df2 <HAL_GPIO_Init+0xf6>
 8000ef2:	2701      	movs	r7, #1
 8000ef4:	e77d      	b.n	8000df2 <HAL_GPIO_Init+0xf6>
 8000ef6:	2702      	movs	r7, #2
 8000ef8:	e77b      	b.n	8000df2 <HAL_GPIO_Init+0xf6>
  }
}
 8000efa:	b003      	add	sp, #12
 8000efc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000f00:	40010400 	.word	0x40010400
 8000f04:	10220000 	.word	0x10220000
 8000f08:	10120000 	.word	0x10120000
 8000f0c:	40010800 	.word	0x40010800
 8000f10:	40021000 	.word	0x40021000
 8000f14:	10310000 	.word	0x10310000
 8000f18:	10320000 	.word	0x10320000

08000f1c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000f1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f1e:	b087      	sub	sp, #28
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000f20:	2800      	cmp	r0, #0
 8000f22:	d07a      	beq.n	800101a <HAL_PCD_Init+0xfe>
 8000f24:	4605      	mov	r5, r0

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000f26:	f890 32a9 	ldrb.w	r3, [r0, #681]	; 0x2a9
 8000f2a:	b1db      	cbz	r3, 8000f64 <HAL_PCD_Init+0x48>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000f2c:	2303      	movs	r3, #3
 8000f2e:	f885 32a9 	strb.w	r3, [r5, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000f32:	6828      	ldr	r0, [r5, #0]
 8000f34:	f001 fac0 	bl	80024b8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000f38:	462c      	mov	r4, r5
 8000f3a:	f854 7b10 	ldr.w	r7, [r4], #16
 8000f3e:	466e      	mov	r6, sp
 8000f40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f42:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000f44:	6823      	ldr	r3, [r4, #0]
 8000f46:	6033      	str	r3, [r6, #0]
 8000f48:	1d2b      	adds	r3, r5, #4
 8000f4a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f4c:	4638      	mov	r0, r7
 8000f4e:	f001 faa3 	bl	8002498 <USB_CoreInit>
 8000f52:	4604      	mov	r4, r0
 8000f54:	b158      	cbz	r0, 8000f6e <HAL_PCD_Init+0x52>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000f56:	2302      	movs	r3, #2
 8000f58:	f885 32a9 	strb.w	r3, [r5, #681]	; 0x2a9
    return HAL_ERROR;
 8000f5c:	2401      	movs	r4, #1
  hpcd->USB_Address = 0U;
  hpcd->State = HAL_PCD_STATE_READY;
  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 8000f5e:	4620      	mov	r0, r4
 8000f60:	b007      	add	sp, #28
 8000f62:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->Lock = HAL_UNLOCKED;
 8000f64:	f880 32a8 	strb.w	r3, [r0, #680]	; 0x2a8
    HAL_PCD_MspInit(hpcd);
 8000f68:	f003 f86a 	bl	8004040 <HAL_PCD_MspInit>
 8000f6c:	e7de      	b.n	8000f2c <HAL_PCD_Init+0x10>
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000f6e:	2100      	movs	r1, #0
 8000f70:	6828      	ldr	r0, [r5, #0]
 8000f72:	f001 faab 	bl	80024cc <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f76:	6868      	ldr	r0, [r5, #4]
 8000f78:	b388      	cbz	r0, 8000fde <HAL_PCD_Init+0xc2>
 8000f7a:	4623      	mov	r3, r4
    hpcd->IN_ep[i].is_in = 1U;
 8000f7c:	2601      	movs	r6, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000f7e:	2100      	movs	r1, #0
    hpcd->IN_ep[i].is_in = 1U;
 8000f80:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8000f84:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8000f88:	f882 6029 	strb.w	r6, [r2, #41]	; 0x29
    hpcd->IN_ep[i].num = i;
 8000f8c:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000f90:	86d3      	strh	r3, [r2, #54]	; 0x36
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000f92:	f882 102b 	strb.w	r1, [r2, #43]	; 0x2b
    hpcd->IN_ep[i].maxpacket = 0U;
 8000f96:	6391      	str	r1, [r2, #56]	; 0x38
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000f98:	63d1      	str	r1, [r2, #60]	; 0x3c
    hpcd->IN_ep[i].xfer_len = 0U;
 8000f9a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8000f9e:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8000fa2:	6411      	str	r1, [r2, #64]	; 0x40
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	b2db      	uxtb	r3, r3
 8000fa8:	4283      	cmp	r3, r0
 8000faa:	d3e9      	bcc.n	8000f80 <HAL_PCD_Init+0x64>
    hpcd->OUT_ep[i].is_in = 0U;
 8000fac:	2200      	movs	r2, #0
 8000fae:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8000fb2:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8000fb6:	f883 2169 	strb.w	r2, [r3, #361]	; 0x169
    hpcd->OUT_ep[i].num = i;
 8000fba:	f883 4168 	strb.w	r4, [r3, #360]	; 0x168
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000fbe:	f883 216b 	strb.w	r2, [r3, #363]	; 0x16b
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000fc2:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000fc6:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000fca:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8000fce:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8000fd2:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fd6:	3401      	adds	r4, #1
 8000fd8:	b2e4      	uxtb	r4, r4
 8000fda:	4284      	cmp	r4, r0
 8000fdc:	d3e7      	bcc.n	8000fae <HAL_PCD_Init+0x92>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000fde:	462c      	mov	r4, r5
 8000fe0:	f854 7b10 	ldr.w	r7, [r4], #16
 8000fe4:	466e      	mov	r6, sp
 8000fe6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fe8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000fea:	6823      	ldr	r3, [r4, #0]
 8000fec:	6033      	str	r3, [r6, #0]
 8000fee:	1d2b      	adds	r3, r5, #4
 8000ff0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ff2:	4638      	mov	r0, r7
 8000ff4:	f001 fa6c 	bl	80024d0 <USB_DevInit>
 8000ff8:	4604      	mov	r4, r0
 8000ffa:	b120      	cbz	r0, 8001006 <HAL_PCD_Init+0xea>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	f885 32a9 	strb.w	r3, [r5, #681]	; 0x2a9
    return HAL_ERROR;
 8001002:	2401      	movs	r4, #1
 8001004:	e7ab      	b.n	8000f5e <HAL_PCD_Init+0x42>
  hpcd->USB_Address = 0U;
 8001006:	2300      	movs	r3, #0
 8001008:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800100c:	2301      	movs	r3, #1
 800100e:	f885 32a9 	strb.w	r3, [r5, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001012:	6828      	ldr	r0, [r5, #0]
 8001014:	f001 fd54 	bl	8002ac0 <USB_DevDisconnect>
  return HAL_OK;
 8001018:	e7a1      	b.n	8000f5e <HAL_PCD_Init+0x42>
    return HAL_ERROR;
 800101a:	2401      	movs	r4, #1
 800101c:	e79f      	b.n	8000f5e <HAL_PCD_Init+0x42>

0800101e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800101e:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hpcd);
 8001020:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
 8001024:	2b01      	cmp	r3, #1
 8001026:	d011      	beq.n	800104c <HAL_PCD_Start+0x2e>
 8001028:	4604      	mov	r4, r0
 800102a:	2501      	movs	r5, #1
 800102c:	f880 52a8 	strb.w	r5, [r0, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001030:	6800      	ldr	r0, [r0, #0]
 8001032:	f001 fa38 	bl	80024a6 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001036:	4629      	mov	r1, r5
 8001038:	4620      	mov	r0, r4
 800103a:	f003 f916 	bl	800426a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800103e:	6820      	ldr	r0, [r4, #0]
 8001040:	f001 fd3c 	bl	8002abc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001044:	2000      	movs	r0, #0
 8001046:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8

  return HAL_OK;
}
 800104a:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 800104c:	2002      	movs	r0, #2
 800104e:	e7fc      	b.n	800104a <HAL_PCD_Start+0x2c>

08001050 <HAL_PCD_SetAddress>:
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 8001050:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
 8001054:	2b01      	cmp	r3, #1
 8001056:	d00d      	beq.n	8001074 <HAL_PCD_SetAddress+0x24>
{
 8001058:	b510      	push	{r4, lr}
 800105a:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 800105c:	2301      	movs	r3, #1
 800105e:	f880 32a8 	strb.w	r3, [r0, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001062:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001066:	6800      	ldr	r0, [r0, #0]
 8001068:	f001 fd22 	bl	8002ab0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800106c:	2000      	movs	r0, #0
 800106e:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8

  return HAL_OK;
}
 8001072:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8001074:	2002      	movs	r0, #2
}
 8001076:	4770      	bx	lr

08001078 <HAL_PCD_IRQHandler>:
{
 8001078:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800107c:	b084      	sub	sp, #16
 800107e:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001080:	6800      	ldr	r0, [r0, #0]
 8001082:	f001 fd1f 	bl	8002ac4 <USB_ReadInterrupts>
 8001086:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 800108a:	f040 809a 	bne.w	80011c2 <HAL_PCD_IRQHandler+0x14a>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800108e:	6820      	ldr	r0, [r4, #0]
 8001090:	f001 fd18 	bl	8002ac4 <USB_ReadInterrupts>
 8001094:	f410 6f80 	tst.w	r0, #1024	; 0x400
 8001098:	f040 842a 	bne.w	80018f0 <HAL_PCD_IRQHandler+0x878>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800109c:	6820      	ldr	r0, [r4, #0]
 800109e:	f001 fd11 	bl	8002ac4 <USB_ReadInterrupts>
 80010a2:	f410 4f80 	tst.w	r0, #16384	; 0x4000
 80010a6:	d008      	beq.n	80010ba <HAL_PCD_IRQHandler+0x42>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80010a8:	6822      	ldr	r2, [r4, #0]
 80010aa:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80010ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80010b2:	041b      	lsls	r3, r3, #16
 80010b4:	0c1b      	lsrs	r3, r3, #16
 80010b6:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80010ba:	6820      	ldr	r0, [r4, #0]
 80010bc:	f001 fd02 	bl	8002ac4 <USB_ReadInterrupts>
 80010c0:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 80010c4:	d008      	beq.n	80010d8 <HAL_PCD_IRQHandler+0x60>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80010c6:	6822      	ldr	r2, [r4, #0]
 80010c8:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80010cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80010d0:	041b      	lsls	r3, r3, #16
 80010d2:	0c1b      	lsrs	r3, r3, #16
 80010d4:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80010d8:	6820      	ldr	r0, [r4, #0]
 80010da:	f001 fcf3 	bl	8002ac4 <USB_ReadInterrupts>
 80010de:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 80010e2:	f040 8417 	bne.w	8001914 <HAL_PCD_IRQHandler+0x89c>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80010e6:	6820      	ldr	r0, [r4, #0]
 80010e8:	f001 fcec 	bl	8002ac4 <USB_ReadInterrupts>
 80010ec:	f410 6f00 	tst.w	r0, #2048	; 0x800
 80010f0:	d04e      	beq.n	8001190 <HAL_PCD_IRQHandler+0x118>
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80010f2:	6826      	ldr	r6, [r4, #0]
 80010f4:	4631      	mov	r1, r6
 80010f6:	f1ad 0202 	sub.w	r2, sp, #2
 80010fa:	f10d 050e 	add.w	r5, sp, #14
 80010fe:	4613      	mov	r3, r2
 8001100:	f831 0b04 	ldrh.w	r0, [r1], #4
 8001104:	f823 0f02 	strh.w	r0, [r3, #2]!
    for (i = 0U; i < 8U; i++)
 8001108:	429d      	cmp	r5, r3
 800110a:	d1f9      	bne.n	8001100 <HAL_PCD_IRQHandler+0x88>
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 800110c:	f8b6 3040 	ldrh.w	r3, [r6, #64]	; 0x40
 8001110:	b29b      	uxth	r3, r3
 8001112:	f043 0301 	orr.w	r3, r3, #1
 8001116:	f8a6 3040 	strh.w	r3, [r6, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800111a:	6821      	ldr	r1, [r4, #0]
 800111c:	f8b1 3040 	ldrh.w	r3, [r1, #64]	; 0x40
 8001120:	f023 0301 	bic.w	r3, r3, #1
 8001124:	041b      	lsls	r3, r3, #16
 8001126:	0c1b      	lsrs	r3, r3, #16
 8001128:	f8a1 3040 	strh.w	r3, [r1, #64]	; 0x40
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 800112c:	6821      	ldr	r1, [r4, #0]
 800112e:	f8b1 3044 	ldrh.w	r3, [r1, #68]	; 0x44
 8001132:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001136:	d0fa      	beq.n	800112e <HAL_PCD_IRQHandler+0xb6>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001138:	f8b1 3044 	ldrh.w	r3, [r1, #68]	; 0x44
 800113c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001140:	041b      	lsls	r3, r3, #16
 8001142:	0c1b      	lsrs	r3, r3, #16
 8001144:	f8a1 3044 	strh.w	r3, [r1, #68]	; 0x44
 8001148:	2300      	movs	r3, #0
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800114a:	6821      	ldr	r1, [r4, #0]
 800114c:	f832 0f02 	ldrh.w	r0, [r2, #2]!
 8001150:	52c8      	strh	r0, [r1, r3]
    for (i = 0U; i < 8U; i++)
 8001152:	3304      	adds	r3, #4
 8001154:	2b20      	cmp	r3, #32
 8001156:	d1f8      	bne.n	800114a <HAL_PCD_IRQHandler+0xd2>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001158:	6822      	ldr	r2, [r4, #0]
 800115a:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 800115e:	b29b      	uxth	r3, r3
 8001160:	f043 0308 	orr.w	r3, r3, #8
 8001164:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001168:	6822      	ldr	r2, [r4, #0]
 800116a:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800116e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001172:	041b      	lsls	r3, r3, #16
 8001174:	0c1b      	lsrs	r3, r3, #16
 8001176:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 800117a:	6822      	ldr	r2, [r4, #0]
 800117c:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8001180:	b29b      	uxth	r3, r3
 8001182:	f043 0304 	orr.w	r3, r3, #4
 8001186:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 800118a:	4620      	mov	r0, r4
 800118c:	f002 ffb0 	bl	80040f0 <HAL_PCD_SuspendCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001190:	6820      	ldr	r0, [r4, #0]
 8001192:	f001 fc97 	bl	8002ac4 <USB_ReadInterrupts>
 8001196:	f410 7f00 	tst.w	r0, #512	; 0x200
 800119a:	f040 83db 	bne.w	8001954 <HAL_PCD_IRQHandler+0x8dc>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800119e:	6820      	ldr	r0, [r4, #0]
 80011a0:	f001 fc90 	bl	8002ac4 <USB_ReadInterrupts>
 80011a4:	f410 7f80 	tst.w	r0, #256	; 0x100
 80011a8:	d008      	beq.n	80011bc <HAL_PCD_IRQHandler+0x144>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80011aa:	6822      	ldr	r2, [r4, #0]
 80011ac:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80011b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80011b4:	041b      	lsls	r3, r3, #16
 80011b6:	0c1b      	lsrs	r3, r3, #16
 80011b8:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
}
 80011bc:	b004      	add	sp, #16
 80011be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80011c2:	6820      	ldr	r0, [r4, #0]
 80011c4:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 80011c8:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80011cc:	f43f af5f 	beq.w	800108e <HAL_PCD_IRQHandler+0x16>
 80011d0:	2600      	movs	r6, #0
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80011d2:	f248 0780 	movw	r7, #32896	; 0x8080
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80011d6:	f24c 0880 	movw	r8, #49280	; 0xc080
 80011da:	e3d9      	b.n	8001990 <HAL_PCD_IRQHandler+0x918>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80011dc:	8803      	ldrh	r3, [r0, #0]
 80011de:	b29b      	uxth	r3, r3
 80011e0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80011e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80011e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80011ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80011f0:	b29b      	uxth	r3, r3
 80011f2:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80011f4:	6822      	ldr	r2, [r4, #0]
 80011f6:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 80011fa:	b29b      	uxth	r3, r3
 80011fc:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 8001200:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8001204:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8001208:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 800120c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001210:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8001212:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001214:	4413      	add	r3, r2
 8001216:	63e3      	str	r3, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001218:	4631      	mov	r1, r6
 800121a:	4620      	mov	r0, r4
 800121c:	f002 ff44 	bl	80040a8 <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001220:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8001224:	2b00      	cmp	r3, #0
 8001226:	f000 83ac 	beq.w	8001982 <HAL_PCD_IRQHandler+0x90a>
 800122a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800122c:	2b00      	cmp	r3, #0
 800122e:	f040 83a8 	bne.w	8001982 <HAL_PCD_IRQHandler+0x90a>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001232:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8001236:	6822      	ldr	r2, [r4, #0]
 8001238:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800123c:	f8a2 304c 	strh.w	r3, [r2, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001240:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
 8001244:	e39d      	b.n	8001982 <HAL_PCD_IRQHandler+0x90a>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001246:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800124a:	b29b      	uxth	r3, r3
 800124c:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 8001250:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001254:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001258:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 800125c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001260:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001264:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 8001268:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
 800126c:	f001 ff8e 	bl	800318c <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001270:	6822      	ldr	r2, [r4, #0]
 8001272:	8813      	ldrh	r3, [r2, #0]
 8001274:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001278:	051b      	lsls	r3, r3, #20
 800127a:	0d1b      	lsrs	r3, r3, #20
 800127c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001280:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8001282:	4620      	mov	r0, r4
 8001284:	f002 fefc 	bl	8004080 <HAL_PCD_SetupStageCallback>
 8001288:	e37b      	b.n	8001982 <HAL_PCD_IRQHandler+0x90a>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800128a:	2a3e      	cmp	r2, #62	; 0x3e
 800128c:	d808      	bhi.n	80012a0 <HAL_PCD_IRQHandler+0x228>
 800128e:	0850      	lsrs	r0, r2, #1
 8001290:	f012 0f01 	tst.w	r2, #1
 8001294:	bf18      	it	ne
 8001296:	3001      	addne	r0, #1
 8001298:	0282      	lsls	r2, r0, #10
 800129a:	b292      	uxth	r2, r2
 800129c:	525a      	strh	r2, [r3, r1]
 800129e:	e3ce      	b.n	8001a3e <HAL_PCD_IRQHandler+0x9c6>
 80012a0:	0950      	lsrs	r0, r2, #5
 80012a2:	f012 0f1f 	tst.w	r2, #31
 80012a6:	bf08      	it	eq
 80012a8:	f100 30ff 	addeq.w	r0, r0, #4294967295
 80012ac:	ea6f 62c0 	mvn.w	r2, r0, lsl #27
 80012b0:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80012b4:	b292      	uxth	r2, r2
 80012b6:	525a      	strh	r2, [r3, r1]
 80012b8:	e3c1      	b.n	8001a3e <HAL_PCD_IRQHandler+0x9c6>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80012ba:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
 80012be:	fa1f f983 	uxth.w	r9, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80012c2:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80012c6:	d14d      	bne.n	8001364 <HAL_PCD_IRQHandler+0x2ec>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80012c8:	f019 0f80 	tst.w	r9, #128	; 0x80
 80012cc:	f000 8359 	beq.w	8001982 <HAL_PCD_IRQHandler+0x90a>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80012d0:	6822      	ldr	r2, [r4, #0]
 80012d2:	f832 3025 	ldrh.w	r3, [r2, r5, lsl #2]
 80012d6:	b29b      	uxth	r3, r3
 80012d8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80012dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80012e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80012e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80012e8:	b29b      	uxth	r3, r3
 80012ea:	f822 3025 	strh.w	r3, [r2, r5, lsl #2]
        if ((ep->type != EP_TYPE_BULK) ||
 80012ee:	eb05 0a85 	add.w	sl, r5, r5, lsl #2
 80012f2:	eb04 0aca 	add.w	sl, r4, sl, lsl #3
 80012f6:	f89a 302b 	ldrb.w	r3, [sl, #43]	; 0x2b
 80012fa:	2b02      	cmp	r3, #2
 80012fc:	f000 8188 	beq.w	8001610 <HAL_PCD_IRQHandler+0x598>
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001300:	6820      	ldr	r0, [r4, #0]
 8001302:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001306:	b29b      	uxth	r3, r3
          if (ep->xfer_len > TxByteNbre)
 8001308:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 800130c:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8001310:	6c12      	ldr	r2, [r2, #64]	; 0x40
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001312:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 8001316:	3302      	adds	r3, #2
 8001318:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800131c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001320:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
          if (ep->xfer_len > TxByteNbre)
 8001324:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001328:	429a      	cmp	r2, r3
 800132a:	f240 8320 	bls.w	800196e <HAL_PCD_IRQHandler+0x8f6>
            ep->xfer_len -= TxByteNbre;
 800132e:	1ad2      	subs	r2, r2, r3
 8001330:	eb05 0185 	add.w	r1, r5, r5, lsl #2
 8001334:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8001338:	640a      	str	r2, [r1, #64]	; 0x40
          if (ep->xfer_len == 0U)
 800133a:	2a00      	cmp	r2, #0
 800133c:	f000 831c 	beq.w	8001978 <HAL_PCD_IRQHandler+0x900>
            ep->xfer_buff += TxByteNbre;
 8001340:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8001344:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8001348:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800134a:	4419      	add	r1, r3
 800134c:	63d1      	str	r1, [r2, #60]	; 0x3c
            ep->xfer_count += TxByteNbre;
 800134e:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001350:	440b      	add	r3, r1
 8001352:	6453      	str	r3, [r2, #68]	; 0x44
        ep = &hpcd->IN_ep[epindex];
 8001354:	3501      	adds	r5, #1
 8001356:	eb05 0585 	add.w	r5, r5, r5, lsl #2
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 800135a:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800135e:	f001 fbd0 	bl	8002b02 <USB_EPStartXfer>
 8001362:	e30e      	b.n	8001982 <HAL_PCD_IRQHandler+0x90a>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001364:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
 8001368:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800136c:	051b      	lsls	r3, r3, #20
 800136e:	0d1b      	lsrs	r3, r3, #20
 8001370:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001374:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 8001378:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 800137c:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8001380:	f893 3174 	ldrb.w	r3, [r3, #372]	; 0x174
 8001384:	2b00      	cmp	r3, #0
 8001386:	d145      	bne.n	8001414 <HAL_PCD_IRQHandler+0x39c>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001388:	6820      	ldr	r0, [r4, #0]
 800138a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800138e:	b29b      	uxth	r3, r3
 8001390:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8001394:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8001398:	f892 2168 	ldrb.w	r2, [r2, #360]	; 0x168
 800139c:	3306      	adds	r3, #6
 800139e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80013a2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80013a6:	f8b3 a400 	ldrh.w	sl, [r3, #1024]	; 0x400
 80013aa:	f3ca 0a09 	ubfx	sl, sl, #0, #10
          if (count != 0U)
 80013ae:	f1ba 0f00 	cmp.w	sl, #0
 80013b2:	d123      	bne.n	80013fc <HAL_PCD_IRQHandler+0x384>
        ep->xfer_count += count;
 80013b4:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 80013b8:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 80013bc:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 80013c0:	4452      	add	r2, sl
 80013c2:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
        ep->xfer_buff += count;
 80013c6:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 80013ca:	4452      	add	r2, sl
 80013cc:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80013d0:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 80013d4:	b143      	cbz	r3, 80013e8 <HAL_PCD_IRQHandler+0x370>
 80013d6:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 80013da:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 80013de:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 80013e2:	459a      	cmp	sl, r3
 80013e4:	f080 810a 	bcs.w	80015fc <HAL_PCD_IRQHandler+0x584>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80013e8:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 80013ec:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 80013f0:	f893 1168 	ldrb.w	r1, [r3, #360]	; 0x168
 80013f4:	4620      	mov	r0, r4
 80013f6:	f002 fe4b 	bl	8004090 <HAL_PCD_DataOutStageCallback>
 80013fa:	e765      	b.n	80012c8 <HAL_PCD_IRQHandler+0x250>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80013fc:	eb05 0185 	add.w	r1, r5, r5, lsl #2
 8001400:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8001404:	4653      	mov	r3, sl
 8001406:	f8b1 216e 	ldrh.w	r2, [r1, #366]	; 0x16e
 800140a:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 800140e:	f001 febd 	bl	800318c <USB_ReadPMA>
 8001412:	e7cf      	b.n	80013b4 <HAL_PCD_IRQHandler+0x33c>
          if (ep->type == EP_TYPE_BULK)
 8001414:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8001418:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 800141c:	f893 316b 	ldrb.w	r3, [r3, #363]	; 0x16b
 8001420:	2b02      	cmp	r3, #2
 8001422:	d037      	beq.n	8001494 <HAL_PCD_IRQHandler+0x41c>
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001424:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8001428:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 800142c:	f892 0168 	ldrb.w	r0, [r2, #360]	; 0x168
 8001430:	6821      	ldr	r1, [r4, #0]
 8001432:	f831 3020 	ldrh.w	r3, [r1, r0, lsl #2]
 8001436:	b29b      	uxth	r3, r3
 8001438:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800143c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001440:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001444:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001448:	f821 3020 	strh.w	r3, [r1, r0, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800144c:	6820      	ldr	r0, [r4, #0]
 800144e:	f892 2168 	ldrb.w	r2, [r2, #360]	; 0x168
 8001452:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001456:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800145a:	f000 80b3 	beq.w	80015c4 <HAL_PCD_IRQHandler+0x54c>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800145e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001462:	b29b      	uxth	r3, r3
 8001464:	3302      	adds	r3, #2
 8001466:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800146a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800146e:	f8b3 a400 	ldrh.w	sl, [r3, #1024]	; 0x400
 8001472:	f3ca 0a09 	ubfx	sl, sl, #0, #10
              if (count != 0U)
 8001476:	f1ba 0f00 	cmp.w	sl, #0
 800147a:	d09b      	beq.n	80013b4 <HAL_PCD_IRQHandler+0x33c>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800147c:	eb05 0185 	add.w	r1, r5, r5, lsl #2
 8001480:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8001484:	4653      	mov	r3, sl
 8001486:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 800148a:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 800148e:	f001 fe7d 	bl	800318c <USB_ReadPMA>
 8001492:	e78f      	b.n	80013b4 <HAL_PCD_IRQHandler+0x33c>
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001494:	f419 4f80 	tst.w	r9, #16384	; 0x4000
 8001498:	d04a      	beq.n	8001530 <HAL_PCD_IRQHandler+0x4b8>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800149a:	6822      	ldr	r2, [r4, #0]
 800149c:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 80014a0:	b29b      	uxth	r3, r3
 80014a2:	eb05 0085 	add.w	r0, r5, r5, lsl #2
 80014a6:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 80014aa:	f890 1168 	ldrb.w	r1, [r0, #360]	; 0x168
 80014ae:	3302      	adds	r3, #2
 80014b0:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80014b4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80014b8:	f8b3 a400 	ldrh.w	sl, [r3, #1024]	; 0x400
 80014bc:	f3ca 0a09 	ubfx	sl, sl, #0, #10
    if (ep->xfer_len >= count)
 80014c0:	f8d0 3180 	ldr.w	r3, [r0, #384]	; 0x180
 80014c4:	4553      	cmp	r3, sl
 80014c6:	f0c0 832d 	bcc.w	8001b24 <HAL_PCD_IRQHandler+0xaac>
      ep->xfer_len -= count;
 80014ca:	eba3 030a 	sub.w	r3, r3, sl
 80014ce:	eb05 0085 	add.w	r0, r5, r5, lsl #2
 80014d2:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 80014d6:	f8c0 3180 	str.w	r3, [r0, #384]	; 0x180
    if (ep->xfer_len == 0U)
 80014da:	2b00      	cmp	r3, #0
 80014dc:	f000 8328 	beq.w	8001b30 <HAL_PCD_IRQHandler+0xab8>
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80014e0:	f019 0f40 	tst.w	r9, #64	; 0x40
 80014e4:	d013      	beq.n	800150e <HAL_PCD_IRQHandler+0x496>
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80014e6:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 80014ea:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 80014ee:	f893 1168 	ldrb.w	r1, [r3, #360]	; 0x168
 80014f2:	6822      	ldr	r2, [r4, #0]
 80014f4:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80014f8:	b29b      	uxth	r3, r3
 80014fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80014fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001502:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001506:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800150a:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
    if (count != 0U)
 800150e:	f1ba 0f00 	cmp.w	sl, #0
 8001512:	f43f af4f 	beq.w	80013b4 <HAL_PCD_IRQHandler+0x33c>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001516:	eb05 0185 	add.w	r1, r5, r5, lsl #2
 800151a:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 800151e:	4653      	mov	r3, sl
 8001520:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 8001524:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8001528:	6820      	ldr	r0, [r4, #0]
 800152a:	f001 fe2f 	bl	800318c <USB_ReadPMA>
 800152e:	e741      	b.n	80013b4 <HAL_PCD_IRQHandler+0x33c>
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001530:	6822      	ldr	r2, [r4, #0]
 8001532:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8001536:	b29b      	uxth	r3, r3
 8001538:	eb05 0085 	add.w	r0, r5, r5, lsl #2
 800153c:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 8001540:	f890 1168 	ldrb.w	r1, [r0, #360]	; 0x168
 8001544:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8001548:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 800154c:	f8b3 a40c 	ldrh.w	sl, [r3, #1036]	; 0x40c
 8001550:	f3ca 0a09 	ubfx	sl, sl, #0, #10
    if (ep->xfer_len >= count)
 8001554:	f8d0 3180 	ldr.w	r3, [r0, #384]	; 0x180
 8001558:	4553      	cmp	r3, sl
 800155a:	f0c0 82f6 	bcc.w	8001b4a <HAL_PCD_IRQHandler+0xad2>
      ep->xfer_len -= count;
 800155e:	eba3 030a 	sub.w	r3, r3, sl
 8001562:	eb05 0085 	add.w	r0, r5, r5, lsl #2
 8001566:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 800156a:	f8c0 3180 	str.w	r3, [r0, #384]	; 0x180
    if (ep->xfer_len == 0U)
 800156e:	2b00      	cmp	r3, #0
 8001570:	f000 82f1 	beq.w	8001b56 <HAL_PCD_IRQHandler+0xade>
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001574:	f019 0f40 	tst.w	r9, #64	; 0x40
 8001578:	d113      	bne.n	80015a2 <HAL_PCD_IRQHandler+0x52a>
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800157a:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 800157e:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8001582:	f893 1168 	ldrb.w	r1, [r3, #360]	; 0x168
 8001586:	6822      	ldr	r2, [r4, #0]
 8001588:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800158c:	b29b      	uxth	r3, r3
 800158e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001592:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001596:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800159a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800159e:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
    if (count != 0U)
 80015a2:	f1ba 0f00 	cmp.w	sl, #0
 80015a6:	f43f af05 	beq.w	80013b4 <HAL_PCD_IRQHandler+0x33c>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80015aa:	eb05 0185 	add.w	r1, r5, r5, lsl #2
 80015ae:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 80015b2:	4653      	mov	r3, sl
 80015b4:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 80015b8:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 80015bc:	6820      	ldr	r0, [r4, #0]
 80015be:	f001 fde5 	bl	800318c <USB_ReadPMA>
 80015c2:	e6f7      	b.n	80013b4 <HAL_PCD_IRQHandler+0x33c>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80015c4:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80015c8:	b29b      	uxth	r3, r3
 80015ca:	3306      	adds	r3, #6
 80015cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80015d0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80015d4:	f8b3 a400 	ldrh.w	sl, [r3, #1024]	; 0x400
 80015d8:	f3ca 0a09 	ubfx	sl, sl, #0, #10
              if (count != 0U)
 80015dc:	f1ba 0f00 	cmp.w	sl, #0
 80015e0:	f43f aee8 	beq.w	80013b4 <HAL_PCD_IRQHandler+0x33c>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80015e4:	eb05 0185 	add.w	r1, r5, r5, lsl #2
 80015e8:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 80015ec:	4653      	mov	r3, sl
 80015ee:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 80015f2:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 80015f6:	f001 fdc9 	bl	800318c <USB_ReadPMA>
 80015fa:	e6db      	b.n	80013b4 <HAL_PCD_IRQHandler+0x33c>
        ep = &hpcd->OUT_ep[epindex];
 80015fc:	eb05 0185 	add.w	r1, r5, r5, lsl #2
 8001600:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8001604:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 8001608:	6820      	ldr	r0, [r4, #0]
 800160a:	f001 fa7a 	bl	8002b02 <USB_EPStartXfer>
 800160e:	e65b      	b.n	80012c8 <HAL_PCD_IRQHandler+0x250>
        if ((ep->type != EP_TYPE_BULK) ||
 8001610:	f419 7f80 	tst.w	r9, #256	; 0x100
 8001614:	f43f ae74 	beq.w	8001300 <HAL_PCD_IRQHandler+0x288>
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001618:	f019 0f40 	tst.w	r9, #64	; 0x40
 800161c:	f000 80b8 	beq.w	8001790 <HAL_PCD_IRQHandler+0x718>
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001620:	6821      	ldr	r1, [r4, #0]
 8001622:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 8001626:	b29b      	uxth	r3, r3
 8001628:	f89a c028 	ldrb.w	ip, [sl, #40]	; 0x28
    if (ep->xfer_len > TxByteNbre)
 800162c:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8001630:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8001634:	6c10      	ldr	r0, [r2, #64]	; 0x40
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001636:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 800163a:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800163e:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
    if (ep->xfer_len > TxByteNbre)
 8001642:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001646:	4290      	cmp	r0, r2
 8001648:	f240 821d 	bls.w	8001a86 <HAL_PCD_IRQHandler+0xa0e>
      ep->xfer_len -= TxByteNbre;
 800164c:	1a80      	subs	r0, r0, r2
 800164e:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8001652:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8001656:	6418      	str	r0, [r3, #64]	; 0x40
    if (ep->xfer_len == 0U)
 8001658:	2800      	cmp	r0, #0
 800165a:	f000 8219 	beq.w	8001a90 <HAL_PCD_IRQHandler+0xa18>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800165e:	f419 4f80 	tst.w	r9, #16384	; 0x4000
 8001662:	d00a      	beq.n	800167a <HAL_PCD_IRQHandler+0x602>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001664:	f831 302c 	ldrh.w	r3, [r1, ip, lsl #2]
 8001668:	b29b      	uxth	r3, r3
 800166a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800166e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001672:	ea48 0303 	orr.w	r3, r8, r3
 8001676:	f821 302c 	strh.w	r3, [r1, ip, lsl #2]
      if (ep->xfer_fill_db == 1U)
 800167a:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 800167e:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8001682:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001686:	2b01      	cmp	r3, #1
 8001688:	d00f      	beq.n	80016aa <HAL_PCD_IRQHandler+0x632>
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800168a:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 800168e:	6822      	ldr	r2, [r4, #0]
 8001690:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8001694:	b29b      	uxth	r3, r3
 8001696:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800169a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800169e:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 80016a2:	433b      	orrs	r3, r7
 80016a4:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 80016a8:	e16b      	b.n	8001982 <HAL_PCD_IRQHandler+0x90a>
        ep->xfer_buff += TxByteNbre;
 80016aa:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 80016ae:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 80016b2:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80016b4:	4411      	add	r1, r2
 80016b6:	63d9      	str	r1, [r3, #60]	; 0x3c
        ep->xfer_count += TxByteNbre;
 80016b8:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80016ba:	4411      	add	r1, r2
 80016bc:	6459      	str	r1, [r3, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 80016be:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80016c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016c2:	4299      	cmp	r1, r3
 80016c4:	d326      	bcc.n	8001714 <HAL_PCD_IRQHandler+0x69c>
          ep->xfer_len_db -= len;
 80016c6:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 80016ca:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 80016ce:	1ac9      	subs	r1, r1, r3
 80016d0:	6491      	str	r1, [r2, #72]	; 0x48
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80016d2:	f89a 2029 	ldrb.w	r2, [sl, #41]	; 0x29
 80016d6:	bb9a      	cbnz	r2, 8001740 <HAL_PCD_IRQHandler+0x6c8>
 80016d8:	6821      	ldr	r1, [r4, #0]
 80016da:	f8b1 c050 	ldrh.w	ip, [r1, #80]	; 0x50
 80016de:	fa1f fc8c 	uxth.w	ip, ip
 80016e2:	f89a 2028 	ldrb.w	r2, [sl, #40]	; 0x28
 80016e6:	0110      	lsls	r0, r2, #4
 80016e8:	f201 4104 	addw	r1, r1, #1028	; 0x404
 80016ec:	4461      	add	r1, ip
 80016ee:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	f040 81bb 	bne.w	8001a6e <HAL_PCD_IRQHandler+0x9f6>
 80016f8:	5a42      	ldrh	r2, [r0, r1]
 80016fa:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80016fe:	0412      	lsls	r2, r2, #16
 8001700:	0c12      	lsrs	r2, r2, #16
 8001702:	5242      	strh	r2, [r0, r1]
 8001704:	5a42      	ldrh	r2, [r0, r1]
 8001706:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800170a:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800170e:	b292      	uxth	r2, r2
 8001710:	5242      	strh	r2, [r0, r1]
 8001712:	e017      	b.n	8001744 <HAL_PCD_IRQHandler+0x6cc>
        else if (ep->xfer_len_db == 0U)
 8001714:	b939      	cbnz	r1, 8001726 <HAL_PCD_IRQHandler+0x6ae>
          ep->xfer_fill_db = 0U;
 8001716:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 800171a:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 800171e:	f883 604c 	strb.w	r6, [r3, #76]	; 0x4c
          len = TxByteNbre;
 8001722:	4613      	mov	r3, r2
 8001724:	e7d5      	b.n	80016d2 <HAL_PCD_IRQHandler+0x65a>
          ep->xfer_fill_db = 0U;
 8001726:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 800172a:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 800172e:	f883 604c 	strb.w	r6, [r3, #76]	; 0x4c
          ep->xfer_len_db = 0U;
 8001732:	649e      	str	r6, [r3, #72]	; 0x48
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001734:	f89a 2029 	ldrb.w	r2, [sl, #41]	; 0x29
 8001738:	2a00      	cmp	r2, #0
 800173a:	f000 818c 	beq.w	8001a56 <HAL_PCD_IRQHandler+0x9de>
          len = ep->xfer_len_db;
 800173e:	460b      	mov	r3, r1
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001740:	2a01      	cmp	r2, #1
 8001742:	d018      	beq.n	8001776 <HAL_PCD_IRQHandler+0x6fe>
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8001744:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8001748:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 800174c:	4611      	mov	r1, r2
 800174e:	b29b      	uxth	r3, r3
 8001750:	8e12      	ldrh	r2, [r2, #48]	; 0x30
 8001752:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8001754:	6820      	ldr	r0, [r4, #0]
 8001756:	f001 f9bb 	bl	8002ad0 <USB_WritePMA>
 800175a:	e796      	b.n	800168a <HAL_PCD_IRQHandler+0x612>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800175c:	0959      	lsrs	r1, r3, #5
 800175e:	f013 0f1f 	tst.w	r3, #31
 8001762:	bf08      	it	eq
 8001764:	f101 31ff 	addeq.w	r1, r1, #4294967295
 8001768:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 800176c:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8001770:	b289      	uxth	r1, r1
 8001772:	8011      	strh	r1, [r2, #0]
 8001774:	e7e6      	b.n	8001744 <HAL_PCD_IRQHandler+0x6cc>
 8001776:	6822      	ldr	r2, [r4, #0]
 8001778:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 800177c:	b280      	uxth	r0, r0
 800177e:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 8001782:	0109      	lsls	r1, r1, #4
 8001784:	f202 4204 	addw	r2, r2, #1028	; 0x404
 8001788:	4402      	add	r2, r0
 800178a:	b298      	uxth	r0, r3
 800178c:	5288      	strh	r0, [r1, r2]
 800178e:	e7d9      	b.n	8001744 <HAL_PCD_IRQHandler+0x6cc>
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001790:	6820      	ldr	r0, [r4, #0]
 8001792:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001796:	b29b      	uxth	r3, r3
 8001798:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
    if (ep->xfer_len >= TxByteNbre)
 800179c:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 80017a0:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 80017a4:	6c12      	ldr	r2, [r2, #64]	; 0x40
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80017a6:	3306      	adds	r3, #6
 80017a8:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80017ac:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80017b0:	f8b3 c400 	ldrh.w	ip, [r3, #1024]	; 0x400
    if (ep->xfer_len >= TxByteNbre)
 80017b4:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 80017b8:	4562      	cmp	r2, ip
 80017ba:	f0c0 8198 	bcc.w	8001aee <HAL_PCD_IRQHandler+0xa76>
      ep->xfer_len -= TxByteNbre;
 80017be:	eba2 020c 	sub.w	r2, r2, ip
 80017c2:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 80017c6:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 80017ca:	641a      	str	r2, [r3, #64]	; 0x40
    if (ep->xfer_len == 0U)
 80017cc:	2a00      	cmp	r2, #0
 80017ce:	f000 8193 	beq.w	8001af8 <HAL_PCD_IRQHandler+0xa80>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80017d2:	f419 4f80 	tst.w	r9, #16384	; 0x4000
 80017d6:	d10a      	bne.n	80017ee <HAL_PCD_IRQHandler+0x776>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80017d8:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 80017dc:	b29b      	uxth	r3, r3
 80017de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80017e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80017e6:	ea48 0303 	orr.w	r3, r8, r3
 80017ea:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 80017ee:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 80017f2:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 80017f6:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	f47f af45 	bne.w	800168a <HAL_PCD_IRQHandler+0x612>
        ep->xfer_buff += TxByteNbre;
 8001800:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8001804:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8001808:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800180a:	4462      	add	r2, ip
 800180c:	63da      	str	r2, [r3, #60]	; 0x3c
        ep->xfer_count += TxByteNbre;
 800180e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001810:	4462      	add	r2, ip
 8001812:	645a      	str	r2, [r3, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 8001814:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8001816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001818:	4298      	cmp	r0, r3
 800181a:	d328      	bcc.n	800186e <HAL_PCD_IRQHandler+0x7f6>
          ep->xfer_len_db -= len;
 800181c:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8001820:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8001824:	1ac0      	subs	r0, r0, r3
 8001826:	6490      	str	r0, [r2, #72]	; 0x48
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001828:	6822      	ldr	r2, [r4, #0]
 800182a:	4611      	mov	r1, r2
 800182c:	f89a c029 	ldrb.w	ip, [sl, #41]	; 0x29
 8001830:	f1bc 0f00 	cmp.w	ip, #0
 8001834:	d134      	bne.n	80018a0 <HAL_PCD_IRQHandler+0x828>
 8001836:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 800183a:	b289      	uxth	r1, r1
 800183c:	f202 420c 	addw	r2, r2, #1036	; 0x40c
 8001840:	440a      	add	r2, r1
 8001842:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 8001846:	0108      	lsls	r0, r1, #4
 8001848:	eb02 1101 	add.w	r1, r2, r1, lsl #4
 800184c:	2b00      	cmp	r3, #0
 800184e:	f040 8142 	bne.w	8001ad6 <HAL_PCD_IRQHandler+0xa5e>
 8001852:	5a11      	ldrh	r1, [r2, r0]
 8001854:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 8001858:	0409      	lsls	r1, r1, #16
 800185a:	0c09      	lsrs	r1, r1, #16
 800185c:	5211      	strh	r1, [r2, r0]
 800185e:	5a11      	ldrh	r1, [r2, r0]
 8001860:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8001864:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8001868:	b289      	uxth	r1, r1
 800186a:	5211      	strh	r1, [r2, r0]
 800186c:	e01b      	b.n	80018a6 <HAL_PCD_IRQHandler+0x82e>
        else if (ep->xfer_len_db == 0U)
 800186e:	b938      	cbnz	r0, 8001880 <HAL_PCD_IRQHandler+0x808>
          ep->xfer_fill_db = 0U;
 8001870:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8001874:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8001878:	f883 604c 	strb.w	r6, [r3, #76]	; 0x4c
          len = TxByteNbre;
 800187c:	4663      	mov	r3, ip
 800187e:	e7d3      	b.n	8001828 <HAL_PCD_IRQHandler+0x7b0>
          ep->xfer_len_db = 0U;
 8001880:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8001884:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8001888:	649e      	str	r6, [r3, #72]	; 0x48
          ep->xfer_fill_db = 0;
 800188a:	f883 604c 	strb.w	r6, [r3, #76]	; 0x4c
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800188e:	6822      	ldr	r2, [r4, #0]
 8001890:	4611      	mov	r1, r2
 8001892:	f89a c029 	ldrb.w	ip, [sl, #41]	; 0x29
 8001896:	f1bc 0f00 	cmp.w	ip, #0
 800189a:	f000 8110 	beq.w	8001abe <HAL_PCD_IRQHandler+0xa46>
          len = ep->xfer_len_db;
 800189e:	4603      	mov	r3, r0
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80018a0:	f1bc 0f01 	cmp.w	ip, #1
 80018a4:	d018      	beq.n	80018d8 <HAL_PCD_IRQHandler+0x860>
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80018a6:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 80018aa:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 80018ae:	4611      	mov	r1, r2
 80018b0:	b29b      	uxth	r3, r3
 80018b2:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 80018b4:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 80018b6:	6820      	ldr	r0, [r4, #0]
 80018b8:	f001 f90a 	bl	8002ad0 <USB_WritePMA>
 80018bc:	e6e5      	b.n	800168a <HAL_PCD_IRQHandler+0x612>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80018be:	095a      	lsrs	r2, r3, #5
 80018c0:	f013 0f1f 	tst.w	r3, #31
 80018c4:	bf08      	it	eq
 80018c6:	f102 32ff 	addeq.w	r2, r2, #4294967295
 80018ca:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 80018ce:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80018d2:	b292      	uxth	r2, r2
 80018d4:	800a      	strh	r2, [r1, #0]
 80018d6:	e7e6      	b.n	80018a6 <HAL_PCD_IRQHandler+0x82e>
 80018d8:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 80018dc:	b280      	uxth	r0, r0
 80018de:	f89a 2028 	ldrb.w	r2, [sl, #40]	; 0x28
 80018e2:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 80018e6:	f202 420c 	addw	r2, r2, #1036	; 0x40c
 80018ea:	b299      	uxth	r1, r3
 80018ec:	5211      	strh	r1, [r2, r0]
 80018ee:	e7da      	b.n	80018a6 <HAL_PCD_IRQHandler+0x82e>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80018f0:	6822      	ldr	r2, [r4, #0]
 80018f2:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80018f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80018fa:	041b      	lsls	r3, r3, #16
 80018fc:	0c1b      	lsrs	r3, r3, #16
 80018fe:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8001902:	4620      	mov	r0, r4
 8001904:	f002 fbe1 	bl	80040ca <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001908:	2100      	movs	r1, #0
 800190a:	4620      	mov	r0, r4
 800190c:	f7ff fba0 	bl	8001050 <HAL_PCD_SetAddress>
 8001910:	f7ff bbc4 	b.w	800109c <HAL_PCD_IRQHandler+0x24>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001914:	6822      	ldr	r2, [r4, #0]
 8001916:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 800191a:	f023 0304 	bic.w	r3, r3, #4
 800191e:	041b      	lsls	r3, r3, #16
 8001920:	0c1b      	lsrs	r3, r3, #16
 8001922:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001926:	6822      	ldr	r2, [r4, #0]
 8001928:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 800192c:	f023 0308 	bic.w	r3, r3, #8
 8001930:	041b      	lsls	r3, r3, #16
 8001932:	0c1b      	lsrs	r3, r3, #16
 8001934:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 8001938:	4620      	mov	r0, r4
 800193a:	f002 fbe9 	bl	8004110 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800193e:	6822      	ldr	r2, [r4, #0]
 8001940:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001944:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001948:	041b      	lsls	r3, r3, #16
 800194a:	0c1b      	lsrs	r3, r3, #16
 800194c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
 8001950:	f7ff bbc9 	b.w	80010e6 <HAL_PCD_IRQHandler+0x6e>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001954:	6822      	ldr	r2, [r4, #0]
 8001956:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800195a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800195e:	041b      	lsls	r3, r3, #16
 8001960:	0c1b      	lsrs	r3, r3, #16
 8001962:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8001966:	4620      	mov	r0, r4
 8001968:	f002 fba9 	bl	80040be <HAL_PCD_SOFCallback>
 800196c:	e417      	b.n	800119e <HAL_PCD_IRQHandler+0x126>
 800196e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8001972:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8001976:	642e      	str	r6, [r5, #64]	; 0x40
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001978:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 800197c:	4620      	mov	r0, r4
 800197e:	f002 fb93 	bl	80040a8 <HAL_PCD_DataInStageCallback>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001982:	6820      	ldr	r0, [r4, #0]
 8001984:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8001988:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800198c:	f43f ab7f 	beq.w	800108e <HAL_PCD_IRQHandler+0x16>
    wIstr = hpcd->Instance->ISTR;
 8001990:	f8b0 5044 	ldrh.w	r5, [r0, #68]	; 0x44
 8001994:	b2ab      	uxth	r3, r5
    if (epindex == 0U)
 8001996:	f015 050f 	ands.w	r5, r5, #15
 800199a:	f47f ac8e 	bne.w	80012ba <HAL_PCD_IRQHandler+0x242>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800199e:	f013 0f10 	tst.w	r3, #16
 80019a2:	f43f ac1b 	beq.w	80011dc <HAL_PCD_IRQHandler+0x164>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80019a6:	8803      	ldrh	r3, [r0, #0]
 80019a8:	b29a      	uxth	r2, r3
        if ((wEPVal & USB_EP_SETUP) != 0U)
 80019aa:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80019ae:	f47f ac4a 	bne.w	8001246 <HAL_PCD_IRQHandler+0x1ce>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80019b2:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 80019b6:	d0e4      	beq.n	8001982 <HAL_PCD_IRQHandler+0x90a>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80019b8:	8803      	ldrh	r3, [r0, #0]
 80019ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019be:	051b      	lsls	r3, r3, #20
 80019c0:	0d1b      	lsrs	r3, r3, #20
 80019c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019c6:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80019c8:	6820      	ldr	r0, [r4, #0]
 80019ca:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80019ce:	b29b      	uxth	r3, r3
 80019d0:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 80019d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80019d8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80019dc:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 80019e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80019e4:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80019e8:	b18b      	cbz	r3, 8001a0e <HAL_PCD_IRQHandler+0x996>
 80019ea:	f8d4 117c 	ldr.w	r1, [r4, #380]	; 0x17c
 80019ee:	b171      	cbz	r1, 8001a0e <HAL_PCD_IRQHandler+0x996>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80019f0:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 80019f4:	f001 fbca 	bl	800318c <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 80019f8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80019fc:	f8d4 2184 	ldr.w	r2, [r4, #388]	; 0x184
 8001a00:	4413      	add	r3, r2
 8001a02:	f8c4 317c 	str.w	r3, [r4, #380]	; 0x17c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001a06:	4631      	mov	r1, r6
 8001a08:	4620      	mov	r0, r4
 8001a0a:	f002 fb41 	bl	8004090 <HAL_PCD_DataOutStageCallback>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001a0e:	6823      	ldr	r3, [r4, #0]
 8001a10:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 8001a14:	b289      	uxth	r1, r1
 8001a16:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001a1a:	f8d4 2178 	ldr.w	r2, [r4, #376]	; 0x178
 8001a1e:	2a00      	cmp	r2, #0
 8001a20:	f47f ac33 	bne.w	800128a <HAL_PCD_IRQHandler+0x212>
 8001a24:	5a5a      	ldrh	r2, [r3, r1]
 8001a26:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8001a2a:	0412      	lsls	r2, r2, #16
 8001a2c:	0c12      	lsrs	r2, r2, #16
 8001a2e:	525a      	strh	r2, [r3, r1]
 8001a30:	5a5a      	ldrh	r2, [r3, r1]
 8001a32:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8001a36:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8001a3a:	b292      	uxth	r2, r2
 8001a3c:	525a      	strh	r2, [r3, r1]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001a3e:	6822      	ldr	r2, [r4, #0]
 8001a40:	8813      	ldrh	r3, [r2, #0]
 8001a42:	b29b      	uxth	r3, r3
 8001a44:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001a48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a4c:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8001a50:	433b      	orrs	r3, r7
 8001a52:	8013      	strh	r3, [r2, #0]
 8001a54:	e795      	b.n	8001982 <HAL_PCD_IRQHandler+0x90a>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001a56:	6823      	ldr	r3, [r4, #0]
 8001a58:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8001a5c:	b290      	uxth	r0, r2
 8001a5e:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8001a62:	4402      	add	r2, r0
 8001a64:	f89a 3028 	ldrb.w	r3, [sl, #40]	; 0x28
 8001a68:	eb02 1203 	add.w	r2, r2, r3, lsl #4
          len = ep->xfer_len_db;
 8001a6c:	460b      	mov	r3, r1
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001a6e:	2b3e      	cmp	r3, #62	; 0x3e
 8001a70:	f63f ae74 	bhi.w	800175c <HAL_PCD_IRQHandler+0x6e4>
 8001a74:	0859      	lsrs	r1, r3, #1
 8001a76:	f013 0f01 	tst.w	r3, #1
 8001a7a:	bf18      	it	ne
 8001a7c:	3101      	addne	r1, #1
 8001a7e:	0289      	lsls	r1, r1, #10
 8001a80:	b289      	uxth	r1, r1
 8001a82:	8011      	strh	r1, [r2, #0]
 8001a84:	e65e      	b.n	8001744 <HAL_PCD_IRQHandler+0x6cc>
 8001a86:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8001a8a:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 8001a8e:	641e      	str	r6, [r3, #64]	; 0x40
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001a90:	4661      	mov	r1, ip
 8001a92:	4620      	mov	r0, r4
 8001a94:	f002 fb08 	bl	80040a8 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001a98:	f419 4f80 	tst.w	r9, #16384	; 0x4000
 8001a9c:	f43f adf5 	beq.w	800168a <HAL_PCD_IRQHandler+0x612>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001aa0:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 8001aa4:	6822      	ldr	r2, [r4, #0]
 8001aa6:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001ab0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ab4:	ea48 0303 	orr.w	r3, r8, r3
 8001ab8:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8001abc:	e5e5      	b.n	800168a <HAL_PCD_IRQHandler+0x612>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001abe:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8001ac2:	fa1f fc83 	uxth.w	ip, r3
 8001ac6:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 8001aca:	f202 430c 	addw	r3, r2, #1036	; 0x40c
 8001ace:	4463      	add	r3, ip
 8001ad0:	eb03 1101 	add.w	r1, r3, r1, lsl #4
          len = ep->xfer_len_db;
 8001ad4:	4603      	mov	r3, r0
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001ad6:	2b3e      	cmp	r3, #62	; 0x3e
 8001ad8:	f63f aef1 	bhi.w	80018be <HAL_PCD_IRQHandler+0x846>
 8001adc:	085a      	lsrs	r2, r3, #1
 8001ade:	f013 0f01 	tst.w	r3, #1
 8001ae2:	bf18      	it	ne
 8001ae4:	3201      	addne	r2, #1
 8001ae6:	0292      	lsls	r2, r2, #10
 8001ae8:	b292      	uxth	r2, r2
 8001aea:	800a      	strh	r2, [r1, #0]
 8001aec:	e6db      	b.n	80018a6 <HAL_PCD_IRQHandler+0x82e>
 8001aee:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8001af2:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 8001af6:	641e      	str	r6, [r3, #64]	; 0x40
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001af8:	4620      	mov	r0, r4
 8001afa:	f002 fad5 	bl	80040a8 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8001afe:	f419 4f80 	tst.w	r9, #16384	; 0x4000
 8001b02:	f47f adc2 	bne.w	800168a <HAL_PCD_IRQHandler+0x612>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001b06:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 8001b0a:	6822      	ldr	r2, [r4, #0]
 8001b0c:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8001b10:	b29b      	uxth	r3, r3
 8001b12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001b16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b1a:	ea48 0303 	orr.w	r3, r8, r3
 8001b1e:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8001b22:	e5b2      	b.n	800168a <HAL_PCD_IRQHandler+0x612>
 8001b24:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8001b28:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8001b2c:	f8c3 6180 	str.w	r6, [r3, #384]	; 0x180
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001b30:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8001b34:	b29b      	uxth	r3, r3
 8001b36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001b3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b3e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001b42:	433b      	orrs	r3, r7
 8001b44:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8001b48:	e4ca      	b.n	80014e0 <HAL_PCD_IRQHandler+0x468>
 8001b4a:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8001b4e:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8001b52:	f8c3 6180 	str.w	r6, [r3, #384]	; 0x180
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001b56:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8001b5a:	b29b      	uxth	r3, r3
 8001b5c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001b60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b64:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001b68:	433b      	orrs	r3, r7
 8001b6a:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8001b6e:	e501      	b.n	8001574 <HAL_PCD_IRQHandler+0x4fc>

08001b70 <HAL_PCD_EP_Open>:
{
 8001b70:	b570      	push	{r4, r5, r6, lr}
 8001b72:	4605      	mov	r5, r0
 8001b74:	460c      	mov	r4, r1
  if ((ep_addr & 0x80U) == 0x80U)
 8001b76:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001b7a:	d125      	bne.n	8001bc8 <HAL_PCD_EP_Open+0x58>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b7c:	f001 0007 	and.w	r0, r1, #7
 8001b80:	eb00 0180 	add.w	r1, r0, r0, lsl #2
 8001b84:	eb05 06c1 	add.w	r6, r5, r1, lsl #3
 8001b88:	f506 71b4 	add.w	r1, r6, #360	; 0x168
    ep->is_in = 0U;
 8001b8c:	4630      	mov	r0, r6
 8001b8e:	2600      	movs	r6, #0
 8001b90:	f880 6169 	strb.w	r6, [r0, #361]	; 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b94:	f004 0407 	and.w	r4, r4, #7
 8001b98:	700c      	strb	r4, [r1, #0]
  ep->maxpacket = ep_mps;
 8001b9a:	610a      	str	r2, [r1, #16]
  ep->type = ep_type;
 8001b9c:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 8001b9e:	784a      	ldrb	r2, [r1, #1]
 8001ba0:	b102      	cbz	r2, 8001ba4 <HAL_PCD_EP_Open+0x34>
    ep->tx_fifo_num = ep->num;
 8001ba2:	81cc      	strh	r4, [r1, #14]
  if (ep_type == EP_TYPE_BULK)
 8001ba4:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 8001ba6:	bf04      	itt	eq
 8001ba8:	2300      	moveq	r3, #0
 8001baa:	710b      	strbeq	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 8001bac:	f895 32a8 	ldrb.w	r3, [r5, #680]	; 0x2a8
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d013      	beq.n	8001bdc <HAL_PCD_EP_Open+0x6c>
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	f885 32a8 	strb.w	r3, [r5, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001bba:	6828      	ldr	r0, [r5, #0]
 8001bbc:	f000 fc9b 	bl	80024f6 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001bc0:	2000      	movs	r0, #0
 8001bc2:	f885 02a8 	strb.w	r0, [r5, #680]	; 0x2a8
}
 8001bc6:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001bc8:	f001 0007 	and.w	r0, r1, #7
 8001bcc:	3001      	adds	r0, #1
 8001bce:	eb00 0180 	add.w	r1, r0, r0, lsl #2
 8001bd2:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
    ep->is_in = 1U;
 8001bd6:	2601      	movs	r6, #1
 8001bd8:	704e      	strb	r6, [r1, #1]
 8001bda:	e7db      	b.n	8001b94 <HAL_PCD_EP_Open+0x24>
  __HAL_LOCK(hpcd);
 8001bdc:	2002      	movs	r0, #2
 8001bde:	e7f2      	b.n	8001bc6 <HAL_PCD_EP_Open+0x56>

08001be0 <HAL_PCD_EP_Close>:
{
 8001be0:	b510      	push	{r4, lr}
 8001be2:	4604      	mov	r4, r0
 8001be4:	460b      	mov	r3, r1
  if ((ep_addr & 0x80U) == 0x80U)
 8001be6:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001bea:	d11f      	bne.n	8001c2c <HAL_PCD_EP_Close+0x4c>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001bec:	f001 0207 	and.w	r2, r1, #7
 8001bf0:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8001bf4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8001bf8:	f501 71b4 	add.w	r1, r1, #360	; 0x168
    ep->is_in = 0U;
 8001bfc:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001c00:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8001c04:	2000      	movs	r0, #0
 8001c06:	f882 0169 	strb.w	r0, [r2, #361]	; 0x169
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001c0a:	f003 0307 	and.w	r3, r3, #7
 8001c0e:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8001c10:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d013      	beq.n	8001c40 <HAL_PCD_EP_Close+0x60>
 8001c18:	2301      	movs	r3, #1
 8001c1a:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001c1e:	6820      	ldr	r0, [r4, #0]
 8001c20:	f000 fde6 	bl	80027f0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001c24:	2000      	movs	r0, #0
 8001c26:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8001c2a:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c2c:	f001 0207 	and.w	r2, r1, #7
 8001c30:	3201      	adds	r2, #1
 8001c32:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8001c36:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 8001c3a:	2001      	movs	r0, #1
 8001c3c:	7048      	strb	r0, [r1, #1]
 8001c3e:	e7e4      	b.n	8001c0a <HAL_PCD_EP_Close+0x2a>
  __HAL_LOCK(hpcd);
 8001c40:	2002      	movs	r0, #2
 8001c42:	e7f2      	b.n	8001c2a <HAL_PCD_EP_Close+0x4a>

08001c44 <HAL_PCD_EP_Receive>:
{
 8001c44:	b538      	push	{r3, r4, r5, lr}
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c46:	f001 0407 	and.w	r4, r1, #7
 8001c4a:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8001c4e:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8001c52:	f501 71b4 	add.w	r1, r1, #360	; 0x168
  ep->xfer_buff = pBuf;
 8001c56:	eb04 0584 	add.w	r5, r4, r4, lsl #2
 8001c5a:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
 8001c5e:	f8c5 217c 	str.w	r2, [r5, #380]	; 0x17c
  ep->xfer_len = len;
 8001c62:	f8c5 3180 	str.w	r3, [r5, #384]	; 0x180
  ep->xfer_count = 0U;
 8001c66:	2300      	movs	r3, #0
 8001c68:	f8c5 3184 	str.w	r3, [r5, #388]	; 0x184
  ep->is_in = 0U;
 8001c6c:	f885 3169 	strb.w	r3, [r5, #361]	; 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c70:	f885 4168 	strb.w	r4, [r5, #360]	; 0x168
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001c74:	6800      	ldr	r0, [r0, #0]
 8001c76:	f000 ff44 	bl	8002b02 <USB_EPStartXfer>
}
 8001c7a:	2000      	movs	r0, #0
 8001c7c:	bd38      	pop	{r3, r4, r5, pc}

08001c7e <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001c7e:	f001 0107 	and.w	r1, r1, #7
 8001c82:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8001c86:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
}
 8001c8a:	f8d1 0184 	ldr.w	r0, [r1, #388]	; 0x184
 8001c8e:	4770      	bx	lr

08001c90 <HAL_PCD_EP_Transmit>:
{
 8001c90:	b538      	push	{r3, r4, r5, lr}
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c92:	f001 0407 	and.w	r4, r1, #7
 8001c96:	1c61      	adds	r1, r4, #1
 8001c98:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8001c9c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
  ep->xfer_buff = pBuf;
 8001ca0:	eb04 0584 	add.w	r5, r4, r4, lsl #2
 8001ca4:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
 8001ca8:	63ea      	str	r2, [r5, #60]	; 0x3c
  ep->xfer_len = len;
 8001caa:	642b      	str	r3, [r5, #64]	; 0x40
  ep->xfer_fill_db = 1U;
 8001cac:	2201      	movs	r2, #1
 8001cae:	f885 204c 	strb.w	r2, [r5, #76]	; 0x4c
  ep->xfer_len_db = len;
 8001cb2:	64ab      	str	r3, [r5, #72]	; 0x48
  ep->xfer_count = 0U;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	646b      	str	r3, [r5, #68]	; 0x44
  ep->is_in = 1U;
 8001cb8:	f885 2029 	strb.w	r2, [r5, #41]	; 0x29
  ep->num = ep_addr & EP_ADDR_MSK;
 8001cbc:	f885 4028 	strb.w	r4, [r5, #40]	; 0x28
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001cc0:	6800      	ldr	r0, [r0, #0]
 8001cc2:	f000 ff1e 	bl	8002b02 <USB_EPStartXfer>
}
 8001cc6:	2000      	movs	r0, #0
 8001cc8:	bd38      	pop	{r3, r4, r5, pc}

08001cca <HAL_PCD_EP_SetStall>:
{
 8001cca:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001ccc:	f001 0507 	and.w	r5, r1, #7
 8001cd0:	6842      	ldr	r2, [r0, #4]
 8001cd2:	4295      	cmp	r5, r2
 8001cd4:	d831      	bhi.n	8001d3a <HAL_PCD_EP_SetStall+0x70>
 8001cd6:	4604      	mov	r4, r0
 8001cd8:	460b      	mov	r3, r1
  if ((0x80U & ep_addr) == 0x80U)
 8001cda:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001cde:	d11e      	bne.n	8001d1e <HAL_PCD_EP_SetStall+0x54>
    ep = &hpcd->OUT_ep[ep_addr];
 8001ce0:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8001ce4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8001ce8:	f501 71b4 	add.w	r1, r1, #360	; 0x168
    ep->is_in = 0U;
 8001cec:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001cf0:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	f883 2169 	strb.w	r2, [r3, #361]	; 0x169
  ep->is_stall = 1U;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001cfe:	700d      	strb	r5, [r1, #0]
  __HAL_LOCK(hpcd);
 8001d00:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d01a      	beq.n	8001d3e <HAL_PCD_EP_SetStall+0x74>
 8001d08:	2301      	movs	r3, #1
 8001d0a:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001d0e:	6820      	ldr	r0, [r4, #0]
 8001d10:	f000 fe58 	bl	80029c4 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d14:	b15d      	cbz	r5, 8001d2e <HAL_PCD_EP_SetStall+0x64>
  __HAL_UNLOCK(hpcd);
 8001d16:	2000      	movs	r0, #0
 8001d18:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8001d1c:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d1e:	1c6b      	adds	r3, r5, #1
 8001d20:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8001d24:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 8001d28:	2201      	movs	r2, #1
 8001d2a:	704a      	strb	r2, [r1, #1]
 8001d2c:	e7e5      	b.n	8001cfa <HAL_PCD_EP_SetStall+0x30>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001d2e:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
 8001d32:	6820      	ldr	r0, [r4, #0]
 8001d34:	f000 feca 	bl	8002acc <USB_EP0_OutStart>
 8001d38:	e7ed      	b.n	8001d16 <HAL_PCD_EP_SetStall+0x4c>
    return HAL_ERROR;
 8001d3a:	2001      	movs	r0, #1
 8001d3c:	e7ee      	b.n	8001d1c <HAL_PCD_EP_SetStall+0x52>
  __HAL_LOCK(hpcd);
 8001d3e:	2002      	movs	r0, #2
 8001d40:	e7ec      	b.n	8001d1c <HAL_PCD_EP_SetStall+0x52>

08001d42 <HAL_PCD_EP_ClrStall>:
{
 8001d42:	460b      	mov	r3, r1
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001d44:	f001 010f 	and.w	r1, r1, #15
 8001d48:	6842      	ldr	r2, [r0, #4]
 8001d4a:	4291      	cmp	r1, r2
 8001d4c:	d830      	bhi.n	8001db0 <HAL_PCD_EP_ClrStall+0x6e>
{
 8001d4e:	b510      	push	{r4, lr}
 8001d50:	4604      	mov	r4, r0
  if ((0x80U & ep_addr) == 0x80U)
 8001d52:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001d56:	d121      	bne.n	8001d9c <HAL_PCD_EP_ClrStall+0x5a>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d58:	f003 0207 	and.w	r2, r3, #7
 8001d5c:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8001d60:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8001d64:	f501 71b4 	add.w	r1, r1, #360	; 0x168
    ep->is_in = 0U;
 8001d68:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001d6c:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8001d70:	2000      	movs	r0, #0
 8001d72:	f882 0169 	strb.w	r0, [r2, #361]	; 0x169
  ep->is_stall = 0U;
 8001d76:	2200      	movs	r2, #0
 8001d78:	708a      	strb	r2, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d7a:	f003 0307 	and.w	r3, r3, #7
 8001d7e:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8001d80:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d015      	beq.n	8001db4 <HAL_PCD_EP_ClrStall+0x72>
 8001d88:	2301      	movs	r3, #1
 8001d8a:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001d8e:	6820      	ldr	r0, [r4, #0]
 8001d90:	f000 fe3d 	bl	8002a0e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001d94:	2000      	movs	r0, #0
 8001d96:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8001d9a:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d9c:	f003 0207 	and.w	r2, r3, #7
 8001da0:	3201      	adds	r2, #1
 8001da2:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8001da6:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 8001daa:	2001      	movs	r0, #1
 8001dac:	7048      	strb	r0, [r1, #1]
 8001dae:	e7e2      	b.n	8001d76 <HAL_PCD_EP_ClrStall+0x34>
    return HAL_ERROR;
 8001db0:	2001      	movs	r0, #1
}
 8001db2:	4770      	bx	lr
  __HAL_LOCK(hpcd);
 8001db4:	2002      	movs	r0, #2
 8001db6:	e7f0      	b.n	8001d9a <HAL_PCD_EP_ClrStall+0x58>

08001db8 <HAL_PCDEx_PMAConfig>:
                                       uint16_t ep_kind, uint32_t pmaadress)
{
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8001db8:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001dbc:	d00b      	beq.n	8001dd6 <HAL_PCDEx_PMAConfig+0x1e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001dbe:	f001 0107 	and.w	r1, r1, #7
 8001dc2:	3101      	adds	r1, #1
 8001dc4:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8001dc8:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8001dcc:	b952      	cbnz	r2, 8001de4 <HAL_PCDEx_PMAConfig+0x2c>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8001dce:	730a      	strb	r2, [r1, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8001dd0:	80cb      	strh	r3, [r1, #6]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }

  return HAL_OK;
}
 8001dd2:	2000      	movs	r0, #0
 8001dd4:	4770      	bx	lr
    ep = &hpcd->OUT_ep[ep_addr];
 8001dd6:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8001dda:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8001dde:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 8001de2:	e7f3      	b.n	8001dcc <HAL_PCDEx_PMAConfig+0x14>
    ep->doublebuffer = 1U;
 8001de4:	2201      	movs	r2, #1
 8001de6:	730a      	strb	r2, [r1, #12]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8001de8:	810b      	strh	r3, [r1, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8001dea:	0c1b      	lsrs	r3, r3, #16
 8001dec:	814b      	strh	r3, [r1, #10]
 8001dee:	e7f0      	b.n	8001dd2 <HAL_PCDEx_PMAConfig+0x1a>

08001df0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001df0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001df4:	b082      	sub	sp, #8
 8001df6:	4681      	mov	r9, r0
 8001df8:	460f      	mov	r7, r1
 8001dfa:	4616      	mov	r6, r2
 8001dfc:	461d      	mov	r5, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001dfe:	f7fe fdef 	bl	80009e0 <HAL_GetTick>
 8001e02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001e04:	442b      	add	r3, r5
 8001e06:	eba3 0800 	sub.w	r8, r3, r0
  tmp_tickstart = HAL_GetTick();
 8001e0a:	f7fe fde9 	bl	80009e0 <HAL_GetTick>
 8001e0e:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001e10:	4b2c      	ldr	r3, [pc, #176]	; (8001ec4 <SPI_WaitFlagStateUntilTimeout+0xd4>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8001e18:	fb08 f303 	mul.w	r3, r8, r3
 8001e1c:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001e1e:	f8d9 3000 	ldr.w	r3, [r9]
 8001e22:	689c      	ldr	r4, [r3, #8]
 8001e24:	ea37 0204 	bics.w	r2, r7, r4
 8001e28:	bf0c      	ite	eq
 8001e2a:	2401      	moveq	r4, #1
 8001e2c:	2400      	movne	r4, #0
 8001e2e:	42b4      	cmp	r4, r6
 8001e30:	d044      	beq.n	8001ebc <SPI_WaitFlagStateUntilTimeout+0xcc>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001e32:	f1b5 3fff 	cmp.w	r5, #4294967295
 8001e36:	d0f4      	beq.n	8001e22 <SPI_WaitFlagStateUntilTimeout+0x32>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001e38:	f7fe fdd2 	bl	80009e0 <HAL_GetTick>
 8001e3c:	eba0 000a 	sub.w	r0, r0, sl
 8001e40:	4540      	cmp	r0, r8
 8001e42:	d207      	bcs.n	8001e54 <SPI_WaitFlagStateUntilTimeout+0x64>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8001e44:	9b01      	ldr	r3, [sp, #4]
      {
        tmp_timeout = 0U;
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	bf08      	it	eq
 8001e4a:	4698      	moveq	r8, r3
      }
      count--;
 8001e4c:	9b01      	ldr	r3, [sp, #4]
 8001e4e:	3b01      	subs	r3, #1
 8001e50:	9301      	str	r3, [sp, #4]
 8001e52:	e7e4      	b.n	8001e1e <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001e54:	f8d9 2000 	ldr.w	r2, [r9]
 8001e58:	6853      	ldr	r3, [r2, #4]
 8001e5a:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8001e5e:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001e60:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001e64:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001e68:	d00c      	beq.n	8001e84 <SPI_WaitFlagStateUntilTimeout+0x94>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001e6a:	f8d9 3028 	ldr.w	r3, [r9, #40]	; 0x28
 8001e6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e72:	d016      	beq.n	8001ea2 <SPI_WaitFlagStateUntilTimeout+0xb2>
        hspi->State = HAL_SPI_STATE_READY;
 8001e74:	2301      	movs	r3, #1
 8001e76:	f889 3051 	strb.w	r3, [r9, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	f889 3050 	strb.w	r3, [r9, #80]	; 0x50
        return HAL_TIMEOUT;
 8001e80:	2003      	movs	r0, #3
 8001e82:	e01c      	b.n	8001ebe <SPI_WaitFlagStateUntilTimeout+0xce>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001e84:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8001e88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e8c:	d002      	beq.n	8001e94 <SPI_WaitFlagStateUntilTimeout+0xa4>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001e8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e92:	d1ea      	bne.n	8001e6a <SPI_WaitFlagStateUntilTimeout+0x7a>
          __HAL_SPI_DISABLE(hspi);
 8001e94:	f8d9 2000 	ldr.w	r2, [r9]
 8001e98:	6813      	ldr	r3, [r2, #0]
 8001e9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001e9e:	6013      	str	r3, [r2, #0]
 8001ea0:	e7e3      	b.n	8001e6a <SPI_WaitFlagStateUntilTimeout+0x7a>
          SPI_RESET_CRC(hspi);
 8001ea2:	f8d9 2000 	ldr.w	r2, [r9]
 8001ea6:	6813      	ldr	r3, [r2, #0]
 8001ea8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001eac:	6013      	str	r3, [r2, #0]
 8001eae:	f8d9 2000 	ldr.w	r2, [r9]
 8001eb2:	6813      	ldr	r3, [r2, #0]
 8001eb4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001eb8:	6013      	str	r3, [r2, #0]
 8001eba:	e7db      	b.n	8001e74 <SPI_WaitFlagStateUntilTimeout+0x84>
    }
  }

  return HAL_OK;
 8001ebc:	2000      	movs	r0, #0
}
 8001ebe:	b002      	add	sp, #8
 8001ec0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001ec4:	20000000 	.word	0x20000000

08001ec8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001ec8:	b510      	push	{r4, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	4604      	mov	r4, r0
 8001ece:	460b      	mov	r3, r1
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001ed0:	9200      	str	r2, [sp, #0]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	2180      	movs	r1, #128	; 0x80
 8001ed6:	f7ff ff8b 	bl	8001df0 <SPI_WaitFlagStateUntilTimeout>
 8001eda:	b908      	cbnz	r0, 8001ee0 <SPI_EndRxTxTransaction+0x18>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }
  return HAL_OK;
}
 8001edc:	b002      	add	sp, #8
 8001ede:	bd10      	pop	{r4, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001ee0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001ee2:	f043 0320 	orr.w	r3, r3, #32
 8001ee6:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_TIMEOUT;
 8001ee8:	2003      	movs	r0, #3
 8001eea:	e7f7      	b.n	8001edc <SPI_EndRxTxTransaction+0x14>

08001eec <HAL_SPI_Init>:
  if (hspi == NULL)
 8001eec:	2800      	cmp	r0, #0
 8001eee:	d056      	beq.n	8001f9e <HAL_SPI_Init+0xb2>
{
 8001ef0:	b510      	push	{r4, lr}
 8001ef2:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001ef4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001ef6:	b933      	cbnz	r3, 8001f06 <HAL_SPI_Init+0x1a>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001ef8:	6843      	ldr	r3, [r0, #4]
 8001efa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001efe:	d005      	beq.n	8001f0c <HAL_SPI_Init+0x20>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f00:	2300      	movs	r3, #0
 8001f02:	61c3      	str	r3, [r0, #28]
 8001f04:	e002      	b.n	8001f0c <HAL_SPI_Init+0x20>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f06:	2300      	movs	r3, #0
 8001f08:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001f0a:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8001f10:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d03c      	beq.n	8001f92 <HAL_SPI_Init+0xa6>
  hspi->State = HAL_SPI_STATE_BUSY;
 8001f18:	2302      	movs	r3, #2
 8001f1a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8001f1e:	6822      	ldr	r2, [r4, #0]
 8001f20:	6813      	ldr	r3, [r2, #0]
 8001f22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001f26:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001f28:	6822      	ldr	r2, [r4, #0]
 8001f2a:	6863      	ldr	r3, [r4, #4]
 8001f2c:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8001f30:	68a1      	ldr	r1, [r4, #8]
 8001f32:	f401 4104 	and.w	r1, r1, #33792	; 0x8400
 8001f36:	430b      	orrs	r3, r1
 8001f38:	68e1      	ldr	r1, [r4, #12]
 8001f3a:	f401 6100 	and.w	r1, r1, #2048	; 0x800
 8001f3e:	430b      	orrs	r3, r1
 8001f40:	6921      	ldr	r1, [r4, #16]
 8001f42:	f001 0102 	and.w	r1, r1, #2
 8001f46:	430b      	orrs	r3, r1
 8001f48:	6961      	ldr	r1, [r4, #20]
 8001f4a:	f001 0101 	and.w	r1, r1, #1
 8001f4e:	430b      	orrs	r3, r1
 8001f50:	69a1      	ldr	r1, [r4, #24]
 8001f52:	f401 7100 	and.w	r1, r1, #512	; 0x200
 8001f56:	430b      	orrs	r3, r1
 8001f58:	69e1      	ldr	r1, [r4, #28]
 8001f5a:	f001 0138 	and.w	r1, r1, #56	; 0x38
 8001f5e:	430b      	orrs	r3, r1
 8001f60:	6a21      	ldr	r1, [r4, #32]
 8001f62:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8001f66:	430b      	orrs	r3, r1
 8001f68:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001f6a:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
 8001f6e:	430b      	orrs	r3, r1
 8001f70:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001f72:	6822      	ldr	r2, [r4, #0]
 8001f74:	8b63      	ldrh	r3, [r4, #26]
 8001f76:	f003 0304 	and.w	r3, r3, #4
 8001f7a:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001f7c:	6822      	ldr	r2, [r4, #0]
 8001f7e:	69d3      	ldr	r3, [r2, #28]
 8001f80:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001f84:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001f86:	2000      	movs	r0, #0
 8001f88:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 8001f90:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8001f92:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8001f96:	4620      	mov	r0, r4
 8001f98:	f7fe fa9c 	bl	80004d4 <HAL_SPI_MspInit>
 8001f9c:	e7bc      	b.n	8001f18 <HAL_SPI_Init+0x2c>
    return HAL_ERROR;
 8001f9e:	2001      	movs	r0, #1
}
 8001fa0:	4770      	bx	lr
	...

08001fa4 <HAL_SPI_Transmit_DMA>:
{
 8001fa4:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hspi);
 8001fa6:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d061      	beq.n	8002072 <HAL_SPI_Transmit_DMA+0xce>
 8001fae:	4604      	mov	r4, r0
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  if (hspi->State != HAL_SPI_STATE_READY)
 8001fb6:	f890 5051 	ldrb.w	r5, [r0, #81]	; 0x51
 8001fba:	b2ed      	uxtb	r5, r5
 8001fbc:	429d      	cmp	r5, r3
 8001fbe:	d152      	bne.n	8002066 <HAL_SPI_Transmit_DMA+0xc2>
  if ((pData == NULL) || (Size == 0U))
 8001fc0:	2900      	cmp	r1, #0
 8001fc2:	d051      	beq.n	8002068 <HAL_SPI_Transmit_DMA+0xc4>
 8001fc4:	2a00      	cmp	r2, #0
 8001fc6:	d04f      	beq.n	8002068 <HAL_SPI_Transmit_DMA+0xc4>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	6543      	str	r3, [r0, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001fd2:	6301      	str	r1, [r0, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001fd4:	8682      	strh	r2, [r0, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001fd6:	86c2      	strh	r2, [r0, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001fd8:	6383      	str	r3, [r0, #56]	; 0x38
  hspi->TxISR       = NULL;
 8001fda:	6443      	str	r3, [r0, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001fdc:	6403      	str	r3, [r0, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8001fde:	8783      	strh	r3, [r0, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001fe0:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001fe2:	6883      	ldr	r3, [r0, #8]
 8001fe4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001fe8:	d02a      	beq.n	8002040 <HAL_SPI_Transmit_DMA+0x9c>
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8001fea:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001fec:	4a22      	ldr	r2, [pc, #136]	; (8002078 <HAL_SPI_Transmit_DMA+0xd4>)
 8001fee:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8001ff0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001ff2:	4a22      	ldr	r2, [pc, #136]	; (800207c <HAL_SPI_Transmit_DMA+0xd8>)
 8001ff4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8001ff6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001ff8:	4a21      	ldr	r2, [pc, #132]	; (8002080 <HAL_SPI_Transmit_DMA+0xdc>)
 8001ffa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferAbortCallback = NULL;
 8001ffc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001ffe:	2200      	movs	r2, #0
 8002000:	635a      	str	r2, [r3, #52]	; 0x34
                                 hspi->TxXferCount))
 8002002:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002004:	6822      	ldr	r2, [r4, #0]
 8002006:	b29b      	uxth	r3, r3
 8002008:	320c      	adds	r2, #12
 800200a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800200c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800200e:	f7fe fd8b 	bl	8000b28 <HAL_DMA_Start_IT>
 8002012:	4601      	mov	r1, r0
 8002014:	b9f8      	cbnz	r0, 8002056 <HAL_SPI_Transmit_DMA+0xb2>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002016:	6823      	ldr	r3, [r4, #0]
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	f012 0f40 	tst.w	r2, #64	; 0x40
 800201e:	d103      	bne.n	8002028 <HAL_SPI_Transmit_DMA+0x84>
    __HAL_SPI_ENABLE(hspi);
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002026:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8002028:	6822      	ldr	r2, [r4, #0]
 800202a:	6853      	ldr	r3, [r2, #4]
 800202c:	f043 0320 	orr.w	r3, r3, #32
 8002030:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002032:	6822      	ldr	r2, [r4, #0]
 8002034:	6853      	ldr	r3, [r2, #4]
 8002036:	f043 0302 	orr.w	r3, r3, #2
 800203a:	6053      	str	r3, [r2, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800203c:	460d      	mov	r5, r1
 800203e:	e013      	b.n	8002068 <HAL_SPI_Transmit_DMA+0xc4>
    __HAL_SPI_DISABLE(hspi);
 8002040:	6802      	ldr	r2, [r0, #0]
 8002042:	6813      	ldr	r3, [r2, #0]
 8002044:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002048:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 800204a:	6802      	ldr	r2, [r0, #0]
 800204c:	6813      	ldr	r3, [r2, #0]
 800204e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002052:	6013      	str	r3, [r2, #0]
 8002054:	e7c9      	b.n	8001fea <HAL_SPI_Transmit_DMA+0x46>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002056:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002058:	f043 0310 	orr.w	r3, r3, #16
 800205c:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->State = HAL_SPI_STATE_READY;
 800205e:	2301      	movs	r3, #1
 8002060:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
    goto error;
 8002064:	e000      	b.n	8002068 <HAL_SPI_Transmit_DMA+0xc4>
    errorcode = HAL_BUSY;
 8002066:	2502      	movs	r5, #2
  __HAL_UNLOCK(hspi);
 8002068:	2300      	movs	r3, #0
 800206a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 800206e:	4628      	mov	r0, r5
 8002070:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hspi);
 8002072:	2502      	movs	r5, #2
 8002074:	e7fb      	b.n	800206e <HAL_SPI_Transmit_DMA+0xca>
 8002076:	bf00      	nop
 8002078:	08002089 	.word	0x08002089
 800207c:	080020b7 	.word	0x080020b7
 8002080:	08002095 	.word	0x08002095

08002084 <HAL_SPI_TxCpltCallback>:
}
 8002084:	4770      	bx	lr

08002086 <HAL_SPI_TxHalfCpltCallback>:
}
 8002086:	4770      	bx	lr

08002088 <SPI_DMAHalfTransmitCplt>:
{
 8002088:	b508      	push	{r3, lr}
  HAL_SPI_TxHalfCpltCallback(hspi);
 800208a:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800208c:	f7ff fffb 	bl	8002086 <HAL_SPI_TxHalfCpltCallback>
}
 8002090:	bd08      	pop	{r3, pc}

08002092 <HAL_SPI_ErrorCallback>:
}
 8002092:	4770      	bx	lr

08002094 <SPI_DMAError>:
{
 8002094:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002096:	6a40      	ldr	r0, [r0, #36]	; 0x24
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002098:	6802      	ldr	r2, [r0, #0]
 800209a:	6853      	ldr	r3, [r2, #4]
 800209c:	f023 0303 	bic.w	r3, r3, #3
 80020a0:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80020a2:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80020a4:	f043 0310 	orr.w	r3, r3, #16
 80020a8:	6543      	str	r3, [r0, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80020aa:	2301      	movs	r3, #1
 80020ac:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
  HAL_SPI_ErrorCallback(hspi);
 80020b0:	f7ff ffef 	bl	8002092 <HAL_SPI_ErrorCallback>
}
 80020b4:	bd08      	pop	{r3, pc}

080020b6 <SPI_DMATransmitCplt>:
{
 80020b6:	b530      	push	{r4, r5, lr}
 80020b8:	b083      	sub	sp, #12
 80020ba:	4605      	mov	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80020bc:	6a44      	ldr	r4, [r0, #36]	; 0x24
  tickstart = HAL_GetTick();
 80020be:	f7fe fc8f 	bl	80009e0 <HAL_GetTick>
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80020c2:	682b      	ldr	r3, [r5, #0]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f013 0f20 	tst.w	r3, #32
 80020ca:	d123      	bne.n	8002114 <SPI_DMATransmitCplt+0x5e>
 80020cc:	4602      	mov	r2, r0
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80020ce:	6821      	ldr	r1, [r4, #0]
 80020d0:	684b      	ldr	r3, [r1, #4]
 80020d2:	f023 0320 	bic.w	r3, r3, #32
 80020d6:	604b      	str	r3, [r1, #4]
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80020d8:	6821      	ldr	r1, [r4, #0]
 80020da:	684b      	ldr	r3, [r1, #4]
 80020dc:	f023 0302 	bic.w	r3, r3, #2
 80020e0:	604b      	str	r3, [r1, #4]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80020e2:	2164      	movs	r1, #100	; 0x64
 80020e4:	4620      	mov	r0, r4
 80020e6:	f7ff feef 	bl	8001ec8 <SPI_EndRxTxTransaction>
 80020ea:	b118      	cbz	r0, 80020f4 <SPI_DMATransmitCplt+0x3e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80020ec:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80020ee:	f043 0320 	orr.w	r3, r3, #32
 80020f2:	6563      	str	r3, [r4, #84]	; 0x54
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80020f4:	68a3      	ldr	r3, [r4, #8]
 80020f6:	b933      	cbnz	r3, 8002106 <SPI_DMATransmitCplt+0x50>
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80020f8:	9301      	str	r3, [sp, #4]
 80020fa:	6823      	ldr	r3, [r4, #0]
 80020fc:	68da      	ldr	r2, [r3, #12]
 80020fe:	9201      	str	r2, [sp, #4]
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	9301      	str	r3, [sp, #4]
 8002104:	9b01      	ldr	r3, [sp, #4]
    hspi->TxXferCount = 0U;
 8002106:	2300      	movs	r3, #0
 8002108:	86e3      	strh	r3, [r4, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 800210a:	2301      	movs	r3, #1
 800210c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002110:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002112:	b923      	cbnz	r3, 800211e <SPI_DMATransmitCplt+0x68>
  HAL_SPI_TxCpltCallback(hspi);
 8002114:	4620      	mov	r0, r4
 8002116:	f7ff ffb5 	bl	8002084 <HAL_SPI_TxCpltCallback>
}
 800211a:	b003      	add	sp, #12
 800211c:	bd30      	pop	{r4, r5, pc}
      HAL_SPI_ErrorCallback(hspi);
 800211e:	4620      	mov	r0, r4
 8002120:	f7ff ffb7 	bl	8002092 <HAL_SPI_ErrorCallback>
      return;
 8002124:	e7f9      	b.n	800211a <SPI_DMATransmitCplt+0x64>

08002126 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002126:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 800212a:	680d      	ldr	r5, [r1, #0]
 800212c:	f3c5 250f 	ubfx	r5, r5, #8, #16
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002130:	fa95 f2a5 	rbit	r2, r5
  pinpos = POSITION_VAL(pinmask);
 8002134:	fab2 f282 	clz	r2, r2

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 8002138:	fa35 f302 	lsrs.w	r3, r5, r2
 800213c:	d072      	beq.n	8002224 <LL_GPIO_Init+0xfe>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 800213e:	2701      	movs	r7, #1
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8002140:	f04f 0c0f 	mov.w	ip, #15
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 8002144:	f04f 0e03 	mov.w	lr, #3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 8002148:	f04f 0904 	mov.w	r9, #4
      {
        currentpin = (0x00000101uL << pinpos);
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 800214c:	f04f 1a01 	mov.w	sl, #65537	; 0x10001
 8002150:	e035      	b.n	80021be <LL_GPIO_Init+0x98>
 8002152:	f1a2 0308 	sub.w	r3, r2, #8
 8002156:	fa0a f303 	lsl.w	r3, sl, r3
 800215a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 800215e:	68c4      	ldr	r4, [r0, #12]
 8002160:	ea4f 2b13 	mov.w	fp, r3, lsr #8
 8002164:	fa9b f6ab 	rbit	r6, fp
 8002168:	fab6 f886 	clz	r8, r6
 800216c:	ea24 040b 	bic.w	r4, r4, fp
 8002170:	690e      	ldr	r6, [r1, #16]
 8002172:	fa06 f608 	lsl.w	r6, r6, r8
 8002176:	4334      	orrs	r4, r6
 8002178:	60c4      	str	r4, [r0, #12]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 800217a:	ea4f 6813 	mov.w	r8, r3, lsr #24
 800217e:	fa93 f6a3 	rbit	r6, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8002182:	fab6 f686 	clz	r6, r6
 8002186:	fa93 fba3 	rbit	fp, r3
 800218a:	fabb fb8b 	clz	fp, fp
 800218e:	00b6      	lsls	r6, r6, #2
 8002190:	fa0c f606 	lsl.w	r6, ip, r6
 8002194:	f850 4008 	ldr.w	r4, [r0, r8]
 8002198:	ea24 0606 	bic.w	r6, r4, r6
 800219c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80021a0:	684c      	ldr	r4, [r1, #4]
 80021a2:	fa04 f40b 	lsl.w	r4, r4, fp
 80021a6:	4326      	orrs	r6, r4
 80021a8:	f840 6008 	str.w	r6, [r0, r8]
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80021ac:	684c      	ldr	r4, [r1, #4]
 80021ae:	f024 0408 	bic.w	r4, r4, #8
 80021b2:	2c01      	cmp	r4, #1
 80021b4:	d00d      	beq.n	80021d2 <LL_GPIO_Init+0xac>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
      }
    }
    pinpos++;
 80021b6:	3201      	adds	r2, #1
  while ((pinmask  >> pinpos) != 0u)
 80021b8:	fa35 f302 	lsrs.w	r3, r5, r2
 80021bc:	d032      	beq.n	8002224 <LL_GPIO_Init+0xfe>
    if ((pinmask & (1u << pinpos)) != 0u)
 80021be:	fa07 f302 	lsl.w	r3, r7, r2
 80021c2:	422b      	tst	r3, r5
 80021c4:	d0f7      	beq.n	80021b6 <LL_GPIO_Init+0x90>
      if (pinpos < GPIO_PIN_MASK_POS)
 80021c6:	2a07      	cmp	r2, #7
 80021c8:	d8c3      	bhi.n	8002152 <LL_GPIO_Init+0x2c>
        currentpin = (0x00000101uL << pinpos);
 80021ca:	f240 1301 	movw	r3, #257	; 0x101
 80021ce:	4093      	lsls	r3, r2
 80021d0:	e7c5      	b.n	800215e <LL_GPIO_Init+0x38>
 80021d2:	fa93 f4a3 	rbit	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 80021d6:	fab4 f484 	clz	r4, r4
 80021da:	fa93 fba3 	rbit	fp, r3
 80021de:	fabb fb8b 	clz	fp, fp
 80021e2:	00a4      	lsls	r4, r4, #2
 80021e4:	fa0e f404 	lsl.w	r4, lr, r4
 80021e8:	ea26 0604 	bic.w	r6, r6, r4
 80021ec:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80021f0:	688c      	ldr	r4, [r1, #8]
 80021f2:	fa04 f40b 	lsl.w	r4, r4, fp
 80021f6:	4334      	orrs	r4, r6
 80021f8:	f840 4008 	str.w	r4, [r0, r8]
 80021fc:	fa93 f6a3 	rbit	r6, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 8002200:	fab6 f686 	clz	r6, r6
 8002204:	fa93 f3a3 	rbit	r3, r3
 8002208:	fab3 f383 	clz	r3, r3
 800220c:	00b6      	lsls	r6, r6, #2
 800220e:	fa09 f606 	lsl.w	r6, r9, r6
 8002212:	ea24 0606 	bic.w	r6, r4, r6
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	68cc      	ldr	r4, [r1, #12]
 800221a:	409c      	lsls	r4, r3
 800221c:	4326      	orrs	r6, r4
 800221e:	f840 6008 	str.w	r6, [r0, r8]
}
 8002222:	e7c8      	b.n	80021b6 <LL_GPIO_Init+0x90>
  }
  return (SUCCESS);
}
 8002224:	2000      	movs	r0, #0
 8002226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800222c <LL_TIM_Init>:
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 800222c:	6803      	ldr	r3, [r0, #0]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800222e:	4a21      	ldr	r2, [pc, #132]	; (80022b4 <LL_TIM_Init+0x88>)
 8002230:	4290      	cmp	r0, r2
 8002232:	d010      	beq.n	8002256 <LL_TIM_Init+0x2a>
 8002234:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002238:	d023      	beq.n	8002282 <LL_TIM_Init+0x56>
 800223a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800223e:	4290      	cmp	r0, r2
 8002240:	d01a      	beq.n	8002278 <LL_TIM_Init+0x4c>
 8002242:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002246:	4290      	cmp	r0, r2
 8002248:	d02e      	beq.n	80022a8 <LL_TIM_Init+0x7c>
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 800224a:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800224c:	688b      	ldr	r3, [r1, #8]
  WRITE_REG(TIMx->ARR, AutoReload);
 800224e:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8002250:	880b      	ldrh	r3, [r1, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8002252:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002254:	e022      	b.n	800229c <LL_TIM_Init+0x70>
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8002256:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800225a:	684a      	ldr	r2, [r1, #4]
 800225c:	4313      	orrs	r3, r2
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800225e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002262:	68ca      	ldr	r2, [r1, #12]
 8002264:	4313      	orrs	r3, r2
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8002266:	6003      	str	r3, [r0, #0]
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8002268:	688b      	ldr	r3, [r1, #8]
  WRITE_REG(TIMx->ARR, AutoReload);
 800226a:	62c3      	str	r3, [r0, #44]	; 0x2c
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800226c:	880b      	ldrh	r3, [r1, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800226e:	6283      	str	r3, [r0, #40]	; 0x28
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8002270:	690a      	ldr	r2, [r1, #16]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8002272:	4b10      	ldr	r3, [pc, #64]	; (80022b4 <LL_TIM_Init+0x88>)
 8002274:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002276:	e011      	b.n	800229c <LL_TIM_Init+0x70>
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8002278:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800227c:	684a      	ldr	r2, [r1, #4]
 800227e:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002280:	e003      	b.n	800228a <LL_TIM_Init+0x5e>
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8002282:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002286:	684a      	ldr	r2, [r1, #4]
 8002288:	4313      	orrs	r3, r2
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800228a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800228e:	68ca      	ldr	r2, [r1, #12]
 8002290:	4313      	orrs	r3, r2
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8002292:	6003      	str	r3, [r0, #0]
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8002294:	688b      	ldr	r3, [r1, #8]
  WRITE_REG(TIMx->ARR, AutoReload);
 8002296:	62c3      	str	r3, [r0, #44]	; 0x2c
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8002298:	880b      	ldrh	r3, [r1, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800229a:	6283      	str	r3, [r0, #40]	; 0x28
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800229c:	6943      	ldr	r3, [r0, #20]
 800229e:	f043 0301 	orr.w	r3, r3, #1
 80022a2:	6143      	str	r3, [r0, #20]
  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);

  return SUCCESS;
}
 80022a4:	2000      	movs	r0, #0
 80022a6:	4770      	bx	lr
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80022a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022ac:	684a      	ldr	r2, [r1, #4]
 80022ae:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80022b0:	e7eb      	b.n	800228a <LL_TIM_Init+0x5e>
 80022b2:	bf00      	nop
 80022b4:	40012c00 	.word	0x40012c00

080022b8 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 80022b8:	b430      	push	{r4, r5}
  ErrorStatus result = ERROR;

  switch (Channel)
 80022ba:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80022be:	f000 8094 	beq.w	80023ea <LL_TIM_OC_Init+0x132>
 80022c2:	d825      	bhi.n	8002310 <LL_TIM_OC_Init+0x58>
 80022c4:	2901      	cmp	r1, #1
 80022c6:	d04a      	beq.n	800235e <LL_TIM_OC_Init+0xa6>
 80022c8:	2910      	cmp	r1, #16
 80022ca:	bf18      	it	ne
 80022cc:	2001      	movne	r0, #1
 80022ce:	d144      	bne.n	800235a <LL_TIM_OC_Init+0xa2>
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 80022d0:	6a03      	ldr	r3, [r0, #32]
 80022d2:	f023 0310 	bic.w	r3, r3, #16
 80022d6:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80022d8:	6a03      	ldr	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80022da:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80022dc:	6981      	ldr	r1, [r0, #24]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 80022de:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
 80022e2:	6815      	ldr	r5, [r2, #0]
 80022e4:	ea41 2105 	orr.w	r1, r1, r5, lsl #8

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 80022e8:	f023 0320 	bic.w	r3, r3, #32
 80022ec:	6915      	ldr	r5, [r2, #16]
 80022ee:	ea43 1305 	orr.w	r3, r3, r5, lsl #4

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 80022f2:	f023 0310 	bic.w	r3, r3, #16
 80022f6:	6855      	ldr	r5, [r2, #4]
 80022f8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80022fc:	4d58      	ldr	r5, [pc, #352]	; (8002460 <LL_TIM_OC_Init+0x1a8>)
 80022fe:	42a8      	cmp	r0, r5
 8002300:	d05e      	beq.n	80023c0 <LL_TIM_OC_Init+0x108>
    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002302:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8002304:	6181      	str	r1, [r0, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8002306:	68d2      	ldr	r2, [r2, #12]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8002308:	6382      	str	r2, [r0, #56]	; 0x38

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800230a:	6203      	str	r3, [r0, #32]
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 800230c:	2000      	movs	r0, #0
      break;
 800230e:	e024      	b.n	800235a <LL_TIM_OC_Init+0xa2>
  switch (Channel)
 8002310:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8002314:	d120      	bne.n	8002358 <LL_TIM_OC_Init+0xa0>
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8002316:	6a03      	ldr	r3, [r0, #32]
 8002318:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800231c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800231e:	6a03      	ldr	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8002320:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8002322:	69c1      	ldr	r1, [r0, #28]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8002324:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
 8002328:	6815      	ldr	r5, [r2, #0]
 800232a:	ea41 2105 	orr.w	r1, r1, r5, lsl #8

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 800232e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002332:	6915      	ldr	r5, [r2, #16]
 8002334:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8002338:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800233c:	6855      	ldr	r5, [r2, #4]
 800233e:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002342:	4d47      	ldr	r5, [pc, #284]	; (8002460 <LL_TIM_OC_Init+0x1a8>)
 8002344:	42a8      	cmp	r0, r5
 8002346:	f000 8084 	beq.w	8002452 <LL_TIM_OC_Init+0x19a>
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800234a:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800234c:	61c1      	str	r1, [r0, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 800234e:	68d2      	ldr	r2, [r2, #12]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8002350:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002352:	6203      	str	r3, [r0, #32]
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8002354:	2000      	movs	r0, #0
      break;
 8002356:	e000      	b.n	800235a <LL_TIM_OC_Init+0xa2>
  switch (Channel)
 8002358:	2001      	movs	r0, #1
}
 800235a:	bc30      	pop	{r4, r5}
 800235c:	4770      	bx	lr
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 800235e:	6a03      	ldr	r3, [r0, #32]
 8002360:	f023 0301 	bic.w	r3, r3, #1
 8002364:	6203      	str	r3, [r0, #32]
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002366:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002368:	6844      	ldr	r4, [r0, #4]
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800236a:	6981      	ldr	r1, [r0, #24]
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 800236c:	f021 0173 	bic.w	r1, r1, #115	; 0x73
 8002370:	6815      	ldr	r5, [r2, #0]
 8002372:	4329      	orrs	r1, r5
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8002374:	f023 0302 	bic.w	r3, r3, #2
 8002378:	6915      	ldr	r5, [r2, #16]
 800237a:	432b      	orrs	r3, r5
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 800237c:	f023 0301 	bic.w	r3, r3, #1
 8002380:	6855      	ldr	r5, [r2, #4]
 8002382:	432b      	orrs	r3, r5
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002384:	4d36      	ldr	r5, [pc, #216]	; (8002460 <LL_TIM_OC_Init+0x1a8>)
 8002386:	42a8      	cmp	r0, r5
 8002388:	d006      	beq.n	8002398 <LL_TIM_OC_Init+0xe0>
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800238a:	6044      	str	r4, [r0, #4]
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800238c:	6181      	str	r1, [r0, #24]
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 800238e:	68d2      	ldr	r2, [r2, #12]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8002390:	6342      	str	r2, [r0, #52]	; 0x34
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002392:	6203      	str	r3, [r0, #32]
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8002394:	2000      	movs	r0, #0
      break;
 8002396:	e7e0      	b.n	800235a <LL_TIM_OC_Init+0xa2>
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8002398:	f023 0308 	bic.w	r3, r3, #8
 800239c:	6955      	ldr	r5, [r2, #20]
 800239e:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 80023a2:	f023 0304 	bic.w	r3, r3, #4
 80023a6:	6895      	ldr	r5, [r2, #8]
 80023a8:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 80023ac:	f424 7480 	bic.w	r4, r4, #256	; 0x100
 80023b0:	6995      	ldr	r5, [r2, #24]
 80023b2:	432c      	orrs	r4, r5
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 80023b4:	f424 7400 	bic.w	r4, r4, #512	; 0x200
 80023b8:	69d5      	ldr	r5, [r2, #28]
 80023ba:	ea44 0445 	orr.w	r4, r4, r5, lsl #1
 80023be:	e7e4      	b.n	800238a <LL_TIM_OC_Init+0xd2>
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 80023c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80023c4:	6955      	ldr	r5, [r2, #20]
 80023c6:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 80023ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80023ce:	6895      	ldr	r5, [r2, #8]
 80023d0:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 80023d4:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 80023d8:	6995      	ldr	r5, [r2, #24]
 80023da:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 80023de:	f424 6400 	bic.w	r4, r4, #2048	; 0x800
 80023e2:	69d5      	ldr	r5, [r2, #28]
 80023e4:	ea44 04c5 	orr.w	r4, r4, r5, lsl #3
 80023e8:	e78b      	b.n	8002302 <LL_TIM_OC_Init+0x4a>
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 80023ea:	6a03      	ldr	r3, [r0, #32]
 80023ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80023f0:	6203      	str	r3, [r0, #32]
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80023f2:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80023f4:	6844      	ldr	r4, [r0, #4]
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80023f6:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 80023f8:	f021 0173 	bic.w	r1, r1, #115	; 0x73
 80023fc:	6815      	ldr	r5, [r2, #0]
 80023fe:	4329      	orrs	r1, r5
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8002400:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002404:	6915      	ldr	r5, [r2, #16]
 8002406:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 800240a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800240e:	6855      	ldr	r5, [r2, #4]
 8002410:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002414:	4d12      	ldr	r5, [pc, #72]	; (8002460 <LL_TIM_OC_Init+0x1a8>)
 8002416:	42a8      	cmp	r0, r5
 8002418:	d006      	beq.n	8002428 <LL_TIM_OC_Init+0x170>
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800241a:	6044      	str	r4, [r0, #4]
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800241c:	61c1      	str	r1, [r0, #28]
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 800241e:	68d2      	ldr	r2, [r2, #12]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8002420:	63c2      	str	r2, [r0, #60]	; 0x3c
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002422:	6203      	str	r3, [r0, #32]
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8002424:	2000      	movs	r0, #0
      break;
 8002426:	e798      	b.n	800235a <LL_TIM_OC_Init+0xa2>
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8002428:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800242c:	6955      	ldr	r5, [r2, #20]
 800242e:	ea43 2385 	orr.w	r3, r3, r5, lsl #10
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8002432:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002436:	6895      	ldr	r5, [r2, #8]
 8002438:	ea43 2385 	orr.w	r3, r3, r5, lsl #10
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 800243c:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 8002440:	6995      	ldr	r5, [r2, #24]
 8002442:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8002446:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
 800244a:	69d5      	ldr	r5, [r2, #28]
 800244c:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
 8002450:	e7e3      	b.n	800241a <LL_TIM_OC_Init+0x162>
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8002452:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
 8002456:	6995      	ldr	r5, [r2, #24]
 8002458:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 800245c:	e775      	b.n	800234a <LL_TIM_OC_Init+0x92>
 800245e:	bf00      	nop
 8002460:	40012c00 	.word	0x40012c00

08002464 <LL_TIM_BDTR_Init>:
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 8002464:	7b0b      	ldrb	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 8002466:	688a      	ldr	r2, [r1, #8]
 8002468:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 800246a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800246e:	684a      	ldr	r2, [r1, #4]
 8002470:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 8002472:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002476:	680a      	ldr	r2, [r1, #0]
 8002478:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 800247a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800247e:	89ca      	ldrh	r2, [r1, #14]
 8002480:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 8002482:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002486:	690a      	ldr	r2, [r1, #16]
 8002488:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 800248a:	694a      	ldr	r2, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, TIM_BDTRInitStruct->AutomaticOutput);
 800248c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002490:	4313      	orrs	r3, r2
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 8002492:	6443      	str	r3, [r0, #68]	; 0x44
}
 8002494:	2000      	movs	r0, #0
 8002496:	4770      	bx	lr

08002498 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002498:	b084      	sub	sp, #16
 800249a:	a801      	add	r0, sp, #4
 800249c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 80024a0:	2000      	movs	r0, #0
 80024a2:	b004      	add	sp, #16
 80024a4:	4770      	bx	lr

080024a6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80024a6:	4603      	mov	r3, r0
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80024a8:	2000      	movs	r0, #0
 80024aa:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80024ae:	f44f 423f 	mov.w	r2, #48896	; 0xbf00
 80024b2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
}
 80024b6:	4770      	bx	lr

080024b8 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80024b8:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 80024bc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80024c0:	045b      	lsls	r3, r3, #17
 80024c2:	0c5b      	lsrs	r3, r3, #17
 80024c4:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 80024c8:	2000      	movs	r0, #0
 80024ca:	4770      	bx	lr

080024cc <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 80024cc:	2000      	movs	r0, #0
 80024ce:	4770      	bx	lr

080024d0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80024d0:	b084      	sub	sp, #16
 80024d2:	b410      	push	{r4}
 80024d4:	4604      	mov	r4, r0
 80024d6:	a802      	add	r0, sp, #8
 80024d8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80024dc:	2301      	movs	r3, #1
 80024de:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80024e2:	2000      	movs	r0, #0
 80024e4:	f8a4 0040 	strh.w	r0, [r4, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80024e8:	f8a4 0044 	strh.w	r0, [r4, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80024ec:	f8a4 0050 	strh.w	r0, [r4, #80]	; 0x50

  return HAL_OK;
}
 80024f0:	bc10      	pop	{r4}
 80024f2:	b004      	add	sp, #16
 80024f4:	4770      	bx	lr

080024f6 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80024f6:	b470      	push	{r4, r5, r6}
 80024f8:	4603      	mov	r3, r0
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80024fa:	780d      	ldrb	r5, [r1, #0]
 80024fc:	f830 2025 	ldrh.w	r2, [r0, r5, lsl #2]
 8002500:	b292      	uxth	r2, r2
 8002502:	f422 42ec 	bic.w	r2, r2, #30208	; 0x7600
 8002506:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800250a:	b292      	uxth	r2, r2

  /* initialize Endpoint */
  switch (ep->type)
 800250c:	78c8      	ldrb	r0, [r1, #3]
 800250e:	2803      	cmp	r0, #3
 8002510:	d85b      	bhi.n	80025ca <USB_ActivateEndpoint+0xd4>
 8002512:	e8df f000 	tbb	[pc, r0]
 8002516:	564f      	.short	0x564f
 8002518:	5202      	.short	0x5202
 800251a:	2000      	movs	r0, #0
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800251c:	f248 0480 	movw	r4, #32896	; 0x8080
 8002520:	4322      	orrs	r2, r4
 8002522:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8002526:	780d      	ldrb	r5, [r1, #0]
 8002528:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 800252c:	b292      	uxth	r2, r2
 800252e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002532:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002536:	432a      	orrs	r2, r5
 8002538:	4322      	orrs	r2, r4
 800253a:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]

  if (ep->doublebuffer == 0U)
 800253e:	7b0a      	ldrb	r2, [r1, #12]
 8002540:	2a00      	cmp	r2, #0
 8002542:	f040 80a3 	bne.w	800268c <USB_ActivateEndpoint+0x196>
  {
    if (ep->is_in != 0U)
 8002546:	784a      	ldrb	r2, [r1, #1]
 8002548:	2a00      	cmp	r2, #0
 800254a:	d040      	beq.n	80025ce <USB_ActivateEndpoint+0xd8>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800254c:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 8002550:	b2ad      	uxth	r5, r5
 8002552:	780a      	ldrb	r2, [r1, #0]
 8002554:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8002558:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800255c:	88cc      	ldrh	r4, [r1, #6]
 800255e:	0864      	lsrs	r4, r4, #1
 8002560:	0064      	lsls	r4, r4, #1
 8002562:	5354      	strh	r4, [r2, r5]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002564:	780c      	ldrb	r4, [r1, #0]
 8002566:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800256a:	f012 0f40 	tst.w	r2, #64	; 0x40
 800256e:	d00c      	beq.n	800258a <USB_ActivateEndpoint+0x94>
 8002570:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002574:	b292      	uxth	r2, r2
 8002576:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800257a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800257e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002582:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8002586:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 800258a:	78ca      	ldrb	r2, [r1, #3]
 800258c:	2a01      	cmp	r2, #1
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800258e:	7809      	ldrb	r1, [r1, #0]
 8002590:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8002594:	b292      	uxth	r2, r2
 8002596:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800259a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800259e:	bf18      	it	ne
 80025a0:	f082 0220 	eorne.w	r2, r2, #32
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80025a4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80025a8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80025ac:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return ret;
}
 80025b0:	bc70      	pop	{r4, r5, r6}
 80025b2:	4770      	bx	lr
      wEpRegVal |= USB_EP_CONTROL;
 80025b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
      break;
 80025b8:	e7b0      	b.n	800251c <USB_ActivateEndpoint+0x26>
      wEpRegVal |= USB_EP_INTERRUPT;
 80025ba:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
  HAL_StatusTypeDef ret = HAL_OK;
 80025be:	2000      	movs	r0, #0
      break;
 80025c0:	e7ac      	b.n	800251c <USB_ActivateEndpoint+0x26>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80025c2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
  HAL_StatusTypeDef ret = HAL_OK;
 80025c6:	2000      	movs	r0, #0
      break;
 80025c8:	e7a8      	b.n	800251c <USB_ActivateEndpoint+0x26>
      ret = HAL_ERROR;
 80025ca:	2001      	movs	r0, #1
 80025cc:	e7a6      	b.n	800251c <USB_ActivateEndpoint+0x26>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80025ce:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 80025d2:	b2ad      	uxth	r5, r5
 80025d4:	780a      	ldrb	r2, [r1, #0]
 80025d6:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 80025da:	f502 6281 	add.w	r2, r2, #1032	; 0x408
 80025de:	88cc      	ldrh	r4, [r1, #6]
 80025e0:	0864      	lsrs	r4, r4, #1
 80025e2:	0064      	lsls	r4, r4, #1
 80025e4:	5354      	strh	r4, [r2, r5]
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80025e6:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 80025ea:	b2ad      	uxth	r5, r5
 80025ec:	780a      	ldrb	r2, [r1, #0]
 80025ee:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 80025f2:	f202 420c 	addw	r2, r2, #1036	; 0x40c
 80025f6:	690c      	ldr	r4, [r1, #16]
 80025f8:	bb84      	cbnz	r4, 800265c <USB_ActivateEndpoint+0x166>
 80025fa:	5b54      	ldrh	r4, [r2, r5]
 80025fc:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
 8002600:	0424      	lsls	r4, r4, #16
 8002602:	0c24      	lsrs	r4, r4, #16
 8002604:	5354      	strh	r4, [r2, r5]
 8002606:	5b54      	ldrh	r4, [r2, r5]
 8002608:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 800260c:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 8002610:	b2a4      	uxth	r4, r4
 8002612:	5354      	strh	r4, [r2, r5]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002614:	780c      	ldrb	r4, [r1, #0]
 8002616:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800261a:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 800261e:	d00c      	beq.n	800263a <USB_ActivateEndpoint+0x144>
 8002620:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002624:	b292      	uxth	r2, r2
 8002626:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800262a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800262e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002632:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002636:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800263a:	7809      	ldrb	r1, [r1, #0]
 800263c:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8002640:	b292      	uxth	r2, r2
 8002642:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002646:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800264a:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 800264e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002652:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002656:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 800265a:	e7a9      	b.n	80025b0 <USB_ActivateEndpoint+0xba>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800265c:	2c3e      	cmp	r4, #62	; 0x3e
 800265e:	d808      	bhi.n	8002672 <USB_ActivateEndpoint+0x17c>
 8002660:	0866      	lsrs	r6, r4, #1
 8002662:	f014 0f01 	tst.w	r4, #1
 8002666:	bf18      	it	ne
 8002668:	3601      	addne	r6, #1
 800266a:	02b6      	lsls	r6, r6, #10
 800266c:	b2b6      	uxth	r6, r6
 800266e:	5356      	strh	r6, [r2, r5]
 8002670:	e7d0      	b.n	8002614 <USB_ActivateEndpoint+0x11e>
 8002672:	0966      	lsrs	r6, r4, #5
 8002674:	f014 0f1f 	tst.w	r4, #31
 8002678:	bf08      	it	eq
 800267a:	f106 36ff 	addeq.w	r6, r6, #4294967295
 800267e:	ea6f 64c6 	mvn.w	r4, r6, lsl #27
 8002682:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 8002686:	b2a4      	uxth	r4, r4
 8002688:	5354      	strh	r4, [r2, r5]
 800268a:	e7c3      	b.n	8002614 <USB_ActivateEndpoint+0x11e>
    PCD_SET_EP_DBUF(USBx, ep->num);
 800268c:	780c      	ldrb	r4, [r1, #0]
 800268e:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002692:	b292      	uxth	r2, r2
 8002694:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002698:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800269c:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 80026a0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80026a4:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80026a8:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 80026ac:	b2ad      	uxth	r5, r5
 80026ae:	780a      	ldrb	r2, [r1, #0]
 80026b0:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 80026b4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80026b8:	890c      	ldrh	r4, [r1, #8]
 80026ba:	0864      	lsrs	r4, r4, #1
 80026bc:	0064      	lsls	r4, r4, #1
 80026be:	5354      	strh	r4, [r2, r5]
 80026c0:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 80026c4:	b2ad      	uxth	r5, r5
 80026c6:	780a      	ldrb	r2, [r1, #0]
 80026c8:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 80026cc:	f502 6281 	add.w	r2, r2, #1032	; 0x408
 80026d0:	894c      	ldrh	r4, [r1, #10]
 80026d2:	0864      	lsrs	r4, r4, #1
 80026d4:	0064      	lsls	r4, r4, #1
 80026d6:	5354      	strh	r4, [r2, r5]
    if (ep->is_in == 0U)
 80026d8:	784a      	ldrb	r2, [r1, #1]
 80026da:	2a00      	cmp	r2, #0
 80026dc:	d140      	bne.n	8002760 <USB_ActivateEndpoint+0x26a>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80026de:	780c      	ldrb	r4, [r1, #0]
 80026e0:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80026e4:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 80026e8:	d00c      	beq.n	8002704 <USB_ActivateEndpoint+0x20e>
 80026ea:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80026ee:	b292      	uxth	r2, r2
 80026f0:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80026f4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80026f8:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80026fc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002700:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002704:	780c      	ldrb	r4, [r1, #0]
 8002706:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800270a:	f012 0f40 	tst.w	r2, #64	; 0x40
 800270e:	d00c      	beq.n	800272a <USB_ActivateEndpoint+0x234>
 8002710:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002714:	b292      	uxth	r2, r2
 8002716:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800271a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800271e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002722:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8002726:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800272a:	780d      	ldrb	r5, [r1, #0]
 800272c:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 8002730:	b292      	uxth	r2, r2
 8002732:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002736:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800273a:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 800273e:	f248 0480 	movw	r4, #32896	; 0x8080
 8002742:	4322      	orrs	r2, r4
 8002744:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002748:	7809      	ldrb	r1, [r1, #0]
 800274a:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 800274e:	b292      	uxth	r2, r2
 8002750:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002754:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002758:	4322      	orrs	r2, r4
 800275a:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 800275e:	e727      	b.n	80025b0 <USB_ActivateEndpoint+0xba>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002760:	780c      	ldrb	r4, [r1, #0]
 8002762:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002766:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 800276a:	d00c      	beq.n	8002786 <USB_ActivateEndpoint+0x290>
 800276c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002770:	b292      	uxth	r2, r2
 8002772:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002776:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800277a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800277e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002782:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002786:	780c      	ldrb	r4, [r1, #0]
 8002788:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800278c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002790:	d00c      	beq.n	80027ac <USB_ActivateEndpoint+0x2b6>
 8002792:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002796:	b292      	uxth	r2, r2
 8002798:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800279c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80027a0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80027a4:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80027a8:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 80027ac:	78ca      	ldrb	r2, [r1, #3]
 80027ae:	2a01      	cmp	r2, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80027b0:	780c      	ldrb	r4, [r1, #0]
 80027b2:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80027b6:	b292      	uxth	r2, r2
 80027b8:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80027bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027c0:	bf18      	it	ne
 80027c2:	f082 0220 	eorne.w	r2, r2, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80027c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80027ca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80027ce:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80027d2:	7809      	ldrb	r1, [r1, #0]
 80027d4:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80027d8:	b292      	uxth	r2, r2
 80027da:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80027de:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80027e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80027e6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80027ea:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 80027ee:	e6df      	b.n	80025b0 <USB_ActivateEndpoint+0xba>

080027f0 <USB_DeactivateEndpoint>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 80027f0:	7b0b      	ldrb	r3, [r1, #12]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d146      	bne.n	8002884 <USB_DeactivateEndpoint+0x94>
  {
    if (ep->is_in != 0U)
 80027f6:	784b      	ldrb	r3, [r1, #1]
 80027f8:	b313      	cbz	r3, 8002840 <USB_DeactivateEndpoint+0x50>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80027fa:	780a      	ldrb	r2, [r1, #0]
 80027fc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002800:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002804:	d00c      	beq.n	8002820 <USB_DeactivateEndpoint+0x30>
 8002806:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800280a:	b29b      	uxth	r3, r3
 800280c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002810:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002814:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002818:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800281c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002820:	780a      	ldrb	r2, [r1, #0]
 8002822:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002826:	b29b      	uxth	r3, r3
 8002828:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800282c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002830:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002834:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002838:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return HAL_OK;
}
 800283c:	2000      	movs	r0, #0
 800283e:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002840:	780a      	ldrb	r2, [r1, #0]
 8002842:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002846:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800284a:	d00c      	beq.n	8002866 <USB_DeactivateEndpoint+0x76>
 800284c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002850:	b29b      	uxth	r3, r3
 8002852:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002856:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800285a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800285e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002862:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002866:	780a      	ldrb	r2, [r1, #0]
 8002868:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800286c:	b29b      	uxth	r3, r3
 800286e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002872:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002876:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800287a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800287e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8002882:	e7db      	b.n	800283c <USB_DeactivateEndpoint+0x4c>
{
 8002884:	b410      	push	{r4}
    if (ep->is_in == 0U)
 8002886:	784b      	ldrb	r3, [r1, #1]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d14e      	bne.n	800292a <USB_DeactivateEndpoint+0x13a>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800288c:	780a      	ldrb	r2, [r1, #0]
 800288e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002892:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8002896:	d00c      	beq.n	80028b2 <USB_DeactivateEndpoint+0xc2>
 8002898:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800289c:	b29b      	uxth	r3, r3
 800289e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80028aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028ae:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80028b2:	780a      	ldrb	r2, [r1, #0]
 80028b4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80028b8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80028bc:	d00c      	beq.n	80028d8 <USB_DeactivateEndpoint+0xe8>
 80028be:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80028c2:	b29b      	uxth	r3, r3
 80028c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028d0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80028d4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 80028d8:	780a      	ldrb	r2, [r1, #0]
 80028da:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80028de:	b29b      	uxth	r3, r3
 80028e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028ec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80028f0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80028f4:	780c      	ldrb	r4, [r1, #0]
 80028f6:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 80028fa:	b29b      	uxth	r3, r3
 80028fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002900:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002904:	f248 0280 	movw	r2, #32896	; 0x8080
 8002908:	4313      	orrs	r3, r2
 800290a:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800290e:	7809      	ldrb	r1, [r1, #0]
 8002910:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8002914:	b29b      	uxth	r3, r3
 8002916:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800291a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800291e:	4313      	orrs	r3, r2
 8002920:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
}
 8002924:	2000      	movs	r0, #0
 8002926:	bc10      	pop	{r4}
 8002928:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800292a:	780a      	ldrb	r2, [r1, #0]
 800292c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002930:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8002934:	d00c      	beq.n	8002950 <USB_DeactivateEndpoint+0x160>
 8002936:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800293a:	b29b      	uxth	r3, r3
 800293c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002940:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002944:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002948:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800294c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002950:	780a      	ldrb	r2, [r1, #0]
 8002952:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002956:	f013 0f40 	tst.w	r3, #64	; 0x40
 800295a:	d00c      	beq.n	8002976 <USB_DeactivateEndpoint+0x186>
 800295c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002960:	b29b      	uxth	r3, r3
 8002962:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002966:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800296a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800296e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002972:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8002976:	780a      	ldrb	r2, [r1, #0]
 8002978:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800297c:	b29b      	uxth	r3, r3
 800297e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002982:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002986:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800298a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800298e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002992:	780c      	ldrb	r4, [r1, #0]
 8002994:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8002998:	b29b      	uxth	r3, r3
 800299a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800299e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029a2:	f248 0280 	movw	r2, #32896	; 0x8080
 80029a6:	4313      	orrs	r3, r2
 80029a8:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80029ac:	7809      	ldrb	r1, [r1, #0]
 80029ae:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 80029b2:	b29b      	uxth	r3, r3
 80029b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80029b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029bc:	4313      	orrs	r3, r2
 80029be:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
 80029c2:	e7af      	b.n	8002924 <USB_DeactivateEndpoint+0x134>

080029c4 <USB_EPSetStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 80029c4:	784b      	ldrb	r3, [r1, #1]
 80029c6:	b18b      	cbz	r3, 80029ec <USB_EPSetStall+0x28>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80029c8:	780a      	ldrb	r2, [r1, #0]
 80029ca:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80029ce:	b29b      	uxth	r3, r3
 80029d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029d8:	f083 0310 	eor.w	r3, r3, #16
 80029dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029e4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
  }

  return HAL_OK;
}
 80029e8:	2000      	movs	r0, #0
 80029ea:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80029ec:	780a      	ldrb	r2, [r1, #0]
 80029ee:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80029f2:	b29b      	uxth	r3, r3
 80029f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80029f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029fc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002a00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a08:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8002a0c:	e7ec      	b.n	80029e8 <USB_EPSetStall+0x24>

08002a0e <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8002a0e:	7b0b      	ldrb	r3, [r1, #12]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d14b      	bne.n	8002aac <USB_EPClearStall+0x9e>
  {
    if (ep->is_in != 0U)
 8002a14:	784b      	ldrb	r3, [r1, #1]
 8002a16:	b333      	cbz	r3, 8002a66 <USB_EPClearStall+0x58>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002a18:	780a      	ldrb	r2, [r1, #0]
 8002a1a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002a1e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002a22:	d00c      	beq.n	8002a3e <USB_EPClearStall+0x30>
 8002a24:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002a28:	b29b      	uxth	r3, r3
 8002a2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a36:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002a3a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8002a3e:	78cb      	ldrb	r3, [r1, #3]
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d033      	beq.n	8002aac <USB_EPClearStall+0x9e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002a44:	780a      	ldrb	r2, [r1, #0]
 8002a46:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002a4a:	b29b      	uxth	r3, r3
 8002a4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a54:	f083 0320 	eor.w	r3, r3, #32
 8002a58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a60:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8002a64:	e022      	b.n	8002aac <USB_EPClearStall+0x9e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002a66:	780a      	ldrb	r2, [r1, #0]
 8002a68:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002a6c:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8002a70:	d00c      	beq.n	8002a8c <USB_EPClearStall+0x7e>
 8002a72:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002a76:	b29b      	uxth	r3, r3
 8002a78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a80:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a88:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002a8c:	780a      	ldrb	r2, [r1, #0]
 8002a8e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002a92:	b29b      	uxth	r3, r3
 8002a94:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a9c:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002aa0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002aa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002aa8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 8002aac:	2000      	movs	r0, #0
 8002aae:	4770      	bx	lr

08002ab0 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 8002ab0:	b911      	cbnz	r1, 8002ab8 <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8002ab2:	2380      	movs	r3, #128	; 0x80
 8002ab4:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }

  return HAL_OK;
}
 8002ab8:	2000      	movs	r0, #0
 8002aba:	4770      	bx	lr

08002abc <USB_DevConnect>:
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8002abc:	2000      	movs	r0, #0
 8002abe:	4770      	bx	lr

08002ac0 <USB_DevDisconnect>:
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8002ac0:	2000      	movs	r0, #0
 8002ac2:	4770      	bx	lr

08002ac4 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8002ac4:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 8002ac8:	b280      	uxth	r0, r0
 8002aca:	4770      	bx	lr

08002acc <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8002acc:	2000      	movs	r0, #0
 8002ace:	4770      	bx	lr

08002ad0 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8002ad0:	b410      	push	{r4}
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8002ad2:	3301      	adds	r3, #1
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8002ad4:	eb00 0442 	add.w	r4, r0, r2, lsl #1

  for (i = n; i != 0U; i--)
 8002ad8:	085b      	lsrs	r3, r3, #1
 8002ada:	d010      	beq.n	8002afe <USB_WritePMA+0x2e>
 8002adc:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002ae0:	4622      	mov	r2, r4
 8002ae2:	3102      	adds	r1, #2
 8002ae4:	eb04 0483 	add.w	r4, r4, r3, lsl #2
  {
    temp1 = *pBuf;
    pBuf++;
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8002ae8:	f811 0c01 	ldrb.w	r0, [r1, #-1]
    temp1 = *pBuf;
 8002aec:	f811 3c02 	ldrb.w	r3, [r1, #-2]
    *pdwVal = (uint16_t)temp2;
 8002af0:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8002af4:	f822 3b04 	strh.w	r3, [r2], #4
  for (i = n; i != 0U; i--)
 8002af8:	3102      	adds	r1, #2
 8002afa:	4294      	cmp	r4, r2
 8002afc:	d1f4      	bne.n	8002ae8 <USB_WritePMA+0x18>
    pdwVal++;
#endif

    pBuf++;
  }
}
 8002afe:	bc10      	pop	{r4}
 8002b00:	4770      	bx	lr

08002b02 <USB_EPStartXfer>:
{
 8002b02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b04:	4605      	mov	r5, r0
 8002b06:	460c      	mov	r4, r1
  if (ep->is_in == 1U)
 8002b08:	784b      	ldrb	r3, [r1, #1]
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d035      	beq.n	8002b7a <USB_EPStartXfer+0x78>
    if (ep->doublebuffer == 0U)
 8002b0e:	7b0a      	ldrb	r2, [r1, #12]
 8002b10:	2a00      	cmp	r2, #0
 8002b12:	f040 821b 	bne.w	8002f4c <USB_EPStartXfer+0x44a>
      if (ep->xfer_len > ep->maxpacket)
 8002b16:	698a      	ldr	r2, [r1, #24]
 8002b18:	690b      	ldr	r3, [r1, #16]
 8002b1a:	429a      	cmp	r2, r3
        ep->xfer_len -= len;
 8002b1c:	bf86      	itte	hi
 8002b1e:	1ad1      	subhi	r1, r2, r3
        len = ep->maxpacket;
 8002b20:	461a      	movhi	r2, r3
        ep->xfer_len = 0U;
 8002b22:	2100      	movls	r1, #0
 8002b24:	61a1      	str	r1, [r4, #24]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8002b26:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002b2a:	b29b      	uxth	r3, r3
 8002b2c:	f200 400c 	addw	r0, r0, #1036	; 0x40c
 8002b30:	4418      	add	r0, r3
 8002b32:	7823      	ldrb	r3, [r4, #0]
 8002b34:	011b      	lsls	r3, r3, #4
 8002b36:	2a00      	cmp	r2, #0
 8002b38:	f040 81f0 	bne.w	8002f1c <USB_EPStartXfer+0x41a>
 8002b3c:	5ac2      	ldrh	r2, [r0, r3]
 8002b3e:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8002b42:	0412      	lsls	r2, r2, #16
 8002b44:	0c12      	lsrs	r2, r2, #16
 8002b46:	52c2      	strh	r2, [r0, r3]
 8002b48:	5ac2      	ldrh	r2, [r0, r3]
 8002b4a:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8002b4e:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002b52:	b292      	uxth	r2, r2
 8002b54:	52c2      	strh	r2, [r0, r3]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002b56:	7822      	ldrb	r2, [r4, #0]
 8002b58:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b66:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002b6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b72:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
  return HAL_OK;
 8002b76:	2000      	movs	r0, #0
}
 8002b78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (ep->xfer_len > ep->maxpacket)
 8002b7a:	690a      	ldr	r2, [r1, #16]
 8002b7c:	698e      	ldr	r6, [r1, #24]
 8002b7e:	4296      	cmp	r6, r2
 8002b80:	bf28      	it	cs
 8002b82:	4616      	movcs	r6, r2
    if (ep->doublebuffer == 0U)
 8002b84:	7b0b      	ldrb	r3, [r1, #12]
 8002b86:	b35b      	cbz	r3, 8002be0 <USB_EPStartXfer+0xde>
      if (ep->type == EP_TYPE_BULK)
 8002b88:	78cb      	ldrb	r3, [r1, #3]
 8002b8a:	2b02      	cmp	r3, #2
 8002b8c:	d049      	beq.n	8002c22 <USB_EPStartXfer+0x120>
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8002b8e:	780b      	ldrb	r3, [r1, #0]
 8002b90:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002b94:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002b98:	f000 81a3 	beq.w	8002ee2 <USB_EPStartXfer+0x3e0>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002b9c:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002ba0:	b291      	uxth	r1, r2
 8002ba2:	f200 420c 	addw	r2, r0, #1036	; 0x40c
 8002ba6:	440a      	add	r2, r1
 8002ba8:	011b      	lsls	r3, r3, #4
 8002baa:	b2b1      	uxth	r1, r6
 8002bac:	52d1      	strh	r1, [r2, r3]
          pmabuffer = ep->pmaaddr1;
 8002bae:	8962      	ldrh	r2, [r4, #10]
        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002bb0:	b2b3      	uxth	r3, r6
 8002bb2:	6961      	ldr	r1, [r4, #20]
 8002bb4:	4628      	mov	r0, r5
 8002bb6:	f7ff ff8b 	bl	8002ad0 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8002bba:	7863      	ldrb	r3, [r4, #1]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	f040 819b 	bne.w	8002ef8 <USB_EPStartXfer+0x3f6>
 8002bc2:	7822      	ldrb	r2, [r4, #0]
 8002bc4:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bd6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002bda:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 8002bde:	e00e      	b.n	8002bfe <USB_EPStartXfer+0xfc>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8002be0:	b2b6      	uxth	r6, r6
 8002be2:	4633      	mov	r3, r6
 8002be4:	88ca      	ldrh	r2, [r1, #6]
 8002be6:	6949      	ldr	r1, [r1, #20]
 8002be8:	f7ff ff72 	bl	8002ad0 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8002bec:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8002bf0:	b299      	uxth	r1, r3
 8002bf2:	7822      	ldrb	r2, [r4, #0]
 8002bf4:	0112      	lsls	r2, r2, #4
 8002bf6:	f205 4304 	addw	r3, r5, #1028	; 0x404
 8002bfa:	440b      	add	r3, r1
 8002bfc:	52d6      	strh	r6, [r2, r3]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8002bfe:	7822      	ldrb	r2, [r4, #0]
 8002c00:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8002c04:	b29b      	uxth	r3, r3
 8002c06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c0e:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8002c12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c1a:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
  return HAL_OK;
 8002c1e:	2000      	movs	r0, #0
 8002c20:	e7aa      	b.n	8002b78 <USB_EPStartXfer+0x76>
        if (ep->xfer_len_db > ep->maxpacket)
 8002c22:	6a0b      	ldr	r3, [r1, #32]
 8002c24:	429a      	cmp	r2, r3
 8002c26:	f080 813e 	bcs.w	8002ea6 <USB_EPStartXfer+0x3a4>
          PCD_SET_EP_DBUF(USBx, ep->num);
 8002c2a:	780a      	ldrb	r2, [r1, #0]
 8002c2c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c3a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8002c3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c42:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
          ep->xfer_len_db -= len;
 8002c46:	6a0b      	ldr	r3, [r1, #32]
 8002c48:	1b9b      	subs	r3, r3, r6
 8002c4a:	620b      	str	r3, [r1, #32]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8002c4c:	780b      	ldrb	r3, [r1, #0]
 8002c4e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002c52:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002c56:	f000 8093 	beq.w	8002d80 <USB_EPStartXfer+0x27e>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002c5a:	784a      	ldrb	r2, [r1, #1]
 8002c5c:	bb6a      	cbnz	r2, 8002cba <USB_EPStartXfer+0x1b8>
 8002c5e:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002c62:	b292      	uxth	r2, r2
 8002c64:	f200 410c 	addw	r1, r0, #1036	; 0x40c
 8002c68:	4411      	add	r1, r2
 8002c6a:	011b      	lsls	r3, r3, #4
 8002c6c:	b96e      	cbnz	r6, 8002c8a <USB_EPStartXfer+0x188>
 8002c6e:	5aca      	ldrh	r2, [r1, r3]
 8002c70:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8002c74:	0412      	lsls	r2, r2, #16
 8002c76:	0c12      	lsrs	r2, r2, #16
 8002c78:	52ca      	strh	r2, [r1, r3]
 8002c7a:	5aca      	ldrh	r2, [r1, r3]
 8002c7c:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8002c80:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002c84:	b292      	uxth	r2, r2
 8002c86:	52ca      	strh	r2, [r1, r3]
 8002c88:	e019      	b.n	8002cbe <USB_EPStartXfer+0x1bc>
 8002c8a:	2e3e      	cmp	r6, #62	; 0x3e
 8002c8c:	d808      	bhi.n	8002ca0 <USB_EPStartXfer+0x19e>
 8002c8e:	0872      	lsrs	r2, r6, #1
 8002c90:	f016 0f01 	tst.w	r6, #1
 8002c94:	bf18      	it	ne
 8002c96:	3201      	addne	r2, #1
 8002c98:	0292      	lsls	r2, r2, #10
 8002c9a:	b292      	uxth	r2, r2
 8002c9c:	52ca      	strh	r2, [r1, r3]
 8002c9e:	e00e      	b.n	8002cbe <USB_EPStartXfer+0x1bc>
 8002ca0:	0972      	lsrs	r2, r6, #5
 8002ca2:	f016 0f1f 	tst.w	r6, #31
 8002ca6:	bf08      	it	eq
 8002ca8:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8002cac:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8002cb0:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002cb4:	b292      	uxth	r2, r2
 8002cb6:	52ca      	strh	r2, [r1, r3]
 8002cb8:	e001      	b.n	8002cbe <USB_EPStartXfer+0x1bc>
 8002cba:	2a01      	cmp	r2, #1
 8002cbc:	d02a      	beq.n	8002d14 <USB_EPStartXfer+0x212>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002cbe:	b2b3      	uxth	r3, r6
 8002cc0:	8962      	ldrh	r2, [r4, #10]
 8002cc2:	6961      	ldr	r1, [r4, #20]
 8002cc4:	4628      	mov	r0, r5
 8002cc6:	f7ff ff03 	bl	8002ad0 <USB_WritePMA>
            ep->xfer_buff += len;
 8002cca:	6963      	ldr	r3, [r4, #20]
 8002ccc:	4433      	add	r3, r6
 8002cce:	6163      	str	r3, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 8002cd0:	6a23      	ldr	r3, [r4, #32]
 8002cd2:	6922      	ldr	r2, [r4, #16]
 8002cd4:	4293      	cmp	r3, r2
              ep->xfer_len_db -= len;
 8002cd6:	bf86      	itte	hi
 8002cd8:	1b9a      	subhi	r2, r3, r6
 8002cda:	4633      	movhi	r3, r6
              ep->xfer_len_db = 0U;
 8002cdc:	2200      	movls	r2, #0
 8002cde:	6222      	str	r2, [r4, #32]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002ce0:	7862      	ldrb	r2, [r4, #1]
 8002ce2:	2a00      	cmp	r2, #0
 8002ce4:	d138      	bne.n	8002d58 <USB_EPStartXfer+0x256>
 8002ce6:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8002cea:	b292      	uxth	r2, r2
 8002cec:	7820      	ldrb	r0, [r4, #0]
 8002cee:	0100      	lsls	r0, r0, #4
 8002cf0:	f205 4104 	addw	r1, r5, #1028	; 0x404
 8002cf4:	440a      	add	r2, r1
 8002cf6:	b9bb      	cbnz	r3, 8002d28 <USB_EPStartXfer+0x226>
 8002cf8:	5a81      	ldrh	r1, [r0, r2]
 8002cfa:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 8002cfe:	0409      	lsls	r1, r1, #16
 8002d00:	0c09      	lsrs	r1, r1, #16
 8002d02:	5281      	strh	r1, [r0, r2]
 8002d04:	5a81      	ldrh	r1, [r0, r2]
 8002d06:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8002d0a:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8002d0e:	b289      	uxth	r1, r1
 8002d10:	5281      	strh	r1, [r0, r2]
 8002d12:	e023      	b.n	8002d5c <USB_EPStartXfer+0x25a>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002d14:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002d18:	b291      	uxth	r1, r2
 8002d1a:	f200 420c 	addw	r2, r0, #1036	; 0x40c
 8002d1e:	440a      	add	r2, r1
 8002d20:	011b      	lsls	r3, r3, #4
 8002d22:	b2b1      	uxth	r1, r6
 8002d24:	52d1      	strh	r1, [r2, r3]
 8002d26:	e7ca      	b.n	8002cbe <USB_EPStartXfer+0x1bc>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002d28:	2b3e      	cmp	r3, #62	; 0x3e
 8002d2a:	d808      	bhi.n	8002d3e <USB_EPStartXfer+0x23c>
 8002d2c:	0859      	lsrs	r1, r3, #1
 8002d2e:	f013 0f01 	tst.w	r3, #1
 8002d32:	bf18      	it	ne
 8002d34:	3101      	addne	r1, #1
 8002d36:	0289      	lsls	r1, r1, #10
 8002d38:	b289      	uxth	r1, r1
 8002d3a:	5281      	strh	r1, [r0, r2]
 8002d3c:	e00e      	b.n	8002d5c <USB_EPStartXfer+0x25a>
 8002d3e:	0959      	lsrs	r1, r3, #5
 8002d40:	f013 0f1f 	tst.w	r3, #31
 8002d44:	bf08      	it	eq
 8002d46:	f101 31ff 	addeq.w	r1, r1, #4294967295
 8002d4a:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 8002d4e:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8002d52:	b289      	uxth	r1, r1
 8002d54:	5281      	strh	r1, [r0, r2]
 8002d56:	e001      	b.n	8002d5c <USB_EPStartXfer+0x25a>
 8002d58:	2a01      	cmp	r2, #1
 8002d5a:	d006      	beq.n	8002d6a <USB_EPStartXfer+0x268>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002d5c:	b29b      	uxth	r3, r3
 8002d5e:	8922      	ldrh	r2, [r4, #8]
 8002d60:	6961      	ldr	r1, [r4, #20]
 8002d62:	4628      	mov	r0, r5
 8002d64:	f7ff feb4 	bl	8002ad0 <USB_WritePMA>
 8002d68:	e749      	b.n	8002bfe <USB_EPStartXfer+0xfc>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002d6a:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8002d6e:	b290      	uxth	r0, r2
 8002d70:	7821      	ldrb	r1, [r4, #0]
 8002d72:	0109      	lsls	r1, r1, #4
 8002d74:	f205 4204 	addw	r2, r5, #1028	; 0x404
 8002d78:	4402      	add	r2, r0
 8002d7a:	b298      	uxth	r0, r3
 8002d7c:	5288      	strh	r0, [r1, r2]
 8002d7e:	e7ed      	b.n	8002d5c <USB_EPStartXfer+0x25a>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002d80:	784a      	ldrb	r2, [r1, #1]
 8002d82:	bb6a      	cbnz	r2, 8002de0 <USB_EPStartXfer+0x2de>
 8002d84:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002d88:	b292      	uxth	r2, r2
 8002d8a:	f200 4104 	addw	r1, r0, #1028	; 0x404
 8002d8e:	4411      	add	r1, r2
 8002d90:	011b      	lsls	r3, r3, #4
 8002d92:	b96e      	cbnz	r6, 8002db0 <USB_EPStartXfer+0x2ae>
 8002d94:	5aca      	ldrh	r2, [r1, r3]
 8002d96:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8002d9a:	0412      	lsls	r2, r2, #16
 8002d9c:	0c12      	lsrs	r2, r2, #16
 8002d9e:	52ca      	strh	r2, [r1, r3]
 8002da0:	5aca      	ldrh	r2, [r1, r3]
 8002da2:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8002da6:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002daa:	b292      	uxth	r2, r2
 8002dac:	52ca      	strh	r2, [r1, r3]
 8002dae:	e019      	b.n	8002de4 <USB_EPStartXfer+0x2e2>
 8002db0:	2e3e      	cmp	r6, #62	; 0x3e
 8002db2:	d808      	bhi.n	8002dc6 <USB_EPStartXfer+0x2c4>
 8002db4:	0872      	lsrs	r2, r6, #1
 8002db6:	f016 0f01 	tst.w	r6, #1
 8002dba:	bf18      	it	ne
 8002dbc:	3201      	addne	r2, #1
 8002dbe:	0292      	lsls	r2, r2, #10
 8002dc0:	b292      	uxth	r2, r2
 8002dc2:	52ca      	strh	r2, [r1, r3]
 8002dc4:	e00e      	b.n	8002de4 <USB_EPStartXfer+0x2e2>
 8002dc6:	0972      	lsrs	r2, r6, #5
 8002dc8:	f016 0f1f 	tst.w	r6, #31
 8002dcc:	bf08      	it	eq
 8002dce:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8002dd2:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8002dd6:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002dda:	b292      	uxth	r2, r2
 8002ddc:	52ca      	strh	r2, [r1, r3]
 8002dde:	e001      	b.n	8002de4 <USB_EPStartXfer+0x2e2>
 8002de0:	2a01      	cmp	r2, #1
 8002de2:	d02a      	beq.n	8002e3a <USB_EPStartXfer+0x338>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002de4:	b2b3      	uxth	r3, r6
 8002de6:	8922      	ldrh	r2, [r4, #8]
 8002de8:	6961      	ldr	r1, [r4, #20]
 8002dea:	4628      	mov	r0, r5
 8002dec:	f7ff fe70 	bl	8002ad0 <USB_WritePMA>
            ep->xfer_buff += len;
 8002df0:	6963      	ldr	r3, [r4, #20]
 8002df2:	4433      	add	r3, r6
 8002df4:	6163      	str	r3, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 8002df6:	6a23      	ldr	r3, [r4, #32]
 8002df8:	6922      	ldr	r2, [r4, #16]
 8002dfa:	4293      	cmp	r3, r2
              ep->xfer_len_db -= len;
 8002dfc:	bf86      	itte	hi
 8002dfe:	1b9a      	subhi	r2, r3, r6
 8002e00:	4633      	movhi	r3, r6
              ep->xfer_len_db = 0U;
 8002e02:	2200      	movls	r2, #0
 8002e04:	6222      	str	r2, [r4, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002e06:	7862      	ldrb	r2, [r4, #1]
 8002e08:	2a00      	cmp	r2, #0
 8002e0a:	d138      	bne.n	8002e7e <USB_EPStartXfer+0x37c>
 8002e0c:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8002e10:	b292      	uxth	r2, r2
 8002e12:	7820      	ldrb	r0, [r4, #0]
 8002e14:	0100      	lsls	r0, r0, #4
 8002e16:	f205 410c 	addw	r1, r5, #1036	; 0x40c
 8002e1a:	440a      	add	r2, r1
 8002e1c:	b9bb      	cbnz	r3, 8002e4e <USB_EPStartXfer+0x34c>
 8002e1e:	5a81      	ldrh	r1, [r0, r2]
 8002e20:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 8002e24:	0409      	lsls	r1, r1, #16
 8002e26:	0c09      	lsrs	r1, r1, #16
 8002e28:	5281      	strh	r1, [r0, r2]
 8002e2a:	5a81      	ldrh	r1, [r0, r2]
 8002e2c:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8002e30:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8002e34:	b289      	uxth	r1, r1
 8002e36:	5281      	strh	r1, [r0, r2]
 8002e38:	e023      	b.n	8002e82 <USB_EPStartXfer+0x380>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002e3a:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002e3e:	b291      	uxth	r1, r2
 8002e40:	f200 4204 	addw	r2, r0, #1028	; 0x404
 8002e44:	440a      	add	r2, r1
 8002e46:	011b      	lsls	r3, r3, #4
 8002e48:	b2b1      	uxth	r1, r6
 8002e4a:	52d1      	strh	r1, [r2, r3]
 8002e4c:	e7ca      	b.n	8002de4 <USB_EPStartXfer+0x2e2>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002e4e:	2b3e      	cmp	r3, #62	; 0x3e
 8002e50:	d808      	bhi.n	8002e64 <USB_EPStartXfer+0x362>
 8002e52:	0859      	lsrs	r1, r3, #1
 8002e54:	f013 0f01 	tst.w	r3, #1
 8002e58:	bf18      	it	ne
 8002e5a:	3101      	addne	r1, #1
 8002e5c:	0289      	lsls	r1, r1, #10
 8002e5e:	b289      	uxth	r1, r1
 8002e60:	5281      	strh	r1, [r0, r2]
 8002e62:	e00e      	b.n	8002e82 <USB_EPStartXfer+0x380>
 8002e64:	0959      	lsrs	r1, r3, #5
 8002e66:	f013 0f1f 	tst.w	r3, #31
 8002e6a:	bf08      	it	eq
 8002e6c:	f101 31ff 	addeq.w	r1, r1, #4294967295
 8002e70:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 8002e74:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8002e78:	b289      	uxth	r1, r1
 8002e7a:	5281      	strh	r1, [r0, r2]
 8002e7c:	e001      	b.n	8002e82 <USB_EPStartXfer+0x380>
 8002e7e:	2a01      	cmp	r2, #1
 8002e80:	d006      	beq.n	8002e90 <USB_EPStartXfer+0x38e>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002e82:	b29b      	uxth	r3, r3
 8002e84:	8962      	ldrh	r2, [r4, #10]
 8002e86:	6961      	ldr	r1, [r4, #20]
 8002e88:	4628      	mov	r0, r5
 8002e8a:	f7ff fe21 	bl	8002ad0 <USB_WritePMA>
 8002e8e:	e6b6      	b.n	8002bfe <USB_EPStartXfer+0xfc>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002e90:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8002e94:	b290      	uxth	r0, r2
 8002e96:	7821      	ldrb	r1, [r4, #0]
 8002e98:	0109      	lsls	r1, r1, #4
 8002e9a:	f205 420c 	addw	r2, r5, #1036	; 0x40c
 8002e9e:	4402      	add	r2, r0
 8002ea0:	b298      	uxth	r0, r3
 8002ea2:	5288      	strh	r0, [r1, r2]
 8002ea4:	e7ed      	b.n	8002e82 <USB_EPStartXfer+0x380>
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8002ea6:	7809      	ldrb	r1, [r1, #0]
 8002ea8:	f830 2021 	ldrh.w	r2, [r0, r1, lsl #2]
 8002eac:	b292      	uxth	r2, r2
 8002eae:	f422 42e2 	bic.w	r2, r2, #28928	; 0x7100
 8002eb2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002eb6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002eba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002ebe:	f820 2021 	strh.w	r2, [r0, r1, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8002ec2:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002ec6:	b290      	uxth	r0, r2
 8002ec8:	7821      	ldrb	r1, [r4, #0]
 8002eca:	0109      	lsls	r1, r1, #4
 8002ecc:	f205 4204 	addw	r2, r5, #1028	; 0x404
 8002ed0:	4402      	add	r2, r0
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	528b      	strh	r3, [r1, r2]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002ed6:	8922      	ldrh	r2, [r4, #8]
 8002ed8:	6961      	ldr	r1, [r4, #20]
 8002eda:	4628      	mov	r0, r5
 8002edc:	f7ff fdf8 	bl	8002ad0 <USB_WritePMA>
 8002ee0:	e68d      	b.n	8002bfe <USB_EPStartXfer+0xfc>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002ee2:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002ee6:	b291      	uxth	r1, r2
 8002ee8:	f200 4204 	addw	r2, r0, #1028	; 0x404
 8002eec:	440a      	add	r2, r1
 8002eee:	011b      	lsls	r3, r3, #4
 8002ef0:	b2b1      	uxth	r1, r6
 8002ef2:	52d1      	strh	r1, [r2, r3]
          pmabuffer = ep->pmaaddr0;
 8002ef4:	8922      	ldrh	r2, [r4, #8]
 8002ef6:	e65b      	b.n	8002bb0 <USB_EPStartXfer+0xae>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	f47f ae80 	bne.w	8002bfe <USB_EPStartXfer+0xfc>
 8002efe:	7822      	ldrb	r2, [r4, #0]
 8002f00:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f0e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f16:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 8002f1a:	e670      	b.n	8002bfe <USB_EPStartXfer+0xfc>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8002f1c:	2a3e      	cmp	r2, #62	; 0x3e
 8002f1e:	d808      	bhi.n	8002f32 <USB_EPStartXfer+0x430>
 8002f20:	0851      	lsrs	r1, r2, #1
 8002f22:	f012 0f01 	tst.w	r2, #1
 8002f26:	bf18      	it	ne
 8002f28:	3101      	addne	r1, #1
 8002f2a:	0289      	lsls	r1, r1, #10
 8002f2c:	b289      	uxth	r1, r1
 8002f2e:	52c1      	strh	r1, [r0, r3]
 8002f30:	e611      	b.n	8002b56 <USB_EPStartXfer+0x54>
 8002f32:	0951      	lsrs	r1, r2, #5
 8002f34:	f012 0f1f 	tst.w	r2, #31
 8002f38:	bf08      	it	eq
 8002f3a:	f101 31ff 	addeq.w	r1, r1, #4294967295
 8002f3e:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 8002f42:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8002f46:	b289      	uxth	r1, r1
 8002f48:	52c1      	strh	r1, [r0, r3]
 8002f4a:	e604      	b.n	8002b56 <USB_EPStartXfer+0x54>
      if (ep->type == EP_TYPE_BULK)
 8002f4c:	78ca      	ldrb	r2, [r1, #3]
 8002f4e:	2a02      	cmp	r2, #2
 8002f50:	d03f      	beq.n	8002fd2 <USB_EPStartXfer+0x4d0>
      else if (ep->type == EP_TYPE_ISOC)
 8002f52:	2a01      	cmp	r2, #1
 8002f54:	f040 8118 	bne.w	8003188 <USB_EPStartXfer+0x686>
        if (ep->xfer_len > ep->maxpacket)
 8002f58:	698a      	ldr	r2, [r1, #24]
 8002f5a:	6909      	ldr	r1, [r1, #16]
 8002f5c:	428a      	cmp	r2, r1
          ep->xfer_len -= len;
 8002f5e:	bf86      	itte	hi
 8002f60:	1a50      	subhi	r0, r2, r1
          len = ep->maxpacket;
 8002f62:	460a      	movhi	r2, r1
          ep->xfer_len = 0U;
 8002f64:	2000      	movls	r0, #0
 8002f66:	61a0      	str	r0, [r4, #24]
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	f47f adf4 	bne.w	8002b56 <USB_EPStartXfer+0x54>
 8002f6e:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	7826      	ldrb	r6, [r4, #0]
 8002f76:	0136      	lsls	r6, r6, #4
 8002f78:	f205 4004 	addw	r0, r5, #1028	; 0x404
 8002f7c:	4418      	add	r0, r3
 8002f7e:	2a00      	cmp	r2, #0
 8002f80:	f040 80b7 	bne.w	80030f2 <USB_EPStartXfer+0x5f0>
 8002f84:	5a33      	ldrh	r3, [r6, r0]
 8002f86:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002f8a:	041b      	lsls	r3, r3, #16
 8002f8c:	0c1b      	lsrs	r3, r3, #16
 8002f8e:	5233      	strh	r3, [r6, r0]
 8002f90:	5a33      	ldrh	r3, [r6, r0]
 8002f92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	5233      	strh	r3, [r6, r0]
 8002f9e:	7863      	ldrb	r3, [r4, #1]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	f040 80e3 	bne.w	800316c <USB_EPStartXfer+0x66a>
 8002fa6:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8002faa:	b293      	uxth	r3, r2
 8002fac:	7821      	ldrb	r1, [r4, #0]
 8002fae:	0109      	lsls	r1, r1, #4
 8002fb0:	f205 420c 	addw	r2, r5, #1036	; 0x40c
 8002fb4:	441a      	add	r2, r3
 8002fb6:	5a8b      	ldrh	r3, [r1, r2]
 8002fb8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002fbc:	041b      	lsls	r3, r3, #16
 8002fbe:	0c1b      	lsrs	r3, r3, #16
 8002fc0:	528b      	strh	r3, [r1, r2]
 8002fc2:	5a8b      	ldrh	r3, [r1, r2]
 8002fc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002fc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002fcc:	b29b      	uxth	r3, r3
 8002fce:	528b      	strh	r3, [r1, r2]
 8002fd0:	e5c1      	b.n	8002b56 <USB_EPStartXfer+0x54>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d132      	bne.n	800303c <USB_EPStartXfer+0x53a>
 8002fd6:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002fda:	b29b      	uxth	r3, r3
 8002fdc:	780a      	ldrb	r2, [r1, #0]
 8002fde:	0112      	lsls	r2, r2, #4
 8002fe0:	f200 4104 	addw	r1, r0, #1028	; 0x404
 8002fe4:	440b      	add	r3, r1
 8002fe6:	6921      	ldr	r1, [r4, #16]
 8002fe8:	2900      	cmp	r1, #0
 8002fea:	d145      	bne.n	8003078 <USB_EPStartXfer+0x576>
 8002fec:	5ad1      	ldrh	r1, [r2, r3]
 8002fee:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 8002ff2:	0409      	lsls	r1, r1, #16
 8002ff4:	0c09      	lsrs	r1, r1, #16
 8002ff6:	52d1      	strh	r1, [r2, r3]
 8002ff8:	5ad1      	ldrh	r1, [r2, r3]
 8002ffa:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8002ffe:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8003002:	b289      	uxth	r1, r1
 8003004:	52d1      	strh	r1, [r2, r3]
 8003006:	7863      	ldrb	r3, [r4, #1]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d165      	bne.n	80030d8 <USB_EPStartXfer+0x5d6>
 800300c:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8003010:	b29b      	uxth	r3, r3
 8003012:	7822      	ldrb	r2, [r4, #0]
 8003014:	0112      	lsls	r2, r2, #4
 8003016:	f205 410c 	addw	r1, r5, #1036	; 0x40c
 800301a:	440b      	add	r3, r1
 800301c:	6921      	ldr	r1, [r4, #16]
 800301e:	2900      	cmp	r1, #0
 8003020:	d142      	bne.n	80030a8 <USB_EPStartXfer+0x5a6>
 8003022:	5ad1      	ldrh	r1, [r2, r3]
 8003024:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 8003028:	0409      	lsls	r1, r1, #16
 800302a:	0c09      	lsrs	r1, r1, #16
 800302c:	52d1      	strh	r1, [r2, r3]
 800302e:	5ad1      	ldrh	r1, [r2, r3]
 8003030:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8003034:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8003038:	b289      	uxth	r1, r1
 800303a:	52d1      	strh	r1, [r2, r3]
        if (ep->xfer_count != 0U)
 800303c:	69e3      	ldr	r3, [r4, #28]
 800303e:	2b00      	cmp	r3, #0
 8003040:	f43f ad89 	beq.w	8002b56 <USB_EPStartXfer+0x54>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8003044:	7822      	ldrb	r2, [r4, #0]
 8003046:	f835 1022 	ldrh.w	r1, [r5, r2, lsl #2]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800304a:	f244 0340 	movw	r3, #16448	; 0x4040
 800304e:	ea03 0001 	and.w	r0, r3, r1
 8003052:	438b      	bics	r3, r1
 8003054:	d002      	beq.n	800305c <USB_EPStartXfer+0x55a>
 8003056:	2800      	cmp	r0, #0
 8003058:	f47f ad7d 	bne.w	8002b56 <USB_EPStartXfer+0x54>
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800305c:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8003060:	b29b      	uxth	r3, r3
 8003062:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003066:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800306a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800306e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003072:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 8003076:	e56e      	b.n	8002b56 <USB_EPStartXfer+0x54>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8003078:	293e      	cmp	r1, #62	; 0x3e
 800307a:	d808      	bhi.n	800308e <USB_EPStartXfer+0x58c>
 800307c:	0848      	lsrs	r0, r1, #1
 800307e:	f011 0f01 	tst.w	r1, #1
 8003082:	bf18      	it	ne
 8003084:	3001      	addne	r0, #1
 8003086:	0281      	lsls	r1, r0, #10
 8003088:	b289      	uxth	r1, r1
 800308a:	52d1      	strh	r1, [r2, r3]
 800308c:	e7bb      	b.n	8003006 <USB_EPStartXfer+0x504>
 800308e:	0948      	lsrs	r0, r1, #5
 8003090:	f011 0f1f 	tst.w	r1, #31
 8003094:	bf08      	it	eq
 8003096:	f100 30ff 	addeq.w	r0, r0, #4294967295
 800309a:	ea6f 61c0 	mvn.w	r1, r0, lsl #27
 800309e:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80030a2:	b289      	uxth	r1, r1
 80030a4:	52d1      	strh	r1, [r2, r3]
 80030a6:	e7ae      	b.n	8003006 <USB_EPStartXfer+0x504>
 80030a8:	293e      	cmp	r1, #62	; 0x3e
 80030aa:	d808      	bhi.n	80030be <USB_EPStartXfer+0x5bc>
 80030ac:	0848      	lsrs	r0, r1, #1
 80030ae:	f011 0f01 	tst.w	r1, #1
 80030b2:	bf18      	it	ne
 80030b4:	3001      	addne	r0, #1
 80030b6:	0281      	lsls	r1, r0, #10
 80030b8:	b289      	uxth	r1, r1
 80030ba:	52d1      	strh	r1, [r2, r3]
 80030bc:	e7be      	b.n	800303c <USB_EPStartXfer+0x53a>
 80030be:	0948      	lsrs	r0, r1, #5
 80030c0:	f011 0f1f 	tst.w	r1, #31
 80030c4:	bf08      	it	eq
 80030c6:	f100 30ff 	addeq.w	r0, r0, #4294967295
 80030ca:	ea6f 61c0 	mvn.w	r1, r0, lsl #27
 80030ce:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80030d2:	b289      	uxth	r1, r1
 80030d4:	52d1      	strh	r1, [r2, r3]
 80030d6:	e7b1      	b.n	800303c <USB_EPStartXfer+0x53a>
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d1af      	bne.n	800303c <USB_EPStartXfer+0x53a>
 80030dc:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 80030e0:	b299      	uxth	r1, r3
 80030e2:	7822      	ldrb	r2, [r4, #0]
 80030e4:	0112      	lsls	r2, r2, #4
 80030e6:	f205 430c 	addw	r3, r5, #1036	; 0x40c
 80030ea:	440b      	add	r3, r1
 80030ec:	8a21      	ldrh	r1, [r4, #16]
 80030ee:	52d1      	strh	r1, [r2, r3]
 80030f0:	e7a4      	b.n	800303c <USB_EPStartXfer+0x53a>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80030f2:	2a3e      	cmp	r2, #62	; 0x3e
 80030f4:	d817      	bhi.n	8003126 <USB_EPStartXfer+0x624>
 80030f6:	0851      	lsrs	r1, r2, #1
 80030f8:	f012 0701 	ands.w	r7, r2, #1
 80030fc:	bf14      	ite	ne
 80030fe:	1c4b      	addne	r3, r1, #1
 8003100:	460b      	moveq	r3, r1
 8003102:	029b      	lsls	r3, r3, #10
 8003104:	b29b      	uxth	r3, r3
 8003106:	5233      	strh	r3, [r6, r0]
 8003108:	7863      	ldrb	r3, [r4, #1]
 800310a:	bb7b      	cbnz	r3, 800316c <USB_EPStartXfer+0x66a>
 800310c:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8003110:	b29a      	uxth	r2, r3
 8003112:	f205 430c 	addw	r3, r5, #1036	; 0x40c
 8003116:	4413      	add	r3, r2
 8003118:	7822      	ldrb	r2, [r4, #0]
 800311a:	0112      	lsls	r2, r2, #4
 800311c:	bb17      	cbnz	r7, 8003164 <USB_EPStartXfer+0x662>
 800311e:	0289      	lsls	r1, r1, #10
 8003120:	b289      	uxth	r1, r1
 8003122:	5299      	strh	r1, [r3, r2]
 8003124:	e517      	b.n	8002b56 <USB_EPStartXfer+0x54>
 8003126:	0951      	lsrs	r1, r2, #5
 8003128:	f012 071f 	ands.w	r7, r2, #31
 800312c:	bf0c      	ite	eq
 800312e:	f101 33ff 	addeq.w	r3, r1, #4294967295
 8003132:	460b      	movne	r3, r1
 8003134:	ea6f 63c3 	mvn.w	r3, r3, lsl #27
 8003138:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800313c:	b29b      	uxth	r3, r3
 800313e:	5233      	strh	r3, [r6, r0]
 8003140:	7863      	ldrb	r3, [r4, #1]
 8003142:	b99b      	cbnz	r3, 800316c <USB_EPStartXfer+0x66a>
 8003144:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8003148:	b29b      	uxth	r3, r3
 800314a:	f205 420c 	addw	r2, r5, #1036	; 0x40c
 800314e:	441a      	add	r2, r3
 8003150:	7820      	ldrb	r0, [r4, #0]
 8003152:	0100      	lsls	r0, r0, #4
 8003154:	b147      	cbz	r7, 8003168 <USB_EPStartXfer+0x666>
 8003156:	ea6f 63c1 	mvn.w	r3, r1, lsl #27
 800315a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800315e:	b29b      	uxth	r3, r3
 8003160:	5213      	strh	r3, [r2, r0]
 8003162:	e4f8      	b.n	8002b56 <USB_EPStartXfer+0x54>
 8003164:	3101      	adds	r1, #1
 8003166:	e7da      	b.n	800311e <USB_EPStartXfer+0x61c>
 8003168:	3901      	subs	r1, #1
 800316a:	e7f4      	b.n	8003156 <USB_EPStartXfer+0x654>
 800316c:	2b01      	cmp	r3, #1
 800316e:	f47f acf2 	bne.w	8002b56 <USB_EPStartXfer+0x54>
 8003172:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8003176:	b29b      	uxth	r3, r3
 8003178:	7821      	ldrb	r1, [r4, #0]
 800317a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800317e:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8003182:	b292      	uxth	r2, r2
 8003184:	52ea      	strh	r2, [r5, r3]
 8003186:	e4e6      	b.n	8002b56 <USB_EPStartXfer+0x54>
        return HAL_ERROR;
 8003188:	2001      	movs	r0, #1
 800318a:	e4f5      	b.n	8002b78 <USB_EPStartXfer+0x76>

0800318c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800318c:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800318e:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8003192:	f500 6680 	add.w	r6, r0, #1024	; 0x400

  for (i = n; i != 0U; i--)
 8003196:	085f      	lsrs	r7, r3, #1
 8003198:	d011      	beq.n	80031be <USB_ReadPMA+0x32>
 800319a:	1c88      	adds	r0, r1, #2
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800319c:	4635      	mov	r5, r6
  for (i = n; i != 0U; i--)
 800319e:	463c      	mov	r4, r7
  {
    temp = *(__IO uint16_t *)pdwVal;
 80031a0:	f835 2b04 	ldrh.w	r2, [r5], #4
 80031a4:	b292      	uxth	r2, r2
    pdwVal++;
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80031a6:	f800 2c02 	strb.w	r2, [r0, #-2]
    pBuf++;
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80031aa:	0a12      	lsrs	r2, r2, #8
 80031ac:	f800 2c01 	strb.w	r2, [r0, #-1]
  for (i = n; i != 0U; i--)
 80031b0:	3002      	adds	r0, #2
 80031b2:	3c01      	subs	r4, #1
 80031b4:	d1f4      	bne.n	80031a0 <USB_ReadPMA+0x14>
 80031b6:	eb01 0147 	add.w	r1, r1, r7, lsl #1
 80031ba:	eb06 0687 	add.w	r6, r6, r7, lsl #2
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80031be:	f013 0f01 	tst.w	r3, #1
  {
    temp = *pdwVal;
 80031c2:	bf1c      	itt	ne
 80031c4:	8833      	ldrhne	r3, [r6, #0]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80031c6:	700b      	strbne	r3, [r1, #0]
  }
}
 80031c8:	bcf0      	pop	{r4, r5, r6, r7}
 80031ca:	4770      	bx	lr

080031cc <LL_SetSystemCoreClock>:
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80031cc:	4b01      	ldr	r3, [pc, #4]	; (80031d4 <LL_SetSystemCoreClock+0x8>)
 80031ce:	6018      	str	r0, [r3, #0]
}
 80031d0:	4770      	bx	lr
 80031d2:	bf00      	nop
 80031d4:	20000000 	.word	0x20000000

080031d8 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80031d8:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 80031dc:	b183      	cbz	r3, 8003200 <USBD_CDC_EP0_RxReady+0x28>
{
 80031de:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80031e0:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80031e4:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 80031e8:	28ff      	cmp	r0, #255	; 0xff
 80031ea:	d007      	beq.n	80031fc <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 80031f2:	4621      	mov	r1, r4
 80031f4:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 80031f6:	23ff      	movs	r3, #255	; 0xff
 80031f8:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }
  return USBD_OK;
}
 80031fc:	2000      	movs	r0, #0
 80031fe:	bd10      	pop	{r4, pc}
 8003200:	2000      	movs	r0, #0
 8003202:	4770      	bx	lr

08003204 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8003204:	2343      	movs	r3, #67	; 0x43
 8003206:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 8003208:	4800      	ldr	r0, [pc, #0]	; (800320c <USBD_CDC_GetFSCfgDesc+0x8>)
 800320a:	4770      	bx	lr
 800320c:	2000044c 	.word	0x2000044c

08003210 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8003210:	2343      	movs	r3, #67	; 0x43
 8003212:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8003214:	4800      	ldr	r0, [pc, #0]	; (8003218 <USBD_CDC_GetHSCfgDesc+0x8>)
 8003216:	4770      	bx	lr
 8003218:	20000490 	.word	0x20000490

0800321c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800321c:	2343      	movs	r3, #67	; 0x43
 800321e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8003220:	4800      	ldr	r0, [pc, #0]	; (8003224 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8003222:	4770      	bx	lr
 8003224:	200004e0 	.word	0x200004e0

08003228 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8003228:	230a      	movs	r3, #10
 800322a:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 800322c:	4800      	ldr	r0, [pc, #0]	; (8003230 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 800322e:	4770      	bx	lr
 8003230:	200004d4 	.word	0x200004d4

08003234 <USBD_CDC_DataOut>:
{
 8003234:	b538      	push	{r3, r4, r5, lr}
 8003236:	4604      	mov	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003238:	f8d0 52b8 	ldr.w	r5, [r0, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800323c:	f001 f80a 	bl	8004254 <USBD_LL_GetRxDataSize>
 8003240:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  if (pdev->pClassData != NULL)
 8003244:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8003248:	b14b      	cbz	r3, 800325e <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800324a:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 8003254:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 8003258:	4798      	blx	r3
    return USBD_OK;
 800325a:	2000      	movs	r0, #0
}
 800325c:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 800325e:	2002      	movs	r0, #2
 8003260:	e7fc      	b.n	800325c <USBD_CDC_DataOut+0x28>

08003262 <USBD_CDC_DataIn>:
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8003262:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
  if (pdev->pClassData != NULL)
 8003266:	b312      	cbz	r2, 80032ae <USBD_CDC_DataIn+0x4c>
{
 8003268:	b538      	push	{r3, r4, r5, lr}
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800326a:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 800326e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8003272:	69db      	ldr	r3, [r3, #28]
 8003274:	b15b      	cbz	r3, 800328e <USBD_CDC_DataIn+0x2c>
 8003276:	f8d0 42c0 	ldr.w	r4, [r0, #704]	; 0x2c0
 800327a:	eb01 0581 	add.w	r5, r1, r1, lsl #2
 800327e:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8003282:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8003284:	fbb3 f4f5 	udiv	r4, r3, r5
 8003288:	fb05 3314 	mls	r3, r5, r4, r3
 800328c:	b11b      	cbz	r3, 8003296 <USBD_CDC_DataIn+0x34>
      hcdc->TxState = 0U;
 800328e:	2000      	movs	r0, #0
 8003290:	f8c2 0214 	str.w	r0, [r2, #532]	; 0x214
}
 8003294:	bd38      	pop	{r3, r4, r5, pc}
      pdev->ep_in[epnum].total_length = 0U;
 8003296:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 800329a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800329e:	2400      	movs	r4, #0
 80032a0:	61dc      	str	r4, [r3, #28]
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80032a2:	4623      	mov	r3, r4
 80032a4:	4622      	mov	r2, r4
 80032a6:	f000 ffc5 	bl	8004234 <USBD_LL_Transmit>
    return USBD_OK;
 80032aa:	4620      	mov	r0, r4
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80032ac:	e7f2      	b.n	8003294 <USBD_CDC_DataIn+0x32>
    return USBD_FAIL;
 80032ae:	2002      	movs	r0, #2
}
 80032b0:	4770      	bx	lr

080032b2 <USBD_CDC_Setup>:
{
 80032b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032b4:	b083      	sub	sp, #12
 80032b6:	4606      	mov	r6, r0
 80032b8:	460c      	mov	r4, r1
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80032ba:	f8d0 72b8 	ldr.w	r7, [r0, #696]	; 0x2b8
  uint8_t ifalt = 0U;
 80032be:	2300      	movs	r3, #0
 80032c0:	f88d 3007 	strb.w	r3, [sp, #7]
  uint16_t status_info = 0U;
 80032c4:	f8ad 3004 	strh.w	r3, [sp, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80032c8:	780b      	ldrb	r3, [r1, #0]
 80032ca:	f013 0560 	ands.w	r5, r3, #96	; 0x60
 80032ce:	d027      	beq.n	8003320 <USBD_CDC_Setup+0x6e>
 80032d0:	2d20      	cmp	r5, #32
 80032d2:	d153      	bne.n	800337c <USBD_CDC_Setup+0xca>
      if (req->wLength)
 80032d4:	88ca      	ldrh	r2, [r1, #6]
 80032d6:	b1da      	cbz	r2, 8003310 <USBD_CDC_Setup+0x5e>
        if (req->bmRequest & 0x80U)
 80032d8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80032dc:	d00c      	beq.n	80032f8 <USBD_CDC_Setup+0x46>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80032de:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	4639      	mov	r1, r7
 80032e6:	7860      	ldrb	r0, [r4, #1]
 80032e8:	4798      	blx	r3
          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80032ea:	88e2      	ldrh	r2, [r4, #6]
 80032ec:	4639      	mov	r1, r7
 80032ee:	4630      	mov	r0, r6
 80032f0:	f000 fd63 	bl	8003dba <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 80032f4:	2500      	movs	r5, #0
 80032f6:	e044      	b.n	8003382 <USBD_CDC_Setup+0xd0>
          hcdc->CmdOpCode = req->bRequest;
 80032f8:	784b      	ldrb	r3, [r1, #1]
 80032fa:	f887 3200 	strb.w	r3, [r7, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80032fe:	88cb      	ldrh	r3, [r1, #6]
 8003300:	f887 3201 	strb.w	r3, [r7, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8003304:	88ca      	ldrh	r2, [r1, #6]
 8003306:	4639      	mov	r1, r7
 8003308:	f000 fd6c 	bl	8003de4 <USBD_CtlPrepareRx>
  uint8_t ret = USBD_OK;
 800330c:	2500      	movs	r5, #0
 800330e:	e038      	b.n	8003382 <USBD_CDC_Setup+0xd0>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003310:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	2200      	movs	r2, #0
 8003318:	7848      	ldrb	r0, [r1, #1]
 800331a:	4798      	blx	r3
  uint8_t ret = USBD_OK;
 800331c:	2500      	movs	r5, #0
 800331e:	e030      	b.n	8003382 <USBD_CDC_Setup+0xd0>
      switch (req->bRequest)
 8003320:	784f      	ldrb	r7, [r1, #1]
 8003322:	2f0a      	cmp	r7, #10
 8003324:	d014      	beq.n	8003350 <USBD_CDC_Setup+0x9e>
 8003326:	2f0b      	cmp	r7, #11
 8003328:	d020      	beq.n	800336c <USBD_CDC_Setup+0xba>
 800332a:	b11f      	cbz	r7, 8003334 <USBD_CDC_Setup+0x82>
          USBD_CtlError(pdev, req);
 800332c:	f000 fa58 	bl	80037e0 <USBD_CtlError>
          ret = USBD_FAIL;
 8003330:	2502      	movs	r5, #2
          break;
 8003332:	e026      	b.n	8003382 <USBD_CDC_Setup+0xd0>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003334:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003338:	2b03      	cmp	r3, #3
 800333a:	d003      	beq.n	8003344 <USBD_CDC_Setup+0x92>
            USBD_CtlError(pdev, req);
 800333c:	f000 fa50 	bl	80037e0 <USBD_CtlError>
            ret = USBD_FAIL;
 8003340:	2502      	movs	r5, #2
 8003342:	e01e      	b.n	8003382 <USBD_CDC_Setup+0xd0>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8003344:	2202      	movs	r2, #2
 8003346:	a901      	add	r1, sp, #4
 8003348:	f000 fd37 	bl	8003dba <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 800334c:	463d      	mov	r5, r7
 800334e:	e018      	b.n	8003382 <USBD_CDC_Setup+0xd0>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003350:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003354:	2b03      	cmp	r3, #3
 8003356:	d003      	beq.n	8003360 <USBD_CDC_Setup+0xae>
            USBD_CtlError(pdev, req);
 8003358:	f000 fa42 	bl	80037e0 <USBD_CtlError>
            ret = USBD_FAIL;
 800335c:	2502      	movs	r5, #2
 800335e:	e010      	b.n	8003382 <USBD_CDC_Setup+0xd0>
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8003360:	2201      	movs	r2, #1
 8003362:	f10d 0107 	add.w	r1, sp, #7
 8003366:	f000 fd28 	bl	8003dba <USBD_CtlSendData>
 800336a:	e00a      	b.n	8003382 <USBD_CDC_Setup+0xd0>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800336c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003370:	2b03      	cmp	r3, #3
 8003372:	d006      	beq.n	8003382 <USBD_CDC_Setup+0xd0>
            USBD_CtlError(pdev, req);
 8003374:	f000 fa34 	bl	80037e0 <USBD_CtlError>
            ret = USBD_FAIL;
 8003378:	2502      	movs	r5, #2
 800337a:	e002      	b.n	8003382 <USBD_CDC_Setup+0xd0>
      USBD_CtlError(pdev, req);
 800337c:	f000 fa30 	bl	80037e0 <USBD_CtlError>
      ret = USBD_FAIL;
 8003380:	2502      	movs	r5, #2
}
 8003382:	4628      	mov	r0, r5
 8003384:	b003      	add	sp, #12
 8003386:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003388 <USBD_CDC_DeInit>:
{
 8003388:	b538      	push	{r3, r4, r5, lr}
 800338a:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800338c:	2181      	movs	r1, #129	; 0x81
 800338e:	f000 ff1a 	bl	80041c6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8003392:	2500      	movs	r5, #0
 8003394:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8003396:	2101      	movs	r1, #1
 8003398:	4620      	mov	r0, r4
 800339a:	f000 ff14 	bl	80041c6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800339e:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80033a2:	2182      	movs	r1, #130	; 0x82
 80033a4:	4620      	mov	r0, r4
 80033a6:	f000 ff0e 	bl	80041c6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80033aa:	6425      	str	r5, [r4, #64]	; 0x40
  if (pdev->pClassData != NULL)
 80033ac:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 80033b0:	b14b      	cbz	r3, 80033c6 <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80033b2:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80033ba:	f8d4 02b8 	ldr.w	r0, [r4, #696]	; 0x2b8
 80033be:	f000 ff53 	bl	8004268 <USBD_static_free>
    pdev->pClassData = NULL;
 80033c2:	f8c4 52b8 	str.w	r5, [r4, #696]	; 0x2b8
}
 80033c6:	2000      	movs	r0, #0
 80033c8:	bd38      	pop	{r3, r4, r5, pc}

080033ca <USBD_CDC_Init>:
{
 80033ca:	b570      	push	{r4, r5, r6, lr}
 80033cc:	4604      	mov	r4, r0
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80033ce:	7c03      	ldrb	r3, [r0, #16]
 80033d0:	bbab      	cbnz	r3, 800343e <USBD_CDC_Init+0x74>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80033d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80033d6:	2202      	movs	r2, #2
 80033d8:	2181      	movs	r1, #129	; 0x81
 80033da:	f000 fee9 	bl	80041b0 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80033de:	2501      	movs	r5, #1
 80033e0:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80033e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80033e6:	2202      	movs	r2, #2
 80033e8:	4629      	mov	r1, r5
 80033ea:	4620      	mov	r0, r4
 80033ec:	f000 fee0 	bl	80041b0 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80033f0:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80033f4:	2308      	movs	r3, #8
 80033f6:	2203      	movs	r2, #3
 80033f8:	2182      	movs	r1, #130	; 0x82
 80033fa:	4620      	mov	r0, r4
 80033fc:	f000 fed8 	bl	80041b0 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8003400:	2301      	movs	r3, #1
 8003402:	6423      	str	r3, [r4, #64]	; 0x40
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8003404:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8003408:	f000 ff2a 	bl	8004260 <USBD_static_malloc>
 800340c:	4605      	mov	r5, r0
 800340e:	f8c4 02b8 	str.w	r0, [r4, #696]	; 0x2b8
  if (pdev->pClassData == NULL)
 8003412:	b368      	cbz	r0, 8003470 <USBD_CDC_Init+0xa6>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8003414:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4798      	blx	r3
    hcdc->TxState = 0U;
 800341c:	2300      	movs	r3, #0
 800341e:	f8c5 3214 	str.w	r3, [r5, #532]	; 0x214
    hcdc->RxState = 0U;
 8003422:	f8c5 3218 	str.w	r3, [r5, #536]	; 0x218
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003426:	7c26      	ldrb	r6, [r4, #16]
 8003428:	b9ce      	cbnz	r6, 800345e <USBD_CDC_Init+0x94>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800342a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800342e:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 8003432:	2101      	movs	r1, #1
 8003434:	4620      	mov	r0, r4
 8003436:	f000 ff05 	bl	8004244 <USBD_LL_PrepareReceive>
}
 800343a:	4630      	mov	r0, r6
 800343c:	bd70      	pop	{r4, r5, r6, pc}
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800343e:	2340      	movs	r3, #64	; 0x40
 8003440:	2202      	movs	r2, #2
 8003442:	2181      	movs	r1, #129	; 0x81
 8003444:	f000 feb4 	bl	80041b0 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8003448:	2501      	movs	r5, #1
 800344a:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800344c:	2340      	movs	r3, #64	; 0x40
 800344e:	2202      	movs	r2, #2
 8003450:	4629      	mov	r1, r5
 8003452:	4620      	mov	r0, r4
 8003454:	f000 feac 	bl	80041b0 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8003458:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
 800345c:	e7ca      	b.n	80033f4 <USBD_CDC_Init+0x2a>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800345e:	2340      	movs	r3, #64	; 0x40
 8003460:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 8003464:	2101      	movs	r1, #1
 8003466:	4620      	mov	r0, r4
 8003468:	f000 feec 	bl	8004244 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 800346c:	2600      	movs	r6, #0
 800346e:	e7e4      	b.n	800343a <USBD_CDC_Init+0x70>
    ret = 1U;
 8003470:	2601      	movs	r6, #1
 8003472:	e7e2      	b.n	800343a <USBD_CDC_Init+0x70>

08003474 <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if (fops != NULL)
 8003474:	b119      	cbz	r1, 800347e <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData = fops;
 8003476:	f8c0 12bc 	str.w	r1, [r0, #700]	; 0x2bc
    ret = USBD_OK;
 800347a:	2000      	movs	r0, #0
 800347c:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 800347e:	2002      	movs	r0, #2
  }

  return ret;
}
 8003480:	4770      	bx	lr

08003482 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003482:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  hcdc->TxBuffer = pbuff;
 8003486:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800348a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
}
 800348e:	2000      	movs	r0, #0
 8003490:	4770      	bx	lr

08003492 <USBD_CDC_SetRxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003492:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  hcdc->RxBuffer = pbuff;
 8003496:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204

  return USBD_OK;
}
 800349a:	2000      	movs	r0, #0
 800349c:	4770      	bx	lr

0800349e <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800349e:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8

  if (pdev->pClassData != NULL)
 80034a2:	b1a2      	cbz	r2, 80034ce <USBD_CDC_TransmitPacket+0x30>
{
 80034a4:	b508      	push	{r3, lr}
  {
    if (hcdc->TxState == 0U)
 80034a6:	f8d2 3214 	ldr.w	r3, [r2, #532]	; 0x214
 80034aa:	b10b      	cbz	r3, 80034b0 <USBD_CDC_TransmitPacket+0x12>

      return USBD_OK;
    }
    else
    {
      return USBD_BUSY;
 80034ac:	2001      	movs	r0, #1
  }
  else
  {
    return USBD_FAIL;
  }
}
 80034ae:	bd08      	pop	{r3, pc}
      hcdc->TxState = 1U;
 80034b0:	2301      	movs	r3, #1
 80034b2:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80034b6:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
 80034ba:	6303      	str	r3, [r0, #48]	; 0x30
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80034bc:	f8b2 3210 	ldrh.w	r3, [r2, #528]	; 0x210
 80034c0:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 80034c4:	2181      	movs	r1, #129	; 0x81
 80034c6:	f000 feb5 	bl	8004234 <USBD_LL_Transmit>
      return USBD_OK;
 80034ca:	2000      	movs	r0, #0
 80034cc:	e7ef      	b.n	80034ae <USBD_CDC_TransmitPacket+0x10>
    return USBD_FAIL;
 80034ce:	2002      	movs	r0, #2
}
 80034d0:	4770      	bx	lr

080034d2 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80034d2:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80034d4:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80034d8:	b192      	cbz	r2, 8003500 <USBD_CDC_ReceivePacket+0x2e>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80034da:	7c04      	ldrb	r4, [r0, #16]
 80034dc:	b944      	cbnz	r4, 80034f0 <USBD_CDC_ReceivePacket+0x1e>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80034de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80034e2:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 80034e6:	2101      	movs	r1, #1
 80034e8:	f000 feac 	bl	8004244 <USBD_LL_PrepareReceive>
  }
  else
  {
    return USBD_FAIL;
  }
}
 80034ec:	4620      	mov	r0, r4
 80034ee:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 80034f0:	2340      	movs	r3, #64	; 0x40
 80034f2:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 80034f6:	2101      	movs	r1, #1
 80034f8:	f000 fea4 	bl	8004244 <USBD_LL_PrepareReceive>
    return USBD_OK;
 80034fc:	2400      	movs	r4, #0
 80034fe:	e7f5      	b.n	80034ec <USBD_CDC_ReceivePacket+0x1a>
    return USBD_FAIL;
 8003500:	2402      	movs	r4, #2
 8003502:	e7f3      	b.n	80034ec <USBD_CDC_ReceivePacket+0x1a>

08003504 <USBD_Init>:
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8003504:	b198      	cbz	r0, 800352e <USBD_Init+0x2a>
{
 8003506:	b508      	push	{r3, lr}
 8003508:	4603      	mov	r3, r0
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800350a:	f8d0 02b4 	ldr.w	r0, [r0, #692]	; 0x2b4
 800350e:	b110      	cbz	r0, 8003516 <USBD_Init+0x12>
  {
    pdev->pClass = NULL;
 8003510:	2000      	movs	r0, #0
 8003512:	f8c3 02b4 	str.w	r0, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8003516:	b109      	cbz	r1, 800351c <USBD_Init+0x18>
  {
    pdev->pDesc = pdesc;
 8003518:	f8c3 12b0 	str.w	r1, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800351c:	2101      	movs	r1, #1
 800351e:	f883 129c 	strb.w	r1, [r3, #668]	; 0x29c
  pdev->id = id;
 8003522:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8003524:	4618      	mov	r0, r3
 8003526:	f000 fdf9 	bl	800411c <USBD_LL_Init>

  return USBD_OK;
 800352a:	2000      	movs	r0, #0
}
 800352c:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 800352e:	2002      	movs	r0, #2
}
 8003530:	4770      	bx	lr

08003532 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 8003532:	b119      	cbz	r1, 800353c <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8003534:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
    status = USBD_OK;
 8003538:	2000      	movs	r0, #0
 800353a:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800353c:	2002      	movs	r0, #2
  }

  return status;
}
 800353e:	4770      	bx	lr

08003540 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8003540:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8003542:	f000 fe2d 	bl	80041a0 <USBD_LL_Start>

  return USBD_OK;
}
 8003546:	2000      	movs	r0, #0
 8003548:	bd08      	pop	{r3, pc}

0800354a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800354a:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 800354c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003550:	b12b      	cbz	r3, 800355e <USBD_SetClassConfig+0x14>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4798      	blx	r3
  USBD_StatusTypeDef ret = USBD_FAIL;
 8003556:	2800      	cmp	r0, #0
 8003558:	bf18      	it	ne
 800355a:	2002      	movne	r0, #2
      ret = USBD_OK;
    }
  }

  return ret;
}
 800355c:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_FAIL;
 800355e:	2002      	movs	r0, #2
 8003560:	e7fc      	b.n	800355c <USBD_SetClassConfig+0x12>

08003562 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8003562:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8003564:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	4798      	blx	r3

  return USBD_OK;
}
 800356c:	2000      	movs	r0, #0
 800356e:	bd08      	pop	{r3, pc}

08003570 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8003570:	b538      	push	{r3, r4, r5, lr}
 8003572:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8003574:	f500 752a 	add.w	r5, r0, #680	; 0x2a8
 8003578:	4628      	mov	r0, r5
 800357a:	f000 f91d 	bl	80037b8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800357e:	2301      	movs	r3, #1
 8003580:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8003584:	f8b4 32ae 	ldrh.w	r3, [r4, #686]	; 0x2ae
 8003588:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800358c:	f894 12a8 	ldrb.w	r1, [r4, #680]	; 0x2a8
 8003590:	f001 031f 	and.w	r3, r1, #31
 8003594:	2b01      	cmp	r3, #1
 8003596:	d00e      	beq.n	80035b6 <USBD_LL_SetupStage+0x46>
 8003598:	2b02      	cmp	r3, #2
 800359a:	d011      	beq.n	80035c0 <USBD_LL_SetupStage+0x50>
 800359c:	b12b      	cbz	r3, 80035aa <USBD_LL_SetupStage+0x3a>
    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800359e:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80035a2:	4620      	mov	r0, r4
 80035a4:	f000 fe17 	bl	80041d6 <USBD_LL_StallEP>
      break;
 80035a8:	e003      	b.n	80035b2 <USBD_LL_SetupStage+0x42>
      USBD_StdDevReq(pdev, &pdev->request);
 80035aa:	4629      	mov	r1, r5
 80035ac:	4620      	mov	r0, r4
 80035ae:	f000 f921 	bl	80037f4 <USBD_StdDevReq>
  }

  return USBD_OK;
}
 80035b2:	2000      	movs	r0, #0
 80035b4:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 80035b6:	4629      	mov	r1, r5
 80035b8:	4620      	mov	r0, r4
 80035ba:	f000 fad5 	bl	8003b68 <USBD_StdItfReq>
      break;
 80035be:	e7f8      	b.n	80035b2 <USBD_LL_SetupStage+0x42>
      USBD_StdEPReq(pdev, &pdev->request);
 80035c0:	4629      	mov	r1, r5
 80035c2:	4620      	mov	r0, r4
 80035c4:	f000 fb00 	bl	8003bc8 <USBD_StdEPReq>
      break;
 80035c8:	e7f3      	b.n	80035b2 <USBD_LL_SetupStage+0x42>

080035ca <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80035ca:	b538      	push	{r3, r4, r5, lr}
 80035cc:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80035ce:	460d      	mov	r5, r1
 80035d0:	bb81      	cbnz	r1, 8003634 <USBD_LL_DataOutStage+0x6a>
 80035d2:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80035d4:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 80035d8:	2a03      	cmp	r2, #3
 80035da:	d003      	beq.n	80035e4 <USBD_LL_DataOutStage+0x1a>
        USBD_CtlSendStatus(pdev);
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80035dc:	2a05      	cmp	r2, #5
 80035de:	d022      	beq.n	8003626 <USBD_LL_DataOutStage+0x5c>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 80035e0:	4608      	mov	r0, r1
 80035e2:	e031      	b.n	8003648 <USBD_LL_DataOutStage+0x7e>
      if (pep->rem_length > pep->maxpacket)
 80035e4:	f8d0 1160 	ldr.w	r1, [r0, #352]	; 0x160
 80035e8:	f8d0 2164 	ldr.w	r2, [r0, #356]	; 0x164
 80035ec:	4291      	cmp	r1, r2
 80035ee:	d90b      	bls.n	8003608 <USBD_LL_DataOutStage+0x3e>
        pep->rem_length -= pep->maxpacket;
 80035f0:	1a89      	subs	r1, r1, r2
 80035f2:	f8c0 1160 	str.w	r1, [r0, #352]	; 0x160
        USBD_CtlContinueRx(pdev, pdata,
 80035f6:	428a      	cmp	r2, r1
 80035f8:	bf8c      	ite	hi
 80035fa:	b28a      	uxthhi	r2, r1
 80035fc:	b292      	uxthls	r2, r2
 80035fe:	4619      	mov	r1, r3
 8003600:	f000 fbff 	bl	8003e02 <USBD_CtlContinueRx>
  return USBD_OK;
 8003604:	4628      	mov	r0, r5
 8003606:	e01f      	b.n	8003648 <USBD_LL_DataOutStage+0x7e>
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8003608:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800360c:	691b      	ldr	r3, [r3, #16]
 800360e:	b11b      	cbz	r3, 8003618 <USBD_LL_DataOutStage+0x4e>
 8003610:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8003614:	2a03      	cmp	r2, #3
 8003616:	d004      	beq.n	8003622 <USBD_LL_DataOutStage+0x58>
        USBD_CtlSendStatus(pdev);
 8003618:	4620      	mov	r0, r4
 800361a:	f000 fbfa 	bl	8003e12 <USBD_CtlSendStatus>
  return USBD_OK;
 800361e:	4628      	mov	r0, r5
 8003620:	e012      	b.n	8003648 <USBD_LL_DataOutStage+0x7e>
          pdev->pClass->EP0_RxReady(pdev);
 8003622:	4798      	blx	r3
 8003624:	e7f8      	b.n	8003618 <USBD_LL_DataOutStage+0x4e>
        pdev->ep0_state = USBD_EP0_IDLE;
 8003626:	2100      	movs	r1, #0
 8003628:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800362c:	f000 fdd3 	bl	80041d6 <USBD_LL_StallEP>
  return USBD_OK;
 8003630:	4628      	mov	r0, r5
 8003632:	e009      	b.n	8003648 <USBD_LL_DataOutStage+0x7e>
  else if ((pdev->pClass->DataOut != NULL) &&
 8003634:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003638:	699b      	ldr	r3, [r3, #24]
 800363a:	b133      	cbz	r3, 800364a <USBD_LL_DataOutStage+0x80>
 800363c:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8003640:	2a03      	cmp	r2, #3
 8003642:	d104      	bne.n	800364e <USBD_LL_DataOutStage+0x84>
    pdev->pClass->DataOut(pdev, epnum);
 8003644:	4798      	blx	r3
  return USBD_OK;
 8003646:	2000      	movs	r0, #0
}
 8003648:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 800364a:	2002      	movs	r0, #2
 800364c:	e7fc      	b.n	8003648 <USBD_LL_DataOutStage+0x7e>
 800364e:	2002      	movs	r0, #2
 8003650:	e7fa      	b.n	8003648 <USBD_LL_DataOutStage+0x7e>

08003652 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8003652:	b538      	push	{r3, r4, r5, lr}
 8003654:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8003656:	460d      	mov	r5, r1
 8003658:	2900      	cmp	r1, #0
 800365a:	d152      	bne.n	8003702 <USBD_LL_DataInStage+0xb0>
 800365c:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800365e:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8003662:	2a02      	cmp	r2, #2
 8003664:	d00b      	beq.n	800367e <USBD_LL_DataInStage+0x2c>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8003666:	f032 0304 	bics.w	r3, r2, #4
 800366a:	d102      	bne.n	8003672 <USBD_LL_DataInStage+0x20>
          (pdev->ep0_state == USBD_EP0_IDLE))
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800366c:	2180      	movs	r1, #128	; 0x80
 800366e:	f000 fdb2 	bl	80041d6 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8003672:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8003676:	2b01      	cmp	r3, #1
 8003678:	d03e      	beq.n	80036f8 <USBD_LL_DataInStage+0xa6>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 800367a:	4628      	mov	r0, r5
}
 800367c:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 800367e:	6a01      	ldr	r1, [r0, #32]
 8003680:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8003682:	4291      	cmp	r1, r2
 8003684:	d81b      	bhi.n	80036be <USBD_LL_DataInStage+0x6c>
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8003686:	69c1      	ldr	r1, [r0, #28]
 8003688:	fbb1 f3f2 	udiv	r3, r1, r2
 800368c:	fb02 1313 	mls	r3, r2, r3, r1
 8003690:	b92b      	cbnz	r3, 800369e <USBD_LL_DataInStage+0x4c>
 8003692:	428a      	cmp	r2, r1
 8003694:	d803      	bhi.n	800369e <USBD_LL_DataInStage+0x4c>
            (pep->total_length >= pep->maxpacket) &&
 8003696:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
 800369a:	4299      	cmp	r1, r3
 800369c:	d31c      	bcc.n	80036d8 <USBD_LL_DataInStage+0x86>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800369e:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	b11b      	cbz	r3, 80036ae <USBD_LL_DataInStage+0x5c>
 80036a6:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
 80036aa:	2a03      	cmp	r2, #3
 80036ac:	d021      	beq.n	80036f2 <USBD_LL_DataInStage+0xa0>
          USBD_LL_StallEP(pdev, 0x80U);
 80036ae:	2180      	movs	r1, #128	; 0x80
 80036b0:	4620      	mov	r0, r4
 80036b2:	f000 fd90 	bl	80041d6 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80036b6:	4620      	mov	r0, r4
 80036b8:	f000 fbb6 	bl	8003e28 <USBD_CtlReceiveStatus>
 80036bc:	e7d9      	b.n	8003672 <USBD_LL_DataInStage+0x20>
        pep->rem_length -= pep->maxpacket;
 80036be:	1a8a      	subs	r2, r1, r2
 80036c0:	6202      	str	r2, [r0, #32]
        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80036c2:	b292      	uxth	r2, r2
 80036c4:	4619      	mov	r1, r3
 80036c6:	f000 fb85 	bl	8003dd4 <USBD_CtlContinueSendData>
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80036ca:	2300      	movs	r3, #0
 80036cc:	461a      	mov	r2, r3
 80036ce:	4619      	mov	r1, r3
 80036d0:	4620      	mov	r0, r4
 80036d2:	f000 fdb7 	bl	8004244 <USBD_LL_PrepareReceive>
 80036d6:	e7cc      	b.n	8003672 <USBD_LL_DataInStage+0x20>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80036d8:	2200      	movs	r2, #0
 80036da:	4611      	mov	r1, r2
 80036dc:	f000 fb7a 	bl	8003dd4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80036e0:	2100      	movs	r1, #0
 80036e2:	f8c4 1298 	str.w	r1, [r4, #664]	; 0x298
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80036e6:	460b      	mov	r3, r1
 80036e8:	460a      	mov	r2, r1
 80036ea:	4620      	mov	r0, r4
 80036ec:	f000 fdaa 	bl	8004244 <USBD_LL_PrepareReceive>
 80036f0:	e7bf      	b.n	8003672 <USBD_LL_DataInStage+0x20>
            pdev->pClass->EP0_TxSent(pdev);
 80036f2:	4620      	mov	r0, r4
 80036f4:	4798      	blx	r3
 80036f6:	e7da      	b.n	80036ae <USBD_LL_DataInStage+0x5c>
      pdev->dev_test_mode = 0U;
 80036f8:	2300      	movs	r3, #0
 80036fa:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
  return USBD_OK;
 80036fe:	4628      	mov	r0, r5
 8003700:	e7bc      	b.n	800367c <USBD_LL_DataInStage+0x2a>
  else if ((pdev->pClass->DataIn != NULL) &&
 8003702:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003706:	695b      	ldr	r3, [r3, #20]
 8003708:	b133      	cbz	r3, 8003718 <USBD_LL_DataInStage+0xc6>
 800370a:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800370e:	2a03      	cmp	r2, #3
 8003710:	d104      	bne.n	800371c <USBD_LL_DataInStage+0xca>
    pdev->pClass->DataIn(pdev, epnum);
 8003712:	4798      	blx	r3
  return USBD_OK;
 8003714:	2000      	movs	r0, #0
    pdev->pClass->DataIn(pdev, epnum);
 8003716:	e7b1      	b.n	800367c <USBD_LL_DataInStage+0x2a>
    return USBD_FAIL;
 8003718:	2002      	movs	r0, #2
 800371a:	e7af      	b.n	800367c <USBD_LL_DataInStage+0x2a>
 800371c:	2002      	movs	r0, #2
 800371e:	e7ad      	b.n	800367c <USBD_LL_DataInStage+0x2a>

08003720 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8003720:	b570      	push	{r4, r5, r6, lr}
 8003722:	4604      	mov	r4, r0
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8003724:	2340      	movs	r3, #64	; 0x40
 8003726:	2200      	movs	r2, #0
 8003728:	4611      	mov	r1, r2
 800372a:	f000 fd41 	bl	80041b0 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800372e:	2501      	movs	r5, #1
 8003730:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8003734:	2640      	movs	r6, #64	; 0x40
 8003736:	f8c4 6164 	str.w	r6, [r4, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800373a:	4633      	mov	r3, r6
 800373c:	2200      	movs	r2, #0
 800373e:	2180      	movs	r1, #128	; 0x80
 8003740:	4620      	mov	r0, r4
 8003742:	f000 fd35 	bl	80041b0 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8003746:	61a5      	str	r5, [r4, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8003748:	6266      	str	r6, [r4, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800374a:	f884 529c 	strb.w	r5, [r4, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800374e:	2300      	movs	r3, #0
 8003750:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  pdev->dev_config = 0U;
 8003754:	6063      	str	r3, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 8003756:	f8c4 32a4 	str.w	r3, [r4, #676]	; 0x2a4

  if (pdev->pClassData)
 800375a:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 800375e:	b12b      	cbz	r3, 800376c <USBD_LL_Reset+0x4c>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8003760:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	2100      	movs	r1, #0
 8003768:	4620      	mov	r0, r4
 800376a:	4798      	blx	r3
  }

  return USBD_OK;
}
 800376c:	2000      	movs	r0, #0
 800376e:	bd70      	pop	{r4, r5, r6, pc}

08003770 <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8003770:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8003772:	2000      	movs	r0, #0
 8003774:	4770      	bx	lr

08003776 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8003776:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800377a:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800377e:	2304      	movs	r3, #4
 8003780:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 8003784:	2000      	movs	r0, #0
 8003786:	4770      	bx	lr

08003788 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8003788:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800378c:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 800378e:	bf04      	itt	eq
 8003790:	f890 329d 	ldrbeq.w	r3, [r0, #669]	; 0x29d
 8003794:	f880 329c 	strbeq.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 8003798:	2000      	movs	r0, #0
 800379a:	4770      	bx	lr

0800379c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800379c:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800379e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80037a2:	2b03      	cmp	r3, #3
 80037a4:	d001      	beq.n	80037aa <USBD_LL_SOF+0xe>
      pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
}
 80037a6:	2000      	movs	r0, #0
 80037a8:	bd08      	pop	{r3, pc}
    if (pdev->pClass->SOF != NULL)
 80037aa:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80037ae:	69db      	ldr	r3, [r3, #28]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d0f8      	beq.n	80037a6 <USBD_LL_SOF+0xa>
      pdev->pClass->SOF(pdev);
 80037b4:	4798      	blx	r3
 80037b6:	e7f6      	b.n	80037a6 <USBD_LL_SOF+0xa>

080037b8 <USBD_ParseSetupRequest>:
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
  req->bmRequest = *(uint8_t *)(pdata);
 80037b8:	780b      	ldrb	r3, [r1, #0]
 80037ba:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80037bc:	784b      	ldrb	r3, [r1, #1]
 80037be:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80037c0:	78ca      	ldrb	r2, [r1, #3]
 80037c2:	788b      	ldrb	r3, [r1, #2]
 80037c4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80037c8:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80037ca:	794a      	ldrb	r2, [r1, #5]
 80037cc:	790b      	ldrb	r3, [r1, #4]
 80037ce:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80037d2:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80037d4:	79ca      	ldrb	r2, [r1, #7]
 80037d6:	798b      	ldrb	r3, [r1, #6]
 80037d8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80037dc:	80c3      	strh	r3, [r0, #6]

}
 80037de:	4770      	bx	lr

080037e0 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80037e0:	b510      	push	{r4, lr}
 80037e2:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 80037e4:	2180      	movs	r1, #128	; 0x80
 80037e6:	f000 fcf6 	bl	80041d6 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80037ea:	2100      	movs	r1, #0
 80037ec:	4620      	mov	r0, r4
 80037ee:	f000 fcf2 	bl	80041d6 <USBD_LL_StallEP>
}
 80037f2:	bd10      	pop	{r4, pc}

080037f4 <USBD_StdDevReq>:
{
 80037f4:	b530      	push	{r4, r5, lr}
 80037f6:	b083      	sub	sp, #12
 80037f8:	4605      	mov	r5, r0
 80037fa:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80037fc:	780b      	ldrb	r3, [r1, #0]
 80037fe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003802:	2b20      	cmp	r3, #32
 8003804:	d005      	beq.n	8003812 <USBD_StdDevReq+0x1e>
 8003806:	2b40      	cmp	r3, #64	; 0x40
 8003808:	d003      	beq.n	8003812 <USBD_StdDevReq+0x1e>
 800380a:	b15b      	cbz	r3, 8003824 <USBD_StdDevReq+0x30>
      USBD_CtlError(pdev, req);
 800380c:	f7ff ffe8 	bl	80037e0 <USBD_CtlError>
      break;
 8003810:	e005      	b.n	800381e <USBD_StdDevReq+0x2a>
      pdev->pClass->Setup(pdev, req);
 8003812:	f8d5 32b4 	ldr.w	r3, [r5, #692]	; 0x2b4
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	4621      	mov	r1, r4
 800381a:	4628      	mov	r0, r5
 800381c:	4798      	blx	r3
}
 800381e:	2000      	movs	r0, #0
 8003820:	b003      	add	sp, #12
 8003822:	bd30      	pop	{r4, r5, pc}
      switch (req->bRequest)
 8003824:	784b      	ldrb	r3, [r1, #1]
 8003826:	2b09      	cmp	r3, #9
 8003828:	f200 8198 	bhi.w	8003b5c <USBD_StdDevReq+0x368>
 800382c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8003830:	0184015f 	.word	0x0184015f
 8003834:	017b0196 	.word	0x017b0196
 8003838:	00c90196 	.word	0x00c90196
 800383c:	0196000a 	.word	0x0196000a
 8003840:	00ee0140 	.word	0x00ee0140
  uint16_t len = 0U;
 8003844:	2300      	movs	r3, #0
 8003846:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 800384a:	884a      	ldrh	r2, [r1, #2]
 800384c:	0a13      	lsrs	r3, r2, #8
 800384e:	3b01      	subs	r3, #1
 8003850:	2b06      	cmp	r3, #6
 8003852:	f200 80a4 	bhi.w	800399e <USBD_StdDevReq+0x1aa>
 8003856:	e8df f003 	tbb	[pc, r3]
 800385a:	1804      	.short	0x1804
 800385c:	86a2a22c 	.word	0x86a2a22c
 8003860:	93          	.byte	0x93
 8003861:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8003862:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f10d 0106 	add.w	r1, sp, #6
 800386c:	7c00      	ldrb	r0, [r0, #16]
 800386e:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 8003870:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8003874:	2a00      	cmp	r2, #0
 8003876:	f000 809f 	beq.w	80039b8 <USBD_StdDevReq+0x1c4>
 800387a:	88e3      	ldrh	r3, [r4, #6]
 800387c:	2b00      	cmp	r3, #0
 800387e:	f040 8092 	bne.w	80039a6 <USBD_StdDevReq+0x1b2>
      (void)USBD_CtlSendStatus(pdev);
 8003882:	4628      	mov	r0, r5
 8003884:	f000 fac5 	bl	8003e12 <USBD_CtlSendStatus>
 8003888:	e7c9      	b.n	800381e <USBD_StdDevReq+0x2a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800388a:	7c03      	ldrb	r3, [r0, #16]
 800388c:	b943      	cbnz	r3, 80038a0 <USBD_StdDevReq+0xac>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800388e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003894:	f10d 0006 	add.w	r0, sp, #6
 8003898:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800389a:	2302      	movs	r3, #2
 800389c:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800389e:	e7e7      	b.n	8003870 <USBD_StdDevReq+0x7c>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80038a0:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80038a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a6:	f10d 0006 	add.w	r0, sp, #6
 80038aa:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80038ac:	2302      	movs	r3, #2
 80038ae:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 80038b0:	e7de      	b.n	8003870 <USBD_StdDevReq+0x7c>
      switch ((uint8_t)(req->wValue))
 80038b2:	b2d2      	uxtb	r2, r2
 80038b4:	2a05      	cmp	r2, #5
 80038b6:	d852      	bhi.n	800395e <USBD_StdDevReq+0x16a>
 80038b8:	e8df f002 	tbb	[pc, r2]
 80038bc:	2a1d1003 	.word	0x2a1d1003
 80038c0:	4437      	.short	0x4437
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80038c2:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	b123      	cbz	r3, 80038d4 <USBD_StdDevReq+0xe0>
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80038ca:	f10d 0106 	add.w	r1, sp, #6
 80038ce:	7c00      	ldrb	r0, [r0, #16]
 80038d0:	4798      	blx	r3
  if (err != 0U)
 80038d2:	e7cd      	b.n	8003870 <USBD_StdDevReq+0x7c>
            USBD_CtlError(pdev, req);
 80038d4:	4621      	mov	r1, r4
 80038d6:	f7ff ff83 	bl	80037e0 <USBD_CtlError>
  if (err != 0U)
 80038da:	e7a0      	b.n	800381e <USBD_StdDevReq+0x2a>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80038dc:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	b123      	cbz	r3, 80038ee <USBD_StdDevReq+0xfa>
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80038e4:	f10d 0106 	add.w	r1, sp, #6
 80038e8:	7c00      	ldrb	r0, [r0, #16]
 80038ea:	4798      	blx	r3
  if (err != 0U)
 80038ec:	e7c0      	b.n	8003870 <USBD_StdDevReq+0x7c>
            USBD_CtlError(pdev, req);
 80038ee:	4621      	mov	r1, r4
 80038f0:	f7ff ff76 	bl	80037e0 <USBD_CtlError>
  if (err != 0U)
 80038f4:	e793      	b.n	800381e <USBD_StdDevReq+0x2a>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80038f6:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80038fa:	68db      	ldr	r3, [r3, #12]
 80038fc:	b123      	cbz	r3, 8003908 <USBD_StdDevReq+0x114>
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80038fe:	f10d 0106 	add.w	r1, sp, #6
 8003902:	7c00      	ldrb	r0, [r0, #16]
 8003904:	4798      	blx	r3
  if (err != 0U)
 8003906:	e7b3      	b.n	8003870 <USBD_StdDevReq+0x7c>
            USBD_CtlError(pdev, req);
 8003908:	4621      	mov	r1, r4
 800390a:	f7ff ff69 	bl	80037e0 <USBD_CtlError>
  if (err != 0U)
 800390e:	e786      	b.n	800381e <USBD_StdDevReq+0x2a>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8003910:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8003914:	691b      	ldr	r3, [r3, #16]
 8003916:	b123      	cbz	r3, 8003922 <USBD_StdDevReq+0x12e>
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8003918:	f10d 0106 	add.w	r1, sp, #6
 800391c:	7c00      	ldrb	r0, [r0, #16]
 800391e:	4798      	blx	r3
  if (err != 0U)
 8003920:	e7a6      	b.n	8003870 <USBD_StdDevReq+0x7c>
            USBD_CtlError(pdev, req);
 8003922:	4621      	mov	r1, r4
 8003924:	f7ff ff5c 	bl	80037e0 <USBD_CtlError>
  if (err != 0U)
 8003928:	e779      	b.n	800381e <USBD_StdDevReq+0x2a>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800392a:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 800392e:	695b      	ldr	r3, [r3, #20]
 8003930:	b123      	cbz	r3, 800393c <USBD_StdDevReq+0x148>
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8003932:	f10d 0106 	add.w	r1, sp, #6
 8003936:	7c00      	ldrb	r0, [r0, #16]
 8003938:	4798      	blx	r3
  if (err != 0U)
 800393a:	e799      	b.n	8003870 <USBD_StdDevReq+0x7c>
            USBD_CtlError(pdev, req);
 800393c:	4621      	mov	r1, r4
 800393e:	f7ff ff4f 	bl	80037e0 <USBD_CtlError>
  if (err != 0U)
 8003942:	e76c      	b.n	800381e <USBD_StdDevReq+0x2a>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8003944:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8003948:	699b      	ldr	r3, [r3, #24]
 800394a:	b123      	cbz	r3, 8003956 <USBD_StdDevReq+0x162>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800394c:	f10d 0106 	add.w	r1, sp, #6
 8003950:	7c00      	ldrb	r0, [r0, #16]
 8003952:	4798      	blx	r3
  if (err != 0U)
 8003954:	e78c      	b.n	8003870 <USBD_StdDevReq+0x7c>
            USBD_CtlError(pdev, req);
 8003956:	4621      	mov	r1, r4
 8003958:	f7ff ff42 	bl	80037e0 <USBD_CtlError>
  if (err != 0U)
 800395c:	e75f      	b.n	800381e <USBD_StdDevReq+0x2a>
          USBD_CtlError(pdev, req);
 800395e:	4621      	mov	r1, r4
 8003960:	f7ff ff3e 	bl	80037e0 <USBD_CtlError>
  if (err != 0U)
 8003964:	e75b      	b.n	800381e <USBD_StdDevReq+0x2a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003966:	7c03      	ldrb	r3, [r0, #16]
 8003968:	b933      	cbnz	r3, 8003978 <USBD_StdDevReq+0x184>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800396a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800396e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003970:	f10d 0006 	add.w	r0, sp, #6
 8003974:	4798      	blx	r3
  if (err != 0U)
 8003976:	e77b      	b.n	8003870 <USBD_StdDevReq+0x7c>
        USBD_CtlError(pdev, req);
 8003978:	4621      	mov	r1, r4
 800397a:	f7ff ff31 	bl	80037e0 <USBD_CtlError>
  if (err != 0U)
 800397e:	e74e      	b.n	800381e <USBD_StdDevReq+0x2a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003980:	7c03      	ldrb	r3, [r0, #16]
 8003982:	b943      	cbnz	r3, 8003996 <USBD_StdDevReq+0x1a2>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8003984:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800398a:	f10d 0006 	add.w	r0, sp, #6
 800398e:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8003990:	2307      	movs	r3, #7
 8003992:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8003994:	e76c      	b.n	8003870 <USBD_StdDevReq+0x7c>
        USBD_CtlError(pdev, req);
 8003996:	4621      	mov	r1, r4
 8003998:	f7ff ff22 	bl	80037e0 <USBD_CtlError>
  if (err != 0U)
 800399c:	e73f      	b.n	800381e <USBD_StdDevReq+0x2a>
      USBD_CtlError(pdev, req);
 800399e:	4621      	mov	r1, r4
 80039a0:	f7ff ff1e 	bl	80037e0 <USBD_CtlError>
    return;
 80039a4:	e73b      	b.n	800381e <USBD_StdDevReq+0x2a>
      len = MIN(len, req->wLength);
 80039a6:	429a      	cmp	r2, r3
 80039a8:	bf28      	it	cs
 80039aa:	461a      	movcs	r2, r3
 80039ac:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80039b0:	4601      	mov	r1, r0
 80039b2:	4628      	mov	r0, r5
 80039b4:	f000 fa01 	bl	8003dba <USBD_CtlSendData>
    if (req->wLength == 0U)
 80039b8:	88e3      	ldrh	r3, [r4, #6]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	f47f af2f 	bne.w	800381e <USBD_StdDevReq+0x2a>
 80039c0:	e75f      	b.n	8003882 <USBD_StdDevReq+0x8e>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80039c2:	888b      	ldrh	r3, [r1, #4]
 80039c4:	b9eb      	cbnz	r3, 8003a02 <USBD_StdDevReq+0x20e>
 80039c6:	88cb      	ldrh	r3, [r1, #6]
 80039c8:	b9db      	cbnz	r3, 8003a02 <USBD_StdDevReq+0x20e>
 80039ca:	884b      	ldrh	r3, [r1, #2]
 80039cc:	2b7f      	cmp	r3, #127	; 0x7f
 80039ce:	d818      	bhi.n	8003a02 <USBD_StdDevReq+0x20e>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80039d0:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80039d4:	2a03      	cmp	r2, #3
 80039d6:	d00d      	beq.n	80039f4 <USBD_StdDevReq+0x200>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80039d8:	b2dc      	uxtb	r4, r3
      pdev->dev_address = dev_addr;
 80039da:	f880 429e 	strb.w	r4, [r0, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80039de:	4621      	mov	r1, r4
 80039e0:	f000 fc20 	bl	8004224 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80039e4:	4628      	mov	r0, r5
 80039e6:	f000 fa14 	bl	8003e12 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 80039ea:	b134      	cbz	r4, 80039fa <USBD_StdDevReq+0x206>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80039ec:	2302      	movs	r3, #2
 80039ee:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 80039f2:	e714      	b.n	800381e <USBD_StdDevReq+0x2a>
      USBD_CtlError(pdev, req);
 80039f4:	f7ff fef4 	bl	80037e0 <USBD_CtlError>
 80039f8:	e711      	b.n	800381e <USBD_StdDevReq+0x2a>
        pdev->dev_state = USBD_STATE_DEFAULT;
 80039fa:	2301      	movs	r3, #1
 80039fc:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 8003a00:	e70d      	b.n	800381e <USBD_StdDevReq+0x2a>
    USBD_CtlError(pdev, req);
 8003a02:	4621      	mov	r1, r4
 8003a04:	4628      	mov	r0, r5
 8003a06:	f7ff feeb 	bl	80037e0 <USBD_CtlError>
 8003a0a:	e708      	b.n	800381e <USBD_StdDevReq+0x2a>
  cfgidx = (uint8_t)(req->wValue);
 8003a0c:	788b      	ldrb	r3, [r1, #2]
 8003a0e:	4a55      	ldr	r2, [pc, #340]	; (8003b64 <USBD_StdDevReq+0x370>)
 8003a10:	7013      	strb	r3, [r2, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d80d      	bhi.n	8003a32 <USBD_StdDevReq+0x23e>
    switch (pdev->dev_state)
 8003a16:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8003a1a:	2a02      	cmp	r2, #2
 8003a1c:	d00c      	beq.n	8003a38 <USBD_StdDevReq+0x244>
 8003a1e:	2a03      	cmp	r2, #3
 8003a20:	d020      	beq.n	8003a64 <USBD_StdDevReq+0x270>
        USBD_CtlError(pdev, req);
 8003a22:	f7ff fedd 	bl	80037e0 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8003a26:	4b4f      	ldr	r3, [pc, #316]	; (8003b64 <USBD_StdDevReq+0x370>)
 8003a28:	7819      	ldrb	r1, [r3, #0]
 8003a2a:	4628      	mov	r0, r5
 8003a2c:	f7ff fd99 	bl	8003562 <USBD_ClrClassConfig>
        break;
 8003a30:	e6f5      	b.n	800381e <USBD_StdDevReq+0x2a>
    USBD_CtlError(pdev, req);
 8003a32:	f7ff fed5 	bl	80037e0 <USBD_CtlError>
 8003a36:	e6f2      	b.n	800381e <USBD_StdDevReq+0x2a>
        if (cfgidx)
 8003a38:	b18b      	cbz	r3, 8003a5e <USBD_StdDevReq+0x26a>
          pdev->dev_config = cfgidx;
 8003a3a:	2101      	movs	r1, #1
 8003a3c:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8003a44:	f7ff fd81 	bl	800354a <USBD_SetClassConfig>
 8003a48:	2802      	cmp	r0, #2
 8003a4a:	d003      	beq.n	8003a54 <USBD_StdDevReq+0x260>
          USBD_CtlSendStatus(pdev);
 8003a4c:	4628      	mov	r0, r5
 8003a4e:	f000 f9e0 	bl	8003e12 <USBD_CtlSendStatus>
 8003a52:	e6e4      	b.n	800381e <USBD_StdDevReq+0x2a>
            USBD_CtlError(pdev, req);
 8003a54:	4621      	mov	r1, r4
 8003a56:	4628      	mov	r0, r5
 8003a58:	f7ff fec2 	bl	80037e0 <USBD_CtlError>
            return;
 8003a5c:	e6df      	b.n	800381e <USBD_StdDevReq+0x2a>
          USBD_CtlSendStatus(pdev);
 8003a5e:	f000 f9d8 	bl	8003e12 <USBD_CtlSendStatus>
 8003a62:	e6dc      	b.n	800381e <USBD_StdDevReq+0x2a>
        if (cfgidx == 0U)
 8003a64:	b18b      	cbz	r3, 8003a8a <USBD_StdDevReq+0x296>
        else if (cfgidx != pdev->dev_config)
 8003a66:	6841      	ldr	r1, [r0, #4]
 8003a68:	2901      	cmp	r1, #1
 8003a6a:	d01e      	beq.n	8003aaa <USBD_StdDevReq+0x2b6>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8003a6c:	b2c9      	uxtb	r1, r1
 8003a6e:	f7ff fd78 	bl	8003562 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8003a72:	4b3c      	ldr	r3, [pc, #240]	; (8003b64 <USBD_StdDevReq+0x370>)
 8003a74:	7819      	ldrb	r1, [r3, #0]
 8003a76:	6069      	str	r1, [r5, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8003a78:	4628      	mov	r0, r5
 8003a7a:	f7ff fd66 	bl	800354a <USBD_SetClassConfig>
 8003a7e:	2802      	cmp	r0, #2
 8003a80:	d00e      	beq.n	8003aa0 <USBD_StdDevReq+0x2ac>
          USBD_CtlSendStatus(pdev);
 8003a82:	4628      	mov	r0, r5
 8003a84:	f000 f9c5 	bl	8003e12 <USBD_CtlSendStatus>
 8003a88:	e6c9      	b.n	800381e <USBD_StdDevReq+0x2a>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8003a8a:	2302      	movs	r3, #2
 8003a8c:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8003a90:	2100      	movs	r1, #0
 8003a92:	6041      	str	r1, [r0, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8003a94:	f7ff fd65 	bl	8003562 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8003a98:	4628      	mov	r0, r5
 8003a9a:	f000 f9ba 	bl	8003e12 <USBD_CtlSendStatus>
 8003a9e:	e6be      	b.n	800381e <USBD_StdDevReq+0x2a>
            USBD_CtlError(pdev, req);
 8003aa0:	4621      	mov	r1, r4
 8003aa2:	4628      	mov	r0, r5
 8003aa4:	f7ff fe9c 	bl	80037e0 <USBD_CtlError>
            return;
 8003aa8:	e6b9      	b.n	800381e <USBD_StdDevReq+0x2a>
          USBD_CtlSendStatus(pdev);
 8003aaa:	f000 f9b2 	bl	8003e12 <USBD_CtlSendStatus>
 8003aae:	e6b6      	b.n	800381e <USBD_StdDevReq+0x2a>
  if (req->wLength != 1U)
 8003ab0:	88cb      	ldrh	r3, [r1, #6]
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d109      	bne.n	8003aca <USBD_StdDevReq+0x2d6>
    switch (pdev->dev_state)
 8003ab6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003aba:	2b02      	cmp	r3, #2
 8003abc:	d808      	bhi.n	8003ad0 <USBD_StdDevReq+0x2dc>
 8003abe:	b973      	cbnz	r3, 8003ade <USBD_StdDevReq+0x2ea>
        USBD_CtlError(pdev, req);
 8003ac0:	4621      	mov	r1, r4
 8003ac2:	4628      	mov	r0, r5
 8003ac4:	f7ff fe8c 	bl	80037e0 <USBD_CtlError>
        break;
 8003ac8:	e6a9      	b.n	800381e <USBD_StdDevReq+0x2a>
    USBD_CtlError(pdev, req);
 8003aca:	f7ff fe89 	bl	80037e0 <USBD_CtlError>
 8003ace:	e6a6      	b.n	800381e <USBD_StdDevReq+0x2a>
    switch (pdev->dev_state)
 8003ad0:	2b03      	cmp	r3, #3
 8003ad2:	d1f5      	bne.n	8003ac0 <USBD_StdDevReq+0x2cc>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	1d01      	adds	r1, r0, #4
 8003ad8:	f000 f96f 	bl	8003dba <USBD_CtlSendData>
        break;
 8003adc:	e69f      	b.n	800381e <USBD_StdDevReq+0x2a>
        pdev->dev_default_config = 0U;
 8003ade:	4601      	mov	r1, r0
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	f841 3f08 	str.w	r3, [r1, #8]!
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	f000 f967 	bl	8003dba <USBD_CtlSendData>
        break;
 8003aec:	e697      	b.n	800381e <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 8003aee:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003af2:	3b01      	subs	r3, #1
 8003af4:	2b02      	cmp	r3, #2
 8003af6:	d813      	bhi.n	8003b20 <USBD_StdDevReq+0x32c>
      if (req->wLength != 0x2U)
 8003af8:	88cb      	ldrh	r3, [r1, #6]
 8003afa:	2b02      	cmp	r3, #2
 8003afc:	d10d      	bne.n	8003b1a <USBD_StdDevReq+0x326>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8003afe:	2301      	movs	r3, #1
 8003b00:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup)
 8003b02:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 8003b06:	b10b      	cbz	r3, 8003b0c <USBD_StdDevReq+0x318>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8003b08:	2303      	movs	r3, #3
 8003b0a:	60c3      	str	r3, [r0, #12]
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8003b0c:	2202      	movs	r2, #2
 8003b0e:	f105 010c 	add.w	r1, r5, #12
 8003b12:	4628      	mov	r0, r5
 8003b14:	f000 f951 	bl	8003dba <USBD_CtlSendData>
      break;
 8003b18:	e681      	b.n	800381e <USBD_StdDevReq+0x2a>
        USBD_CtlError(pdev, req);
 8003b1a:	f7ff fe61 	bl	80037e0 <USBD_CtlError>
        break;
 8003b1e:	e67e      	b.n	800381e <USBD_StdDevReq+0x2a>
      USBD_CtlError(pdev, req);
 8003b20:	f7ff fe5e 	bl	80037e0 <USBD_CtlError>
      break;
 8003b24:	e67b      	b.n	800381e <USBD_StdDevReq+0x2a>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8003b26:	884b      	ldrh	r3, [r1, #2]
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	f47f ae78 	bne.w	800381e <USBD_StdDevReq+0x2a>
    pdev->dev_remote_wakeup = 1U;
 8003b2e:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8003b32:	f000 f96e 	bl	8003e12 <USBD_CtlSendStatus>
 8003b36:	e672      	b.n	800381e <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 8003b38:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003b3c:	3b01      	subs	r3, #1
 8003b3e:	2b02      	cmp	r3, #2
 8003b40:	d809      	bhi.n	8003b56 <USBD_StdDevReq+0x362>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8003b42:	884b      	ldrh	r3, [r1, #2]
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	f47f ae6a 	bne.w	800381e <USBD_StdDevReq+0x2a>
        pdev->dev_remote_wakeup = 0U;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8003b50:	f000 f95f 	bl	8003e12 <USBD_CtlSendStatus>
 8003b54:	e663      	b.n	800381e <USBD_StdDevReq+0x2a>
      USBD_CtlError(pdev, req);
 8003b56:	f7ff fe43 	bl	80037e0 <USBD_CtlError>
      break;
 8003b5a:	e660      	b.n	800381e <USBD_StdDevReq+0x2a>
          USBD_CtlError(pdev, req);
 8003b5c:	f7ff fe40 	bl	80037e0 <USBD_CtlError>
          break;
 8003b60:	e65d      	b.n	800381e <USBD_StdDevReq+0x2a>
 8003b62:	bf00      	nop
 8003b64:	20000e18 	.word	0x20000e18

08003b68 <USBD_StdItfReq>:
{
 8003b68:	b538      	push	{r3, r4, r5, lr}
 8003b6a:	4605      	mov	r5, r0
 8003b6c:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003b6e:	780b      	ldrb	r3, [r1, #0]
 8003b70:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8003b74:	2a40      	cmp	r2, #64	; 0x40
 8003b76:	d006      	beq.n	8003b86 <USBD_StdItfReq+0x1e>
 8003b78:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003b7c:	d003      	beq.n	8003b86 <USBD_StdItfReq+0x1e>
      USBD_CtlError(pdev, req);
 8003b7e:	f7ff fe2f 	bl	80037e0 <USBD_CtlError>
}
 8003b82:	2000      	movs	r0, #0
 8003b84:	bd38      	pop	{r3, r4, r5, pc}
      switch (pdev->dev_state)
 8003b86:	f895 329c 	ldrb.w	r3, [r5, #668]	; 0x29c
 8003b8a:	3b01      	subs	r3, #1
 8003b8c:	2b02      	cmp	r3, #2
 8003b8e:	d816      	bhi.n	8003bbe <USBD_StdItfReq+0x56>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8003b90:	7923      	ldrb	r3, [r4, #4]
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d80e      	bhi.n	8003bb4 <USBD_StdItfReq+0x4c>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8003b96:	f8d5 32b4 	ldr.w	r3, [r5, #692]	; 0x2b4
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	4621      	mov	r1, r4
 8003b9e:	4628      	mov	r0, r5
 8003ba0:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8003ba2:	88e3      	ldrh	r3, [r4, #6]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d1ec      	bne.n	8003b82 <USBD_StdItfReq+0x1a>
 8003ba8:	2800      	cmp	r0, #0
 8003baa:	d1ea      	bne.n	8003b82 <USBD_StdItfReq+0x1a>
              USBD_CtlSendStatus(pdev);
 8003bac:	4628      	mov	r0, r5
 8003bae:	f000 f930 	bl	8003e12 <USBD_CtlSendStatus>
 8003bb2:	e7e6      	b.n	8003b82 <USBD_StdItfReq+0x1a>
            USBD_CtlError(pdev, req);
 8003bb4:	4621      	mov	r1, r4
 8003bb6:	4628      	mov	r0, r5
 8003bb8:	f7ff fe12 	bl	80037e0 <USBD_CtlError>
 8003bbc:	e7e1      	b.n	8003b82 <USBD_StdItfReq+0x1a>
          USBD_CtlError(pdev, req);
 8003bbe:	4621      	mov	r1, r4
 8003bc0:	4628      	mov	r0, r5
 8003bc2:	f7ff fe0d 	bl	80037e0 <USBD_CtlError>
          break;
 8003bc6:	e7dc      	b.n	8003b82 <USBD_StdItfReq+0x1a>

08003bc8 <USBD_StdEPReq>:
{
 8003bc8:	b538      	push	{r3, r4, r5, lr}
 8003bca:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003bcc:	780b      	ldrb	r3, [r1, #0]
 8003bce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003bd2:	2b20      	cmp	r3, #32
 8003bd4:	d005      	beq.n	8003be2 <USBD_StdEPReq+0x1a>
 8003bd6:	2b40      	cmp	r3, #64	; 0x40
 8003bd8:	d003      	beq.n	8003be2 <USBD_StdEPReq+0x1a>
 8003bda:	b14b      	cbz	r3, 8003bf0 <USBD_StdEPReq+0x28>
      USBD_CtlError(pdev, req);
 8003bdc:	f7ff fe00 	bl	80037e0 <USBD_CtlError>
      break;
 8003be0:	e004      	b.n	8003bec <USBD_StdEPReq+0x24>
      pdev->pClass->Setup(pdev, req);
 8003be2:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	4620      	mov	r0, r4
 8003bea:	4798      	blx	r3
}
 8003bec:	2000      	movs	r0, #0
 8003bee:	bd38      	pop	{r3, r4, r5, pc}
  ep_addr  = LOBYTE(req->wIndex);
 8003bf0:	888a      	ldrh	r2, [r1, #4]
 8003bf2:	b2d0      	uxtb	r0, r2
      switch (req->bRequest)
 8003bf4:	784b      	ldrb	r3, [r1, #1]
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d031      	beq.n	8003c5e <USBD_StdEPReq+0x96>
 8003bfa:	2b03      	cmp	r3, #3
 8003bfc:	d005      	beq.n	8003c0a <USBD_StdEPReq+0x42>
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d056      	beq.n	8003cb0 <USBD_StdEPReq+0xe8>
          USBD_CtlError(pdev, req);
 8003c02:	4620      	mov	r0, r4
 8003c04:	f7ff fdec 	bl	80037e0 <USBD_CtlError>
          break;
 8003c08:	e7f0      	b.n	8003bec <USBD_StdEPReq+0x24>
          switch (pdev->dev_state)
 8003c0a:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8003c0e:	2b02      	cmp	r3, #2
 8003c10:	d005      	beq.n	8003c1e <USBD_StdEPReq+0x56>
 8003c12:	2b03      	cmp	r3, #3
 8003c14:	d013      	beq.n	8003c3e <USBD_StdEPReq+0x76>
              USBD_CtlError(pdev, req);
 8003c16:	4620      	mov	r0, r4
 8003c18:	f7ff fde2 	bl	80037e0 <USBD_CtlError>
              break;
 8003c1c:	e7e6      	b.n	8003bec <USBD_StdEPReq+0x24>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8003c1e:	f010 0f7f 	tst.w	r0, #127	; 0x7f
 8003c22:	d008      	beq.n	8003c36 <USBD_StdEPReq+0x6e>
                USBD_LL_StallEP(pdev, ep_addr);
 8003c24:	4601      	mov	r1, r0
 8003c26:	4620      	mov	r0, r4
 8003c28:	f000 fad5 	bl	80041d6 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8003c2c:	2180      	movs	r1, #128	; 0x80
 8003c2e:	4620      	mov	r0, r4
 8003c30:	f000 fad1 	bl	80041d6 <USBD_LL_StallEP>
 8003c34:	e7da      	b.n	8003bec <USBD_StdEPReq+0x24>
                USBD_CtlError(pdev, req);
 8003c36:	4620      	mov	r0, r4
 8003c38:	f7ff fdd2 	bl	80037e0 <USBD_CtlError>
 8003c3c:	e7d6      	b.n	8003bec <USBD_StdEPReq+0x24>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8003c3e:	884b      	ldrh	r3, [r1, #2]
 8003c40:	b923      	cbnz	r3, 8003c4c <USBD_StdEPReq+0x84>
                if ((ep_addr != 0x00U) &&
 8003c42:	f010 0f7f 	tst.w	r0, #127	; 0x7f
 8003c46:	d001      	beq.n	8003c4c <USBD_StdEPReq+0x84>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8003c48:	88cb      	ldrh	r3, [r1, #6]
 8003c4a:	b11b      	cbz	r3, 8003c54 <USBD_StdEPReq+0x8c>
              USBD_CtlSendStatus(pdev);
 8003c4c:	4620      	mov	r0, r4
 8003c4e:	f000 f8e0 	bl	8003e12 <USBD_CtlSendStatus>
              break;
 8003c52:	e7cb      	b.n	8003bec <USBD_StdEPReq+0x24>
                  USBD_LL_StallEP(pdev, ep_addr);
 8003c54:	4601      	mov	r1, r0
 8003c56:	4620      	mov	r0, r4
 8003c58:	f000 fabd 	bl	80041d6 <USBD_LL_StallEP>
 8003c5c:	e7f6      	b.n	8003c4c <USBD_StdEPReq+0x84>
          switch (pdev->dev_state)
 8003c5e:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8003c62:	2b02      	cmp	r3, #2
 8003c64:	d005      	beq.n	8003c72 <USBD_StdEPReq+0xaa>
 8003c66:	2b03      	cmp	r3, #3
 8003c68:	d013      	beq.n	8003c92 <USBD_StdEPReq+0xca>
              USBD_CtlError(pdev, req);
 8003c6a:	4620      	mov	r0, r4
 8003c6c:	f7ff fdb8 	bl	80037e0 <USBD_CtlError>
              break;
 8003c70:	e7bc      	b.n	8003bec <USBD_StdEPReq+0x24>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8003c72:	f010 0f7f 	tst.w	r0, #127	; 0x7f
 8003c76:	d008      	beq.n	8003c8a <USBD_StdEPReq+0xc2>
                USBD_LL_StallEP(pdev, ep_addr);
 8003c78:	4601      	mov	r1, r0
 8003c7a:	4620      	mov	r0, r4
 8003c7c:	f000 faab 	bl	80041d6 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8003c80:	2180      	movs	r1, #128	; 0x80
 8003c82:	4620      	mov	r0, r4
 8003c84:	f000 faa7 	bl	80041d6 <USBD_LL_StallEP>
 8003c88:	e7b0      	b.n	8003bec <USBD_StdEPReq+0x24>
                USBD_CtlError(pdev, req);
 8003c8a:	4620      	mov	r0, r4
 8003c8c:	f7ff fda8 	bl	80037e0 <USBD_CtlError>
 8003c90:	e7ac      	b.n	8003bec <USBD_StdEPReq+0x24>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8003c92:	884b      	ldrh	r3, [r1, #2]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d1a9      	bne.n	8003bec <USBD_StdEPReq+0x24>
                if ((ep_addr & 0x7FU) != 0x00U)
 8003c98:	f010 0f7f 	tst.w	r0, #127	; 0x7f
 8003c9c:	d103      	bne.n	8003ca6 <USBD_StdEPReq+0xde>
                USBD_CtlSendStatus(pdev);
 8003c9e:	4620      	mov	r0, r4
 8003ca0:	f000 f8b7 	bl	8003e12 <USBD_CtlSendStatus>
 8003ca4:	e7a2      	b.n	8003bec <USBD_StdEPReq+0x24>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8003ca6:	4601      	mov	r1, r0
 8003ca8:	4620      	mov	r0, r4
 8003caa:	f000 fa9c 	bl	80041e6 <USBD_LL_ClearStallEP>
 8003cae:	e7f6      	b.n	8003c9e <USBD_StdEPReq+0xd6>
          switch (pdev->dev_state)
 8003cb0:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8003cb4:	2b02      	cmp	r3, #2
 8003cb6:	d005      	beq.n	8003cc4 <USBD_StdEPReq+0xfc>
 8003cb8:	2b03      	cmp	r3, #3
 8003cba:	d018      	beq.n	8003cee <USBD_StdEPReq+0x126>
              USBD_CtlError(pdev, req);
 8003cbc:	4620      	mov	r0, r4
 8003cbe:	f7ff fd8f 	bl	80037e0 <USBD_CtlError>
              break;
 8003cc2:	e793      	b.n	8003bec <USBD_StdEPReq+0x24>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8003cc4:	f010 0f7f 	tst.w	r0, #127	; 0x7f
 8003cc8:	d003      	beq.n	8003cd2 <USBD_StdEPReq+0x10a>
                USBD_CtlError(pdev, req);
 8003cca:	4620      	mov	r0, r4
 8003ccc:	f7ff fd88 	bl	80037e0 <USBD_CtlError>
                break;
 8003cd0:	e78c      	b.n	8003bec <USBD_StdEPReq+0x24>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8003cd2:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003cd6:	bf14      	ite	ne
 8003cd8:	f104 0114 	addne.w	r1, r4, #20
 8003cdc:	f504 71aa 	addeq.w	r1, r4, #340	; 0x154
              pep->status = 0x0000U;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8003ce4:	2202      	movs	r2, #2
 8003ce6:	4620      	mov	r0, r4
 8003ce8:	f000 f867 	bl	8003dba <USBD_CtlSendData>
              break;
 8003cec:	e77e      	b.n	8003bec <USBD_StdEPReq+0x24>
              if ((ep_addr & 0x80U) == 0x80U)
 8003cee:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003cf2:	d11b      	bne.n	8003d2c <USBD_StdEPReq+0x164>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8003cf4:	f000 030f 	and.w	r3, r0, #15
 8003cf8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003cfc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003d00:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8003d04:	b333      	cbz	r3, 8003d54 <USBD_StdEPReq+0x18c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8003d06:	f000 037f 	and.w	r3, r0, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8003d0a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003d0e:	eb04 0583 	add.w	r5, r4, r3, lsl #2
 8003d12:	f505 75aa 	add.w	r5, r5, #340	; 0x154
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8003d16:	f010 0f7f 	tst.w	r0, #127	; 0x7f
 8003d1a:	d11f      	bne.n	8003d5c <USBD_StdEPReq+0x194>
                pep->status = 0x0000U;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	602b      	str	r3, [r5, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8003d20:	2202      	movs	r2, #2
 8003d22:	4629      	mov	r1, r5
 8003d24:	4620      	mov	r0, r4
 8003d26:	f000 f848 	bl	8003dba <USBD_CtlSendData>
              break;
 8003d2a:	e75f      	b.n	8003bec <USBD_StdEPReq+0x24>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8003d2c:	f000 030f 	and.w	r3, r0, #15
 8003d30:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003d34:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003d38:	699b      	ldr	r3, [r3, #24]
 8003d3a:	b13b      	cbz	r3, 8003d4c <USBD_StdEPReq+0x184>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8003d3c:	f000 057f 	and.w	r5, r0, #127	; 0x7f
 8003d40:	3501      	adds	r5, #1
 8003d42:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8003d46:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8003d4a:	e7e4      	b.n	8003d16 <USBD_StdEPReq+0x14e>
                  USBD_CtlError(pdev, req);
 8003d4c:	4620      	mov	r0, r4
 8003d4e:	f7ff fd47 	bl	80037e0 <USBD_CtlError>
                  break;
 8003d52:	e74b      	b.n	8003bec <USBD_StdEPReq+0x24>
                  USBD_CtlError(pdev, req);
 8003d54:	4620      	mov	r0, r4
 8003d56:	f7ff fd43 	bl	80037e0 <USBD_CtlError>
                  break;
 8003d5a:	e747      	b.n	8003bec <USBD_StdEPReq+0x24>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8003d5c:	4601      	mov	r1, r0
 8003d5e:	4620      	mov	r0, r4
 8003d60:	f000 fa49 	bl	80041f6 <USBD_LL_IsStallEP>
 8003d64:	b110      	cbz	r0, 8003d6c <USBD_StdEPReq+0x1a4>
                pep->status = 0x0001U;
 8003d66:	2301      	movs	r3, #1
 8003d68:	602b      	str	r3, [r5, #0]
 8003d6a:	e7d9      	b.n	8003d20 <USBD_StdEPReq+0x158>
                pep->status = 0x0000U;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	602b      	str	r3, [r5, #0]
 8003d70:	e7d6      	b.n	8003d20 <USBD_StdEPReq+0x158>

08003d72 <USBD_GetString>:
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
  uint8_t idx = 0U;

  if (desc != NULL)
 8003d72:	b308      	cbz	r0, 8003db8 <USBD_GetString+0x46>
{
 8003d74:	b470      	push	{r4, r5, r6}
 8003d76:	4604      	mov	r4, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;

  while (*buf != '\0')
 8003d78:	7803      	ldrb	r3, [r0, #0]
 8003d7a:	b13b      	cbz	r3, 8003d8c <USBD_GetString+0x1a>
 8003d7c:	f1c0 0601 	rsb	r6, r0, #1
  {
    len++;
 8003d80:	1983      	adds	r3, r0, r6
 8003d82:	b2db      	uxtb	r3, r3
  while (*buf != '\0')
 8003d84:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8003d88:	2d00      	cmp	r5, #0
 8003d8a:	d1f9      	bne.n	8003d80 <USBD_GetString+0xe>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8003d8c:	3301      	adds	r3, #1
 8003d8e:	005b      	lsls	r3, r3, #1
 8003d90:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8003d92:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8003d94:	2303      	movs	r3, #3
 8003d96:	704b      	strb	r3, [r1, #1]
    while (*desc != '\0')
 8003d98:	7820      	ldrb	r0, [r4, #0]
 8003d9a:	b158      	cbz	r0, 8003db4 <USBD_GetString+0x42>
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8003d9c:	2302      	movs	r3, #2
      unicode[idx++] =  0U;
 8003d9e:	2500      	movs	r5, #0
      unicode[idx++] = *desc++;
 8003da0:	1c5a      	adds	r2, r3, #1
 8003da2:	b2d2      	uxtb	r2, r2
 8003da4:	54c8      	strb	r0, [r1, r3]
      unicode[idx++] =  0U;
 8003da6:	3302      	adds	r3, #2
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	548d      	strb	r5, [r1, r2]
    while (*desc != '\0')
 8003dac:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8003db0:	2800      	cmp	r0, #0
 8003db2:	d1f5      	bne.n	8003da0 <USBD_GetString+0x2e>
}
 8003db4:	bc70      	pop	{r4, r5, r6}
 8003db6:	4770      	bx	lr
 8003db8:	4770      	bx	lr

08003dba <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8003dba:	b510      	push	{r4, lr}
 8003dbc:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8003dbe:	2202      	movs	r2, #2
 8003dc0:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8003dc4:	61c3      	str	r3, [r0, #28]
  pdev->ep_in[0].rem_length   = len;
 8003dc6:	6203      	str	r3, [r0, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8003dc8:	460a      	mov	r2, r1
 8003dca:	2100      	movs	r1, #0
 8003dcc:	f000 fa32 	bl	8004234 <USBD_LL_Transmit>

  return USBD_OK;
}
 8003dd0:	2000      	movs	r0, #0
 8003dd2:	bd10      	pop	{r4, pc}

08003dd4 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8003dd4:	b508      	push	{r3, lr}
 8003dd6:	4613      	mov	r3, r2
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8003dd8:	460a      	mov	r2, r1
 8003dda:	2100      	movs	r1, #0
 8003ddc:	f000 fa2a 	bl	8004234 <USBD_LL_Transmit>

  return USBD_OK;
}
 8003de0:	2000      	movs	r0, #0
 8003de2:	bd08      	pop	{r3, pc}

08003de4 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8003de4:	b510      	push	{r4, lr}
 8003de6:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8003de8:	2203      	movs	r2, #3
 8003dea:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8003dee:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8003df2:	f8c0 3160 	str.w	r3, [r0, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8003df6:	460a      	mov	r2, r1
 8003df8:	2100      	movs	r1, #0
 8003dfa:	f000 fa23 	bl	8004244 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8003dfe:	2000      	movs	r0, #0
 8003e00:	bd10      	pop	{r4, pc}

08003e02 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8003e02:	b508      	push	{r3, lr}
 8003e04:	4613      	mov	r3, r2
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8003e06:	460a      	mov	r2, r1
 8003e08:	2100      	movs	r1, #0
 8003e0a:	f000 fa1b 	bl	8004244 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8003e0e:	2000      	movs	r0, #0
 8003e10:	bd08      	pop	{r3, pc}

08003e12 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8003e12:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8003e14:	2304      	movs	r3, #4
 8003e16:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	4619      	mov	r1, r3
 8003e20:	f000 fa08 	bl	8004234 <USBD_LL_Transmit>

  return USBD_OK;
}
 8003e24:	2000      	movs	r0, #0
 8003e26:	bd08      	pop	{r3, pc}

08003e28 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8003e28:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8003e2a:	2305      	movs	r3, #5
 8003e2c:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8003e30:	2300      	movs	r3, #0
 8003e32:	461a      	mov	r2, r3
 8003e34:	4619      	mov	r1, r3
 8003e36:	f000 fa05 	bl	8004244 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8003e3a:	2000      	movs	r0, #0
 8003e3c:	bd08      	pop	{r3, pc}
	...

08003e40 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8003e40:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8003e42:	2200      	movs	r2, #0
 8003e44:	490f      	ldr	r1, [pc, #60]	; (8003e84 <MX_USB_DEVICE_Init+0x44>)
 8003e46:	4810      	ldr	r0, [pc, #64]	; (8003e88 <MX_USB_DEVICE_Init+0x48>)
 8003e48:	f7ff fb5c 	bl	8003504 <USBD_Init>
 8003e4c:	b970      	cbnz	r0, 8003e6c <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8003e4e:	490f      	ldr	r1, [pc, #60]	; (8003e8c <MX_USB_DEVICE_Init+0x4c>)
 8003e50:	480d      	ldr	r0, [pc, #52]	; (8003e88 <MX_USB_DEVICE_Init+0x48>)
 8003e52:	f7ff fb6e 	bl	8003532 <USBD_RegisterClass>
 8003e56:	b960      	cbnz	r0, 8003e72 <MX_USB_DEVICE_Init+0x32>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8003e58:	490d      	ldr	r1, [pc, #52]	; (8003e90 <MX_USB_DEVICE_Init+0x50>)
 8003e5a:	480b      	ldr	r0, [pc, #44]	; (8003e88 <MX_USB_DEVICE_Init+0x48>)
 8003e5c:	f7ff fb0a 	bl	8003474 <USBD_CDC_RegisterInterface>
 8003e60:	b950      	cbnz	r0, 8003e78 <MX_USB_DEVICE_Init+0x38>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8003e62:	4809      	ldr	r0, [pc, #36]	; (8003e88 <MX_USB_DEVICE_Init+0x48>)
 8003e64:	f7ff fb6c 	bl	8003540 <USBD_Start>
 8003e68:	b948      	cbnz	r0, 8003e7e <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8003e6a:	bd08      	pop	{r3, pc}
    Error_Handler();
 8003e6c:	f7fc fb0e 	bl	800048c <Error_Handler>
 8003e70:	e7ed      	b.n	8003e4e <MX_USB_DEVICE_Init+0xe>
    Error_Handler();
 8003e72:	f7fc fb0b 	bl	800048c <Error_Handler>
 8003e76:	e7ef      	b.n	8003e58 <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 8003e78:	f7fc fb08 	bl	800048c <Error_Handler>
 8003e7c:	e7f1      	b.n	8003e62 <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 8003e7e:	f7fc fb05 	bl	800048c <Error_Handler>
}
 8003e82:	e7f2      	b.n	8003e6a <MX_USB_DEVICE_Init+0x2a>
 8003e84:	20000534 	.word	0x20000534
 8003e88:	20001178 	.word	0x20001178
 8003e8c:	20000414 	.word	0x20000414
 8003e90:	20000524 	.word	0x20000524

08003e94 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8003e94:	2000      	movs	r0, #0
 8003e96:	4770      	bx	lr

08003e98 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8003e98:	2000      	movs	r0, #0
 8003e9a:	4770      	bx	lr

08003e9c <CDC_Init_FS>:
{
 8003e9c:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8003e9e:	4c06      	ldr	r4, [pc, #24]	; (8003eb8 <CDC_Init_FS+0x1c>)
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	4906      	ldr	r1, [pc, #24]	; (8003ebc <CDC_Init_FS+0x20>)
 8003ea4:	4620      	mov	r0, r4
 8003ea6:	f7ff faec 	bl	8003482 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8003eaa:	4905      	ldr	r1, [pc, #20]	; (8003ec0 <CDC_Init_FS+0x24>)
 8003eac:	4620      	mov	r0, r4
 8003eae:	f7ff faf0 	bl	8003492 <USBD_CDC_SetRxBuffer>
}
 8003eb2:	2000      	movs	r0, #0
 8003eb4:	bd10      	pop	{r4, pc}
 8003eb6:	bf00      	nop
 8003eb8:	20001178 	.word	0x20001178
 8003ebc:	20001824 	.word	0x20001824
 8003ec0:	2000143c 	.word	0x2000143c

08003ec4 <CDC_Transmit_FS>:
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8003ec4:	4b09      	ldr	r3, [pc, #36]	; (8003eec <CDC_Transmit_FS+0x28>)
 8003ec6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
  if (hcdc->TxState != 0){
 8003eca:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8003ece:	b10b      	cbz	r3, 8003ed4 <CDC_Transmit_FS+0x10>
    return USBD_BUSY;
 8003ed0:	2001      	movs	r0, #1
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
  /* USER CODE END 7 */
  return result;
}
 8003ed2:	4770      	bx	lr
{
 8003ed4:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8003ed6:	4c05      	ldr	r4, [pc, #20]	; (8003eec <CDC_Transmit_FS+0x28>)
 8003ed8:	460a      	mov	r2, r1
 8003eda:	4601      	mov	r1, r0
 8003edc:	4620      	mov	r0, r4
 8003ede:	f7ff fad0 	bl	8003482 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8003ee2:	4620      	mov	r0, r4
 8003ee4:	f7ff fadb 	bl	800349e <USBD_CDC_TransmitPacket>
}
 8003ee8:	bd10      	pop	{r4, pc}
 8003eea:	bf00      	nop
 8003eec:	20001178 	.word	0x20001178

08003ef0 <CDC_Receive_FS>:
{
 8003ef0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ef4:	4604      	mov	r4, r0
 8003ef6:	460d      	mov	r5, r1
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8003ef8:	4e0f      	ldr	r6, [pc, #60]	; (8003f38 <CDC_Receive_FS+0x48>)
 8003efa:	4601      	mov	r1, r0
 8003efc:	4630      	mov	r0, r6
 8003efe:	f7ff fac8 	bl	8003492 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8003f02:	4630      	mov	r0, r6
 8003f04:	f7ff fae5 	bl	80034d2 <USBD_CDC_ReceivePacket>
  memcpy(CDC_RxBuffer+CDC_RxBufferLen, Buf, *Len);
 8003f08:	4f0c      	ldr	r7, [pc, #48]	; (8003f3c <CDC_Receive_FS+0x4c>)
 8003f0a:	883e      	ldrh	r6, [r7, #0]
 8003f0c:	f8df 8030 	ldr.w	r8, [pc, #48]	; 8003f40 <CDC_Receive_FS+0x50>
 8003f10:	682a      	ldr	r2, [r5, #0]
 8003f12:	4621      	mov	r1, r4
 8003f14:	eb08 0006 	add.w	r0, r8, r6
 8003f18:	f000 f9cc 	bl	80042b4 <memcpy>
  CDC_RxBufferLen=CDC_RxBufferLen+*Len;
 8003f1c:	682b      	ldr	r3, [r5, #0]
 8003f1e:	441e      	add	r6, r3
 8003f20:	803e      	strh	r6, [r7, #0]
  CDC_Transmit_FS(Buf, *Len);
 8003f22:	8829      	ldrh	r1, [r5, #0]
 8003f24:	4620      	mov	r0, r4
 8003f26:	f7ff ffcd 	bl	8003ec4 <CDC_Transmit_FS>
  usb_rx_callback(CDC_RxBuffer, &CDC_RxBufferLen);
 8003f2a:	4639      	mov	r1, r7
 8003f2c:	4640      	mov	r0, r8
 8003f2e:	f7fc fcd1 	bl	80008d4 <usb_rx_callback>
}
 8003f32:	2000      	movs	r0, #0
 8003f34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f38:	20001178 	.word	0x20001178
 8003f3c:	20000e1a 	.word	0x20000e1a
 8003f40:	20001c0c 	.word	0x20001c0c

08003f44 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8003f44:	2312      	movs	r3, #18
 8003f46:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 8003f48:	4800      	ldr	r0, [pc, #0]	; (8003f4c <USBD_FS_DeviceDescriptor+0x8>)
 8003f4a:	4770      	bx	lr
 8003f4c:	20000550 	.word	0x20000550

08003f50 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8003f50:	2304      	movs	r3, #4
 8003f52:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 8003f54:	4800      	ldr	r0, [pc, #0]	; (8003f58 <USBD_FS_LangIDStrDescriptor+0x8>)
 8003f56:	4770      	bx	lr
 8003f58:	20000564 	.word	0x20000564

08003f5c <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 8003f5c:	b1aa      	cbz	r2, 8003f8a <IntToUnicode+0x2e>
{
 8003f5e:	b470      	push	{r4, r5, r6}
 8003f60:	4614      	mov	r4, r2
  for (idx = 0; idx < len; idx++)
 8003f62:	2300      	movs	r3, #0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8003f64:	1c4e      	adds	r6, r1, #1
 8003f66:	461d      	mov	r5, r3
    if (((value >> 28)) < 0xA)
 8003f68:	0f02      	lsrs	r2, r0, #28
 8003f6a:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
      pbuf[2 * idx] = (value >> 28) + '0';
 8003f6e:	bf34      	ite	cc
 8003f70:	3230      	addcc	r2, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8003f72:	3237      	addcs	r2, #55	; 0x37
 8003f74:	f801 2013 	strb.w	r2, [r1, r3, lsl #1]
    value = value << 4;
 8003f78:	0100      	lsls	r0, r0, #4
    pbuf[2 * idx + 1] = 0;
 8003f7a:	f806 5013 	strb.w	r5, [r6, r3, lsl #1]
  for (idx = 0; idx < len; idx++)
 8003f7e:	3301      	adds	r3, #1
 8003f80:	b2da      	uxtb	r2, r3
 8003f82:	42a2      	cmp	r2, r4
 8003f84:	d3f0      	bcc.n	8003f68 <IntToUnicode+0xc>
  }
}
 8003f86:	bc70      	pop	{r4, r5, r6}
 8003f88:	4770      	bx	lr
 8003f8a:	4770      	bx	lr

08003f8c <USBD_FS_SerialStrDescriptor>:
{
 8003f8c:	b538      	push	{r3, r4, r5, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8003f8e:	231a      	movs	r3, #26
 8003f90:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8003f92:	4b0b      	ldr	r3, [pc, #44]	; (8003fc0 <USBD_FS_SerialStrDescriptor+0x34>)
 8003f94:	6818      	ldr	r0, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8003f96:	3308      	adds	r3, #8
  deviceserial0 += deviceserial2;
 8003f98:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 8003f9a:	18c0      	adds	r0, r0, r3
 8003f9c:	d101      	bne.n	8003fa2 <USBD_FS_SerialStrDescriptor+0x16>
}
 8003f9e:	4809      	ldr	r0, [pc, #36]	; (8003fc4 <USBD_FS_SerialStrDescriptor+0x38>)
 8003fa0:	bd38      	pop	{r3, r4, r5, pc}
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8003fa2:	4b09      	ldr	r3, [pc, #36]	; (8003fc8 <USBD_FS_SerialStrDescriptor+0x3c>)
 8003fa4:	681d      	ldr	r5, [r3, #0]
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8003fa6:	4c07      	ldr	r4, [pc, #28]	; (8003fc4 <USBD_FS_SerialStrDescriptor+0x38>)
 8003fa8:	2208      	movs	r2, #8
 8003faa:	1ca1      	adds	r1, r4, #2
 8003fac:	f7ff ffd6 	bl	8003f5c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8003fb0:	2204      	movs	r2, #4
 8003fb2:	f104 0112 	add.w	r1, r4, #18
 8003fb6:	4628      	mov	r0, r5
 8003fb8:	f7ff ffd0 	bl	8003f5c <IntToUnicode>
 8003fbc:	e7ef      	b.n	8003f9e <USBD_FS_SerialStrDescriptor+0x12>
 8003fbe:	bf00      	nop
 8003fc0:	1ffff7e8 	.word	0x1ffff7e8
 8003fc4:	20000568 	.word	0x20000568
 8003fc8:	1ffff7ec 	.word	0x1ffff7ec

08003fcc <USBD_FS_ProductStrDescriptor>:
{
 8003fcc:	b508      	push	{r3, lr}
 8003fce:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8003fd0:	4902      	ldr	r1, [pc, #8]	; (8003fdc <USBD_FS_ProductStrDescriptor+0x10>)
 8003fd2:	4803      	ldr	r0, [pc, #12]	; (8003fe0 <USBD_FS_ProductStrDescriptor+0x14>)
 8003fd4:	f7ff fecd 	bl	8003d72 <USBD_GetString>
}
 8003fd8:	4800      	ldr	r0, [pc, #0]	; (8003fdc <USBD_FS_ProductStrDescriptor+0x10>)
 8003fda:	bd08      	pop	{r3, pc}
 8003fdc:	2000240c 	.word	0x2000240c
 8003fe0:	080042f8 	.word	0x080042f8

08003fe4 <USBD_FS_ManufacturerStrDescriptor>:
{
 8003fe4:	b510      	push	{r4, lr}
 8003fe6:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8003fe8:	4c03      	ldr	r4, [pc, #12]	; (8003ff8 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8003fea:	4621      	mov	r1, r4
 8003fec:	4803      	ldr	r0, [pc, #12]	; (8003ffc <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8003fee:	f7ff fec0 	bl	8003d72 <USBD_GetString>
}
 8003ff2:	4620      	mov	r0, r4
 8003ff4:	bd10      	pop	{r4, pc}
 8003ff6:	bf00      	nop
 8003ff8:	2000240c 	.word	0x2000240c
 8003ffc:	08004310 	.word	0x08004310

08004000 <USBD_FS_ConfigStrDescriptor>:
{
 8004000:	b508      	push	{r3, lr}
 8004002:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8004004:	4902      	ldr	r1, [pc, #8]	; (8004010 <USBD_FS_ConfigStrDescriptor+0x10>)
 8004006:	4803      	ldr	r0, [pc, #12]	; (8004014 <USBD_FS_ConfigStrDescriptor+0x14>)
 8004008:	f7ff feb3 	bl	8003d72 <USBD_GetString>
}
 800400c:	4800      	ldr	r0, [pc, #0]	; (8004010 <USBD_FS_ConfigStrDescriptor+0x10>)
 800400e:	bd08      	pop	{r3, pc}
 8004010:	2000240c 	.word	0x2000240c
 8004014:	08004324 	.word	0x08004324

08004018 <USBD_FS_InterfaceStrDescriptor>:
{
 8004018:	b508      	push	{r3, lr}
 800401a:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800401c:	4902      	ldr	r1, [pc, #8]	; (8004028 <USBD_FS_InterfaceStrDescriptor+0x10>)
 800401e:	4803      	ldr	r0, [pc, #12]	; (800402c <USBD_FS_InterfaceStrDescriptor+0x14>)
 8004020:	f7ff fea7 	bl	8003d72 <USBD_GetString>
}
 8004024:	4800      	ldr	r0, [pc, #0]	; (8004028 <USBD_FS_InterfaceStrDescriptor+0x10>)
 8004026:	bd08      	pop	{r3, pc}
 8004028:	2000240c 	.word	0x2000240c
 800402c:	08004330 	.word	0x08004330

08004030 <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 8004030:	b120      	cbz	r0, 800403c <USBD_Get_USB_Status+0xc>
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
    break;
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8004032:	2802      	cmp	r0, #2
 8004034:	bf14      	ite	ne
 8004036:	2002      	movne	r0, #2
 8004038:	2001      	moveq	r0, #1
 800403a:	4770      	bx	lr
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 800403c:	4770      	bx	lr
	...

08004040 <HAL_PCD_MspInit>:
  if(pcdHandle->Instance==USB)
 8004040:	6802      	ldr	r2, [r0, #0]
 8004042:	4b0e      	ldr	r3, [pc, #56]	; (800407c <HAL_PCD_MspInit+0x3c>)
 8004044:	429a      	cmp	r2, r3
 8004046:	d000      	beq.n	800404a <HAL_PCD_MspInit+0xa>
 8004048:	4770      	bx	lr
{
 800404a:	b500      	push	{lr}
 800404c:	b083      	sub	sp, #12
    __HAL_RCC_USB_CLK_ENABLE();
 800404e:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004052:	69da      	ldr	r2, [r3, #28]
 8004054:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004058:	61da      	str	r2, [r3, #28]
 800405a:	69db      	ldr	r3, [r3, #28]
 800405c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004060:	9301      	str	r3, [sp, #4]
 8004062:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 1, 0);
 8004064:	2200      	movs	r2, #0
 8004066:	2101      	movs	r1, #1
 8004068:	2014      	movs	r0, #20
 800406a:	f7fc fcd1 	bl	8000a10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800406e:	2014      	movs	r0, #20
 8004070:	f7fc fd00 	bl	8000a74 <HAL_NVIC_EnableIRQ>
}
 8004074:	b003      	add	sp, #12
 8004076:	f85d fb04 	ldr.w	pc, [sp], #4
 800407a:	bf00      	nop
 800407c:	40005c00 	.word	0x40005c00

08004080 <HAL_PCD_SetupStageCallback>:
{
 8004080:	b508      	push	{r3, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8004082:	f500 712c 	add.w	r1, r0, #688	; 0x2b0
 8004086:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 800408a:	f7ff fa71 	bl	8003570 <USBD_LL_SetupStage>
}
 800408e:	bd08      	pop	{r3, pc}

08004090 <HAL_PCD_DataOutStageCallback>:
{
 8004090:	b508      	push	{r3, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8004092:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8004096:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800409a:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 800409e:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 80040a2:	f7ff fa92 	bl	80035ca <USBD_LL_DataOutStage>
}
 80040a6:	bd08      	pop	{r3, pc}

080040a8 <HAL_PCD_DataInStageCallback>:
{
 80040a8:	b508      	push	{r3, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80040aa:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 80040ae:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 80040b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80040b4:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 80040b8:	f7ff facb 	bl	8003652 <USBD_LL_DataInStage>
}
 80040bc:	bd08      	pop	{r3, pc}

080040be <HAL_PCD_SOFCallback>:
{
 80040be:	b508      	push	{r3, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80040c0:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 80040c4:	f7ff fb6a 	bl	800379c <USBD_LL_SOF>
}
 80040c8:	bd08      	pop	{r3, pc}

080040ca <HAL_PCD_ResetCallback>:
{
 80040ca:	b510      	push	{r4, lr}
 80040cc:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80040ce:	6883      	ldr	r3, [r0, #8]
 80040d0:	2b02      	cmp	r3, #2
 80040d2:	d109      	bne.n	80040e8 <HAL_PCD_ResetCallback+0x1e>
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80040d4:	2101      	movs	r1, #1
 80040d6:	f8d4 02e8 	ldr.w	r0, [r4, #744]	; 0x2e8
 80040da:	f7ff fb49 	bl	8003770 <USBD_LL_SetSpeed>
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80040de:	f8d4 02e8 	ldr.w	r0, [r4, #744]	; 0x2e8
 80040e2:	f7ff fb1d 	bl	8003720 <USBD_LL_Reset>
}
 80040e6:	bd10      	pop	{r4, pc}
    Error_Handler();
 80040e8:	f7fc f9d0 	bl	800048c <Error_Handler>
 80040ec:	e7f2      	b.n	80040d4 <HAL_PCD_ResetCallback+0xa>
	...

080040f0 <HAL_PCD_SuspendCallback>:
{
 80040f0:	b510      	push	{r4, lr}
 80040f2:	4604      	mov	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80040f4:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 80040f8:	f7ff fb3d 	bl	8003776 <USBD_LL_Suspend>
  if (hpcd->Init.low_power_enable)
 80040fc:	69a3      	ldr	r3, [r4, #24]
 80040fe:	b123      	cbz	r3, 800410a <HAL_PCD_SuspendCallback+0x1a>
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8004100:	4a02      	ldr	r2, [pc, #8]	; (800410c <HAL_PCD_SuspendCallback+0x1c>)
 8004102:	6913      	ldr	r3, [r2, #16]
 8004104:	f043 0306 	orr.w	r3, r3, #6
 8004108:	6113      	str	r3, [r2, #16]
}
 800410a:	bd10      	pop	{r4, pc}
 800410c:	e000ed00 	.word	0xe000ed00

08004110 <HAL_PCD_ResumeCallback>:
{
 8004110:	b508      	push	{r3, lr}
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8004112:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8004116:	f7ff fb37 	bl	8003788 <USBD_LL_Resume>
}
 800411a:	bd08      	pop	{r3, pc}

0800411c <USBD_LL_Init>:
{
 800411c:	b510      	push	{r4, lr}
 800411e:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 8004120:	481d      	ldr	r0, [pc, #116]	; (8004198 <USBD_LL_Init+0x7c>)
 8004122:	f8c0 42e8 	str.w	r4, [r0, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8004126:	f8c4 02c0 	str.w	r0, [r4, #704]	; 0x2c0
  hpcd_USB_FS.Instance = USB;
 800412a:	4b1c      	ldr	r3, [pc, #112]	; (800419c <USBD_LL_Init+0x80>)
 800412c:	6003      	str	r3, [r0, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800412e:	2308      	movs	r3, #8
 8004130:	6043      	str	r3, [r0, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8004132:	2302      	movs	r3, #2
 8004134:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8004136:	2300      	movs	r3, #0
 8004138:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800413a:	61c3      	str	r3, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800413c:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800413e:	f7fc feed 	bl	8000f1c <HAL_PCD_Init>
 8004142:	bb30      	cbnz	r0, 8004192 <USBD_LL_Init+0x76>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8004144:	2318      	movs	r3, #24
 8004146:	2200      	movs	r2, #0
 8004148:	4611      	mov	r1, r2
 800414a:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 800414e:	f7fd fe33 	bl	8001db8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8004152:	2358      	movs	r3, #88	; 0x58
 8004154:	2200      	movs	r2, #0
 8004156:	2180      	movs	r1, #128	; 0x80
 8004158:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 800415c:	f7fd fe2c 	bl	8001db8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8004160:	23c0      	movs	r3, #192	; 0xc0
 8004162:	2200      	movs	r2, #0
 8004164:	2181      	movs	r1, #129	; 0x81
 8004166:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 800416a:	f7fd fe25 	bl	8001db8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800416e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8004172:	2200      	movs	r2, #0
 8004174:	2101      	movs	r1, #1
 8004176:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 800417a:	f7fd fe1d 	bl	8001db8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800417e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004182:	2200      	movs	r2, #0
 8004184:	2182      	movs	r1, #130	; 0x82
 8004186:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 800418a:	f7fd fe15 	bl	8001db8 <HAL_PCDEx_PMAConfig>
}
 800418e:	2000      	movs	r0, #0
 8004190:	bd10      	pop	{r4, pc}
    Error_Handler( );
 8004192:	f7fc f97b 	bl	800048c <Error_Handler>
 8004196:	e7d5      	b.n	8004144 <USBD_LL_Init+0x28>
 8004198:	2000260c 	.word	0x2000260c
 800419c:	40005c00 	.word	0x40005c00

080041a0 <USBD_LL_Start>:
{
 80041a0:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 80041a2:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80041a6:	f7fc ff3a 	bl	800101e <HAL_PCD_Start>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80041aa:	f7ff ff41 	bl	8004030 <USBD_Get_USB_Status>
}
 80041ae:	bd08      	pop	{r3, pc}

080041b0 <USBD_LL_OpenEP>:
{
 80041b0:	b510      	push	{r4, lr}
 80041b2:	4614      	mov	r4, r2
 80041b4:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80041b6:	4623      	mov	r3, r4
 80041b8:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80041bc:	f7fd fcd8 	bl	8001b70 <HAL_PCD_EP_Open>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80041c0:	f7ff ff36 	bl	8004030 <USBD_Get_USB_Status>
}
 80041c4:	bd10      	pop	{r4, pc}

080041c6 <USBD_LL_CloseEP>:
{
 80041c6:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80041c8:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80041cc:	f7fd fd08 	bl	8001be0 <HAL_PCD_EP_Close>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80041d0:	f7ff ff2e 	bl	8004030 <USBD_Get_USB_Status>
}
 80041d4:	bd08      	pop	{r3, pc}

080041d6 <USBD_LL_StallEP>:
{
 80041d6:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80041d8:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80041dc:	f7fd fd75 	bl	8001cca <HAL_PCD_EP_SetStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80041e0:	f7ff ff26 	bl	8004030 <USBD_Get_USB_Status>
}
 80041e4:	bd08      	pop	{r3, pc}

080041e6 <USBD_LL_ClearStallEP>:
{
 80041e6:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80041e8:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80041ec:	f7fd fda9 	bl	8001d42 <HAL_PCD_EP_ClrStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80041f0:	f7ff ff1e 	bl	8004030 <USBD_Get_USB_Status>
}
 80041f4:	bd08      	pop	{r3, pc}

080041f6 <USBD_LL_IsStallEP>:
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80041f6:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
  if((ep_addr & 0x80) == 0x80)
 80041fa:	f011 0f80 	tst.w	r1, #128	; 0x80
 80041fe:	d108      	bne.n	8004212 <USBD_LL_IsStallEP+0x1c>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8004200:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8004204:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8004208:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800420c:	f891 016a 	ldrb.w	r0, [r1, #362]	; 0x16a
}
 8004210:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8004212:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8004216:	3101      	adds	r1, #1
 8004218:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800421c:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8004220:	7888      	ldrb	r0, [r1, #2]
 8004222:	4770      	bx	lr

08004224 <USBD_LL_SetUSBAddress>:
{
 8004224:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8004226:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800422a:	f7fc ff11 	bl	8001050 <HAL_PCD_SetAddress>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800422e:	f7ff feff 	bl	8004030 <USBD_Get_USB_Status>
}
 8004232:	bd08      	pop	{r3, pc}

08004234 <USBD_LL_Transmit>:
{
 8004234:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8004236:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800423a:	f7fd fd29 	bl	8001c90 <HAL_PCD_EP_Transmit>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800423e:	f7ff fef7 	bl	8004030 <USBD_Get_USB_Status>
}
 8004242:	bd08      	pop	{r3, pc}

08004244 <USBD_LL_PrepareReceive>:
{
 8004244:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8004246:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800424a:	f7fd fcfb 	bl	8001c44 <HAL_PCD_EP_Receive>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800424e:	f7ff feef 	bl	8004030 <USBD_Get_USB_Status>
}
 8004252:	bd08      	pop	{r3, pc}

08004254 <USBD_LL_GetRxDataSize>:
{
 8004254:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8004256:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800425a:	f7fd fd10 	bl	8001c7e <HAL_PCD_EP_GetRxCount>
}
 800425e:	bd08      	pop	{r3, pc}

08004260 <USBD_static_malloc>:
}
 8004260:	4800      	ldr	r0, [pc, #0]	; (8004264 <USBD_static_malloc+0x4>)
 8004262:	4770      	bx	lr
 8004264:	20000e1c 	.word	0x20000e1c

08004268 <USBD_static_free>:
}
 8004268:	4770      	bx	lr

0800426a <HAL_PCDEx_SetConnectionState>:
}
 800426a:	4770      	bx	lr

0800426c <__libc_init_array>:
 800426c:	b570      	push	{r4, r5, r6, lr}
 800426e:	2600      	movs	r6, #0
 8004270:	4d0c      	ldr	r5, [pc, #48]	; (80042a4 <__libc_init_array+0x38>)
 8004272:	4c0d      	ldr	r4, [pc, #52]	; (80042a8 <__libc_init_array+0x3c>)
 8004274:	1b64      	subs	r4, r4, r5
 8004276:	10a4      	asrs	r4, r4, #2
 8004278:	42a6      	cmp	r6, r4
 800427a:	d109      	bne.n	8004290 <__libc_init_array+0x24>
 800427c:	f000 f830 	bl	80042e0 <_init>
 8004280:	2600      	movs	r6, #0
 8004282:	4d0a      	ldr	r5, [pc, #40]	; (80042ac <__libc_init_array+0x40>)
 8004284:	4c0a      	ldr	r4, [pc, #40]	; (80042b0 <__libc_init_array+0x44>)
 8004286:	1b64      	subs	r4, r4, r5
 8004288:	10a4      	asrs	r4, r4, #2
 800428a:	42a6      	cmp	r6, r4
 800428c:	d105      	bne.n	800429a <__libc_init_array+0x2e>
 800428e:	bd70      	pop	{r4, r5, r6, pc}
 8004290:	f855 3b04 	ldr.w	r3, [r5], #4
 8004294:	4798      	blx	r3
 8004296:	3601      	adds	r6, #1
 8004298:	e7ee      	b.n	8004278 <__libc_init_array+0xc>
 800429a:	f855 3b04 	ldr.w	r3, [r5], #4
 800429e:	4798      	blx	r3
 80042a0:	3601      	adds	r6, #1
 80042a2:	e7f2      	b.n	800428a <__libc_init_array+0x1e>
 80042a4:	08004340 	.word	0x08004340
 80042a8:	08004340 	.word	0x08004340
 80042ac:	08004340 	.word	0x08004340
 80042b0:	08004344 	.word	0x08004344

080042b4 <memcpy>:
 80042b4:	440a      	add	r2, r1
 80042b6:	4291      	cmp	r1, r2
 80042b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80042bc:	d100      	bne.n	80042c0 <memcpy+0xc>
 80042be:	4770      	bx	lr
 80042c0:	b510      	push	{r4, lr}
 80042c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80042c6:	4291      	cmp	r1, r2
 80042c8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80042cc:	d1f9      	bne.n	80042c2 <memcpy+0xe>
 80042ce:	bd10      	pop	{r4, pc}

080042d0 <memset>:
 80042d0:	4603      	mov	r3, r0
 80042d2:	4402      	add	r2, r0
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d100      	bne.n	80042da <memset+0xa>
 80042d8:	4770      	bx	lr
 80042da:	f803 1b01 	strb.w	r1, [r3], #1
 80042de:	e7f9      	b.n	80042d4 <memset+0x4>

080042e0 <_init>:
 80042e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042e2:	bf00      	nop
 80042e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042e6:	bc08      	pop	{r3}
 80042e8:	469e      	mov	lr, r3
 80042ea:	4770      	bx	lr

080042ec <_fini>:
 80042ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042ee:	bf00      	nop
 80042f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042f2:	bc08      	pop	{r3}
 80042f4:	469e      	mov	lr, r3
 80042f6:	4770      	bx	lr
